/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./deployment/server/editor.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./deployment/server/editor.ts":
/*!*************************************!*\
  !*** ./deployment/server/editor.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const NeonView_1 = __webpack_require__(/*! ../../src/NeonView */ "./src/NeonView.ts");
const DisplayPanel_1 = __webpack_require__(/*! ../../src/DisplayPanel/DisplayPanel */ "./src/DisplayPanel/DisplayPanel.ts");
const DivaView_1 = __webpack_require__(/*! ../../src/DivaView */ "./src/DivaView.ts");
const DivaEditMode_1 = __webpack_require__(/*! ../../src/SquareEdit/DivaEditMode */ "./src/SquareEdit/DivaEditMode.ts");
const SingleView_1 = __webpack_require__(/*! ../../src/SingleView/SingleView */ "./src/SingleView/SingleView.ts");
const SingleEditMode_1 = __webpack_require__(/*! ../../src/SquareEdit/SingleEditMode */ "./src/SquareEdit/SingleEditMode.ts");
const InfoModule_1 = __webpack_require__(/*! ../../src/InfoModule */ "./src/InfoModule.ts");
const TextView_1 = __webpack_require__(/*! ../../src/TextView */ "./src/TextView.ts");
const TextEditMode_1 = __webpack_require__(/*! ../../src/TextEditMode */ "./src/TextEditMode.ts");
let view;
async function init() {
    if (manifestText !== '') {
        const manifest = JSON.parse(manifestText);
        const params = {
            manifest: manifest,
            Display: DisplayPanel_1.default,
            Info: InfoModule_1.default,
            TextView: TextView_1.default,
            TextEdit: TextEditMode_1.default,
            View: undefined,
            NeumeEdit: undefined
        };
        let singlePage;
        switch (manifest.mei_annotations.length) {
            case 0:
                throw new Error('Cannot load Neon without any MEI files!');
                break;
            case 1:
                singlePage = true;
                break;
            default:
                singlePage = false;
        }
        params.View = singlePage ? SingleView_1.default : DivaView_1.default;
        params.NeumeEdit = singlePage ? SingleEditMode_1.default : DivaEditMode_1.default;
        view = new NeonView_1.default(params);
        view.start();
    }
}
init();


/***/ }),

/***/ "./node_modules/argsarray/index.js":
/*!*****************************************!*\
  !*** ./node_modules/argsarray/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = argsArray;

function argsArray(fun) {
  return function () {
    var len = arguments.length;
    if (len) {
      var args = [];
      var i = -1;
      while (++i < len) {
        args[i] = arguments[i];
      }
      return fun.call(this, args);
    } else {
      return fun.call(this, []);
    }
  };
}

/***/ }),

/***/ "./node_modules/debug/node_modules/ms/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/debug/node_modules/ms/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/debug.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/debug/node_modules/ms/index.js");

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/composite-image.js":
/*!***********************************************************!*\
  !*** ./node_modules/diva.js/source/js/composite-image.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CompositeImage; });
/* harmony import */ var _tile_coverage_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tile-coverage-map */ "./node_modules/diva.js/source/js/tile-coverage-map.js");


/**
 * @class CompositeImage
 * @private
 *
 * Utility class to composite tiles into a complete image
 * and track the rendered state of an image as new tiles
 * load.
 */

/**
 * @param levels {Array.<Array.<Tile>>}
 * @constructor
 */
class CompositeImage
{
    constructor(levels)
    {
        this._levels = levels;  // Assume levels sorted high-res first
        const urlsToTiles = this._urlsToTiles = {};

        levels.forEach(level =>
        {
            level.tiles.forEach(tile =>
            {
                urlsToTiles[tile.url] = {
                    zoomLevel: level.zoomLevel,
                    row: tile.row,
                    col: tile.col
                };
            });
        });

        this.clear();
    }

    clear ()
    {
        const loadedByLevel = this._loadedByLevel = {};

        this._levels.forEach(level => {
            loadedByLevel[level.zoomLevel] = new _tile_coverage_map__WEBPACK_IMPORTED_MODULE_0__["default"](level.rows, level.cols);
        });
    }

    getTiles (baseZoomLevel)
    {
        const toRenderByLevel = [];
        const highestZoomLevel = this._levels[0].zoomLevel;
        const covered = new _tile_coverage_map__WEBPACK_IMPORTED_MODULE_0__["default"](this._levels[0].rows, this._levels[0].cols);

        let bestLevelIndex;

        // Default to the lowest zoom level
        if (baseZoomLevel === null)
        {
            bestLevelIndex = 0;
        }
        else
        {
            const ceilLevel = Math.ceil(baseZoomLevel);
            bestLevelIndex = findIndex(this._levels, level => level.zoomLevel <= ceilLevel);
            // bestLevelIndex = this._levels.findIndex((level) => level.zoomLevel <= ceilLevel);
        }


        // The best level, followed by higher-res levels in ascending order of resolution,
        // followed by lower-res levels in descending order of resolution
        const levelsByPreference = this._levels.slice(0, bestLevelIndex + 1).reverse()
            .concat(this._levels.slice(bestLevelIndex + 1));

        levelsByPreference.forEach( (level) =>
        {
            const loaded = this._loadedByLevel[level.zoomLevel];

            let additionalTiles = level.tiles.filter(tile => loaded.isLoaded(tile.row, tile.col));

            // Filter out entirely covered tiles

            // FIXME: Is it better to draw all of a partially covered tile,
            // with some of it ultimately covered, or to pick out the region
            // which needs to be drawn?
            // See https://github.com/DDMAL/diva.js/issues/358
            const scaleRatio = Math.pow(2, highestZoomLevel - level.zoomLevel);

            additionalTiles = additionalTiles.filter(tile => {
                let isNeeded = false;

                const highResRow = tile.row * scaleRatio;
                const highResCol = tile.col * scaleRatio;

                for (let i=0; i < scaleRatio; i++)
                {
                    for (let j=0; j < scaleRatio; j++)
                    {
                        if (!covered.isLoaded(highResRow + i, highResCol + j))
                        {
                            isNeeded = true;
                            covered.set(highResRow + i, highResCol + j, true);
                        }
                    }
                }

                return isNeeded;
            });

            toRenderByLevel.push(additionalTiles);
        }, this);

        // Less-preferred tiles should come first
        toRenderByLevel.reverse();

        const tiles = [];

        toRenderByLevel.forEach(byLevel => {
            tiles.push.apply(tiles, byLevel);
        });

        return tiles;
    }

    /**
     * Update the composite image to take into account all the URLs
     * loaded in an image cache.
     *
     * @param cache {ImageCache}
     */
    updateFromCache (cache)
    {
        this.clear();

        this._levels.forEach( (level) =>
        {
            const loaded = this._loadedByLevel[level.zoomLevel];

            level.tiles.forEach(tile => {
                if (cache.has(tile.url))
                    loaded.set(tile.row, tile.col, true);
            });
        }, this);
    }

    updateWithLoadedUrls (urls)
    {
        urls.forEach( (url) =>
        {
            const entry = this._urlsToTiles[url];
            this._loadedByLevel[entry.zoomLevel].set(entry.row, entry.col, true);
        }, this);
    }
}

// function fill (count, value)
// {
//     const arr = new Array(count);
//
//     for (let i=0; i < count; i++)
//         arr[i] = value;
//
//     return arr;
// }

function findIndex (array, predicate)
{
    const length = array.length;
    for (let i = 0; i < length; i++)
    {
        if (predicate(array[i], i))
            return i;
    }

    return -1;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/diva-global.js":
/*!*******************************************************!*\
  !*** ./node_modules/diva.js/source/js/diva-global.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/events */ "./node_modules/diva.js/source/js/utils/events.js");


const diva = {
    Events: _utils_events__WEBPACK_IMPORTED_MODULE_0__["Events"],
};

/* harmony default export */ __webpack_exports__["default"] = (diva);


/***/ }),

/***/ "./node_modules/diva.js/source/js/diva.js":
/*!************************************************!*\
  !*** ./node_modules/diva.js/source/js/diva.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_vanilla_kinetic__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/vanilla.kinetic */ "./node_modules/diva.js/source/js/utils/vanilla.kinetic.js");
/* harmony import */ var _utils_vanilla_kinetic__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_utils_vanilla_kinetic__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_dragscroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/dragscroll */ "./node_modules/diva.js/source/js/utils/dragscroll.js");
/* harmony import */ var _utils_dragscroll__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_utils_dragscroll__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_elt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/elt */ "./node_modules/diva.js/source/js/utils/elt.js");
/* harmony import */ var _exceptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./exceptions */ "./node_modules/diva.js/source/js/exceptions.js");
/* harmony import */ var _diva_global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./diva-global */ "./node_modules/diva.js/source/js/diva-global.js");
/* harmony import */ var _viewer_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./viewer-core */ "./node_modules/diva.js/source/js/viewer-core.js");
/* harmony import */ var _image_manifest__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./image-manifest */ "./node_modules/diva.js/source/js/image-manifest.js");
/* harmony import */ var _toolbar__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./toolbar */ "./node_modules/diva.js/source/js/toolbar.js");
/* harmony import */ var _utils_hash_params__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/hash-params */ "./node_modules/diva.js/source/js/utils/hash-params.js");











/**
 * The top-level class for Diva objects. This is instantiated by passing in an HTML element
 * ID or HTML Element node and an object containing a list of options, of which the 'objectData'
 * option is required and which must point to a IIIF Presentation API Manifest:
 *
 * var diva = new Diva('element-id', {
 *     objectData: "http://example.com/iiif-manifest.json"
 * });
 *
 * This class also serves as the entry point for the Events system, in which applications can subscribe
 * to notifications sent from Diva instances:
 *
 * Diva.Events.subscribe('VisiblePageDidChange', function () { console.log("Visible Page Changed"); });
 *
 *
 *
 **/
class Diva
{
    constructor (element, options)
    {
        /*
         * If a string is passed in, convert that to an element.
         * */
        if (!(element instanceof HTMLElement))
        {
            this.element = document.getElementById(element);

            if (this.element === null)
            {
                throw new _exceptions__WEBPACK_IMPORTED_MODULE_3__["DivaParentElementNotFoundException"]();
            }
        }

        if (!options.objectData)
        {
            throw new _exceptions__WEBPACK_IMPORTED_MODULE_3__["ObjectDataNotSuppliedException"]('You must supply either a URL or a literal object to the `objectData` key.');
        }

        this.options = Object.assign({
            adaptivePadding: 0.05,      // The ratio of padding to the page dimension
            arrowScrollAmount: 40,      // The amount (in pixels) to scroll by when using arrow keys
            blockMobileMove: false,     // Prevent moving or scrolling the page on mobile devices
            objectData: '',             // A IIIF Manifest or a JSON file generated by process.py that provides the object dimension data, or a URL pointing to such data - *REQUIRED*
            enableAutoTitle: true,      // Shows the title within a div of id diva-title
            enableFilename: true,       // Uses filenames and not page numbers for links (i=bm_001.tif, not p=1)
            enableFullscreen: true,     // Enable or disable fullscreen icon (mode still available)
            enableGotoPage: true,       // A "go to page" jump box
            enableGotoSuggestions: true, // Controls whether suggestions are shown under the input field when the user is typing in the 'go to page' form
            enableGridIcon: true,       // A grid view of all the pages
            enableGridControls: 'buttons',  // Specify control of pages per grid row in Grid view. Possible values: 'buttons' (+/-), 'slider'. Any other value disables the controls.
            enableImageTitles: true,    // Adds "Page {n}" title to page images if true
            enableIndexAsLabel: false,  // Use index numbers instead of page labels in the page n-m display.
            enableKeyScroll: true,      // Captures scrolling using the arrow and page up/down keys regardless of page focus. When off, defers to default browser scrolling behavior.
            enableLinkIcon: true,       // Controls the visibility of the link icon
            enableNonPagedVisibilityIcon: true, // Controls the visibility of the icon to toggle the visibility of non-paged pages. (Automatically hidden if no 'non-paged' pages).
            enableSpaceScroll: false,   // Scrolling down by pressing the space key
            enableToolbar: true,        // Enables the toolbar. Note that disabling this means you have to handle all controls yourself.
            enableZoomControls: 'buttons', // Specify controls for zooming in and out. Possible values: 'buttons' (+/-), 'slider'. Any other value disables the controls.
            fillParentHeight: true,     // Use a flexbox layout to allow Diva to fill its parent's height
            fixedPadding: 10,           // Fallback if adaptive padding is set to 0
            fixedHeightGrid: true,      // So each page in grid view has the same height (only widths differ)
            goDirectlyTo: 0,            // Default initial page to show (0-indexed)
            hashParamSuffix: null,      // Used when there are multiple document viewers on a page
            imageCrossOrigin: 'anonymous', // Set crossOrigin property for image requests
            inFullscreen: false,        // Set to true to load fullscreen mode initially
            inBookLayout: false,       // Set to true to view the document with facing pages in document mode
            inGrid: false,              // Set to true to load grid view initially
            maxPagesPerRow: 8,          // Maximum number of pages per row in grid view
            maxZoomLevel: -1,           // Optional; defaults to the max zoom returned in the JSON response
            minPagesPerRow: 2,          // Minimum pages per row in grid view. Recommended default.
            minZoomLevel: 0,            // Defaults to 0 (the minimum zoom)
            onGotoSubmit: null,         // When set to a function that takes a string and returns a page index, this will override the default behaviour of the 'go to page' form submission
            pageAliases: {},            // An object mapping specific page indices to aliases (has priority over 'pageAliasFunction'
            pageAliasFunction: function(){return false;},  // A function mapping page indices to an alias. If false is returned, default page number is displayed
            pageLoadTimeout: 200,       // Number of milliseconds to wait before loading pages
            pagesPerRow: 5,             // The default number of pages per row in grid view
            requestHeaders: {"Accept": "application/json"}, // Default header sent off to the server in content negotiation
            showNonPagedPages: false,   // Whether pages tagged as 'non-paged' (in IIIF manifests only) should be visible after initial load
            throbberTimeout: 100,       // Number of milliseconds to wait before showing throbber
            tileHeight: 256,            // The height of each tile, in pixels; usually 256
            tileWidth: 256,             // The width of each tile, in pixels; usually 256
            toolbarParentObject: null,  // The toolbar parent object.
            verticallyOriented: true,   // Determines vertical vs. horizontal orientation
            viewportMargin: 200,        // Pretend tiles +/- 200px away from viewport are in
            zoomLevel: 2                // The initial zoom level (used to store the current zoom level)
        }, options);

        // In order to fill the height, use a wrapper div displayed using a flexbox layout
        const wrapperElement = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_2__["elt"])('div', {
            class: `diva-wrapper${this.options.fillParentHeight ? " diva-wrapper-flexbox" : ""}`
        });

        this.element.appendChild(wrapperElement);

        this.options.toolbarParentObject = this.options.toolbarParentObject || wrapperElement;

        const viewerCore = new _viewer_core__WEBPACK_IMPORTED_MODULE_5__["default"](wrapperElement, this.options, this);

        this.viewerState = viewerCore.getInternalState();
        this.settings = viewerCore.getSettings();
        this.toolbar = this.settings.enableToolbar ? new _toolbar__WEBPACK_IMPORTED_MODULE_7__["default"](this) : null;

        wrapperElement.id = this.settings.ID + 'wrapper';

        this.divaState = {
            viewerCore: viewerCore,
            toolbar: this.toolbar
        };

        // only render the toolbar after the object has been loaded
        let handle = _diva_global__WEBPACK_IMPORTED_MODULE_4__["default"].Events.subscribe('ObjectDidLoad', () =>
        {
            if (this.toolbar !== null)
            {
                this.toolbar.render();
            }

            _diva_global__WEBPACK_IMPORTED_MODULE_4__["default"].Events.unsubscribe(handle);
        });

        this.hashState = this._getHashParamState();

        this._loadOrFetchObjectData();
    }

    /**
     * @private
     **/
    _loadOrFetchObjectData ()
    {
        if (typeof this.settings.objectData === 'object')
        {
            // Defer execution until initialization has completed
            setTimeout(() =>
            {
                this._loadObjectData(this.settings.objectData, this.hashState);
            }, 0);
        }
        else
        {
            const pendingManifestRequest = fetch(this.settings.objectData, {
                headers: this.settings.requestHeaders
            }).then( (response) =>
            {
                if (!response.ok)
                {
                    // trigger manifest load error event
                    _diva_global__WEBPACK_IMPORTED_MODULE_4__["default"].Events.publish('ManifestFetchError', [response], this);

                    this._ajaxError(response);

                    let error = new Error(response.statusText);
                    error.response = response;
                    throw error;
                }
                return response.json();

            }).then( (data) =>
            {
                this._loadObjectData(data, this.hashState);
            });

            // Store the pending request so that it can be cancelled in the event that Diva needs to be destroyed
            this.divaState.viewerCore.setPendingManifestRequest(pendingManifestRequest);
        }
    }

    /**
     * @private
     **/
    _showError (message)
    {
        this.divaState.viewerCore.showError(message);
    }

    /**
     * @private
     * */
    _ajaxError (response)
    {
        // Show a basic error message within the document viewer pane
        const errorMessage = ['Invalid objectData setting. Error code: ' + response.status + ' ' + response.statusText];

        // Detect and handle CORS errors
        const dataHasAbsolutePath = this.settings.objectData.lastIndexOf('http', 0) === 0;

        if (dataHasAbsolutePath)
        {
            const jsonHost = this.settings.objectData.replace(/https?:\/\//i, "").split(/[/?#]/)[0];

            if (window.location.hostname !== jsonHost)
            {
                errorMessage.push(
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_2__["elt"])('p', 'Attempted to access cross-origin data without CORS.'),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_2__["elt"])('p',
                        'You may need to update your server configuration to support CORS. For help, see the ',
                        Object(_utils_elt__WEBPACK_IMPORTED_MODULE_2__["elt"])('a', {
                            href: 'https://github.com/DDMAL/diva.js/wiki/Installation#a-note-about-cross-site-requests',
                            target: '_blank'
                        }, 'cross-site request documentation.')
                    )
                );
            }
        }

        this._showError(errorMessage);
    }

    /**
     * @private
     **/
    _loadObjectData (responseData, hashState)
    {
        let manifest;

        // TODO improve IIIF detection method
        if (!responseData.hasOwnProperty('@context') && (responseData['@context'].indexOf('iiif') === -1 || responseData['@context'].indexOf('shared-canvas') === -1))
        {
            throw new _exceptions__WEBPACK_IMPORTED_MODULE_3__["NotAnIIIFManifestException"]('This does not appear to be a IIIF Manifest.');
        }

        // trigger ManifestDidLoad event
        _diva_global__WEBPACK_IMPORTED_MODULE_4__["default"].Events.publish('ManifestDidLoad', [responseData], this);
        manifest = _image_manifest__WEBPACK_IMPORTED_MODULE_6__["default"].fromIIIF(responseData);
        const loadOptions = hashState ? this._getLoadOptionsForState(hashState, manifest) : {};

        this.divaState.viewerCore.setManifest(manifest, loadOptions);
    }

    /**
     * Parse the hash parameters into the format used by getState and setState
     *
     * @private
     **/
    _getHashParamState ()
    {
        const state = {};

        ['f', 'v', 'z', 'n', 'i', 'p', 'y', 'x'].forEach( (param) =>
        {
            const value = _utils_hash_params__WEBPACK_IMPORTED_MODULE_8__["default"].get(param + this.settings.hashParamSuffix);

            // `false` is returned if the value is missing
            if (value !== false)
                state[param] = value;
        });

        // Do some awkward special-casing, since this format is kind of weird.

        // For inFullscreen (f), true and false strings should be interpreted
        // as booleans.
        if (state.f === 'true')
            state.f = true;
        else if (state.f === 'false')
            state.f = false;

        // Convert numerical values to integers, if provided
        ['z', 'n', 'p', 'x', 'y'].forEach( (param) =>
        {
            if (param in state)
                state[param] = parseInt(state[param], 10);
        });

        return state;
    }

    /**
     * @private
     **/
    _getLoadOptionsForState (state, manifest)
    {
        manifest = manifest || this.settings.manifest;

        const options = ('v' in state) ? this._getViewState(state.v) : {};

        if ('f' in state)
            options.inFullscreen = state.f;

        if ('z' in state)
            options.zoomLevel = state.z;

        if ('n' in state)
            options.pagesPerRow = state.n;

        // Only change specify the page if state.i or state.p is valid
        let pageIndex = this._getPageIndexForManifest(manifest, state.i);

        if (!(pageIndex >= 0 && pageIndex < manifest.pages.length))
        {
            pageIndex = state.p - 1;

            // Possibly NaN
            if (!(pageIndex >= 0 && pageIndex < manifest.pages.length))
                pageIndex = null;
        }

        if (pageIndex !== null)
        {
            const horizontalOffset = parseInt(state.x, 10);
            const verticalOffset = parseInt(state.y, 10);

            options.goDirectlyTo = pageIndex;
            options.horizontalOffset = horizontalOffset;
            options.verticalOffset = verticalOffset;
        }

        return options;
    }

    /**
     * @private
     * */
    _getViewState (view)
    {
        switch (view)
        {
            case 'd':
                return {
                    inGrid: false,
                    inBookLayout: false
                };

            case 'b':
                return {
                    inGrid: false,
                    inBookLayout: true
                };

            case 'g':
                return {
                    inGrid: true,
                    inBookLayout: false
                };

            default:
                return {};
        }
    }

    /**
     * @private
     * */
    _getPageIndexForManifest (manifest, filename)
    {
        let i;
        const np = manifest.pages.length;

        for (i = 0; i < np; i++)
        {
            if (manifest.pages[i].f === filename)
            {
                return i;
            }
        }

        return -1;
    }

    /**
     * @private
     * */
    _getState ()
    {
        let view;

        if (this.settings.inGrid)
        {
            view = 'g';
        }
        else if (this.settings.inBookLayout)
        {
            view = 'b';
        }
        else
        {
            view = 'd';
        }

        const layout = this.divaState.viewerCore.getCurrentLayout();
        const pageOffset = layout.getPageToViewportCenterOffset(this.settings.activePageIndex, this.viewerState.viewport);

        return {
            'f': this.settings.inFullscreen,
            'v': view,
            'z': this.settings.zoomLevel,
            'n': this.settings.pagesPerRow,
            'i': this.settings.enableFilename ? this.settings.manifest.pages[this.settings.activePageIndex].f : false,
            'p': this.settings.enableFilename ? false : this.settings.activePageIndex + 1,
            'y': pageOffset ? pageOffset.y : false,
            'x': pageOffset ? pageOffset.x : false
        };
    }

    /**
     * @private
     **/
    _getURLHash ()
    {
        const hashParams = this._getState();
        const hashStringBuilder = [];
        let param;

        for (param in hashParams)
        {
            if (hashParams[param] !== false)
                hashStringBuilder.push(param + this.settings.hashParamSuffix + '=' + encodeURIComponent(hashParams[param]));
        }

        return hashStringBuilder.join('&');
    }

    /**
     * Returns the page index associated with the given filename; must called after setting settings.manifest
     *
     * @private
     **/
    _getPageIndex (filename)
    {
        return this._getPageIndexForManifest(this.settings.manifest, filename);
    }

    /**
     * @private
     * */
    _checkLoaded ()
    {
        if (!this.viewerState.loaded)
        {
            console.warn("The viewer is not completely initialized. This is likely because it is still downloading data. To fix this, only call this function if the isReady() method returns true.");
            return false;
        }
        return true;
    }

    /**
     * Called when the fullscreen icon is clicked
     *
     * @private
     **/
    _toggleFullscreen ()
    {
        this._reloadViewer({
            inFullscreen: !this.settings.inFullscreen
        });

        // handle toolbar opacity in fullscreen
        let t;
        let hover = false;
        let tools = document.getElementById(this.settings.selector + 'tools');
        const TIMEOUT = 2000;

        if (this.settings.inFullscreen)
        {
            tools.classList.add("diva-fullscreen-tools");

            document.addEventListener('mousemove', toggleOpacity.bind(this));
            document.getElementsByClassName('diva-viewport')[0].addEventListener('scroll', toggleOpacity.bind(this));
            tools.addEventListener('mouseenter', function () {
                hover = true;
            });
            tools.addEventListener('mouseleave', function () {
                hover = false;
            });
        }
        else
        {
            tools.classList.remove("diva-fullscreen-tools");
        }

        function toggleOpacity ()
        {
            tools.style.opacity = 1;
            clearTimeout(t);
            if (!hover && this.settings.inFullscreen) {
                t = setTimeout(function ()
                {
                    tools.style.opacity = 0;
                }, TIMEOUT);
            }
        }
    }

    /**
     * Toggles between orientations
     *
     * @private
     * */
    _togglePageLayoutOrientation ()
    {
        const verticallyOriented = !this.settings.verticallyOriented;

        //if in grid, switch out of grid
        this._reloadViewer({
            inGrid: false,
            verticallyOriented: verticallyOriented,
            goDirectlyTo: this.settings.activePageIndex,
            verticalOffset: this.divaState.viewerCore.getYOffset(),
            horizontalOffset: this.divaState.viewerCore.getXOffset()
        });

        return verticallyOriented;
    }

    /**
     * Called when the change view icon is clicked
     *
     * @private
     **/
    _changeView (destinationView)
    {
        switch (destinationView)
        {
            case 'document':
                return this._reloadViewer({
                    inGrid: false,
                    inBookLayout: false
                });

            case 'book':
                return this._reloadViewer({
                    inGrid: false,
                    inBookLayout: true
                });

            case 'grid':
                return this._reloadViewer({
                    inGrid: true
                });

            default:
                return false;
        }
    }

    /**
     * @private
     *
     * @param {Number} pageIndex - 0-based page index.
     * @param {Number} xAnchor - x coordinate to jump to on resulting page.
     * @param {Number} yAnchor - y coordinate to jump to on resulting page.
     * @returns {Boolean} - Whether the jump was successful.
     **/
    _gotoPageByIndex (pageIndex, xAnchor, yAnchor)
    {
        let pidx = parseInt(pageIndex, 10);

        if (this._isPageIndexValid(pidx))
        {
            const xOffset = this.divaState.viewerCore.getXOffset(pidx, xAnchor);
            const yOffset = this.divaState.viewerCore.getYOffset(pidx, yAnchor);

            this.viewerState.renderer.goto(pidx, yOffset, xOffset);
            return true;
        }

        return false;
    }

    /**
     * Check if a page index is valid
     *
     * @private
     * @param {Number} pageIndex - Numeric (0-based) page index
     * @return {Boolean} whether the page index is valid or not.
     */
    _isPageIndexValid (pageIndex)
    {
        return this.settings.manifest.isPageValid(pageIndex, this.settings.showNonPagedPages);
    }

    /**
     * Given a pageX and pageY value, returns either the page visible at that (x,y)
     * position or -1 if no page is.
     *
     * @private
     */
    _getPageIndexForPageXYValues (pageX, pageY)
    {
        //get the four edges of the outer element
        const outerOffset = this.viewerState.outerElement.getBoundingClientRect();
        const outerTop = outerOffset.top;
        const outerLeft = outerOffset.left;
        const outerBottom = outerOffset.bottom;
        const outerRight = outerOffset.right;

        //if the clicked position was outside the diva-outer object, it was not on a visible portion of a page
        if (pageX < outerLeft || pageX > outerRight)
            return -1;

        if (pageY < outerTop || pageY > outerBottom)
            return -1;

        //navigate through all diva page objects
        const pages = document.getElementsByClassName('diva-page');
        let curPageIdx = pages.length;
        while (curPageIdx--)
        {
            //get the offset for each page
            const curPage = pages[curPageIdx];
            const curOffset = curPage.getBoundingClientRect();

            //if this point is outside the horizontal boundaries of the page, continue
            if (pageX < curOffset.left || pageX > curOffset.right)
                continue;

            //same with vertical boundaries
            if (pageY < curOffset.top || pageY > curOffset.bottom)
                continue;

            //if we made it through the above two, we found the page we're looking for
            return curPage.getAttribute('data-index');
        }

        //if we made it through that entire while loop, we didn't click on a page
        return -1;
    }

    /**
     * @private
     **/
    _reloadViewer (newOptions)
    {
        return this.divaState.viewerCore.reload(newOptions);
    }

    /**
     * @private
     */
    _getCurrentURL ()
    {
        return location.protocol + '//' + location.host + location.pathname + location.search + '#' + this._getURLHash();
    }

    /**
     * ===============================================
     *                PUBLIC FUNCTIONS
     * ===============================================
     **/

    /**
     *  Activate this instance of diva via the active Diva controller.
     *
     *  @public
     */
    activate ()
    {
        this.viewerState.isActiveDiva = true;
    }

    /**
     * Change the object (objectData) parameter currently being rendered by Diva.
     *
     * @public
     * @params {object} objectData - An IIIF Manifest object OR a URL to a IIIF manifest.
     */
    changeObject (objectData)
    {
        this.viewerState.loaded = false;
        this.divaState.viewerCore.clear();

        if (this.viewerState.renderer)
            this.viewerState.renderer.destroy();

        this.viewerState.options.objectData = objectData;

        this._loadOrFetchObjectData();
    }

    /**
     * Change views. Takes 'document', 'book', or 'grid' to specify which view to switch into
     *
     * @public
     * @params {string} destinationView - the destination view to change to.
     */
    changeView (destinationView)
    {
        this._changeView(destinationView);
    }

    /**
     *  Deactivate this diva instance through the active Diva controller.
     *
     *  @public
     **/
    deactivate ()
    {
        this.viewerState.isActiveDiva = false;
    }

    /**
     * Destroys this instance, tells plugins to do the same
     *
     * @public
     **/
    destroy ()
    {
        this.divaState.viewerCore.destroy();
    }

    /**
     * Disables document dragging, scrolling (by keyboard if set), and zooming by double-clicking
     *
     * @public
     **/
    disableScrollable ()
    {
        this.divaState.viewerCore.disableScrollable();
    }

    /**
     * Re-enables document dragging, scrolling (by keyboard if set), and zooming by double-clicking
     *
     * @public
     **/
    enableScrollable ()
    {
        this.divaState.viewerCore.enableScrollable();
    }

    /**
     * Disables document drag scrolling
     *
     * @public
     */
    disableDragScrollable ()
    {
        this.divaState.viewerCore.disableDragScrollable();
    }

    /**
     * Enables document drag scrolling
     *
     * @public
     */
    enableDragScrollable ()
    {
        this.divaState.viewerCore.enableDragScrollable();
    }

    /**
     * Enter fullscreen mode if currently not in fullscreen mode. If currently in fullscreen
     * mode this will have no effect.
     *
     * This function will work even if enableFullscreen is set to false in the options.
     *
     * @public
     * @returns {boolean} - Whether the switch to fullscreen was successful or not.
     **/
    enterFullscreenMode ()
    {
        if (!this.settings.inFullscreen)
        {
            this._toggleFullscreen();
            return true;
        }

        return false;
    }

    /**
     * Enter grid view if currently not in grid view. If currently in grid view mode
     * this will have no effect.
     *
     * @public
     * @returns {boolean} - Whether the switch to grid view was successful or not.
     **/
    enterGridView ()
    {
        if (!this.settings.inGrid)
        {
            this._changeView('grid');
            return true;
        }

        return false;
    }

    /**
     * Returns an array of all page image URIs in the document.
     *
     * @public
     * @returns {Array} - An array of all the URIs in the document.
     * */
    getAllPageURIs ()
    {
        return this.settings.manifest.pages.map( (pg) =>
        {
            return pg.f;
        });
    }

    /**
     * Get the canvas identifier for the currently visible page.
     *
     * @public
     * @returns {string} - The URI of the currently visible canvas.
     **/
    getCurrentCanvas ()
    {
        return this.settings.manifest.pages[this.settings.activePageIndex].canvas;
    }

    /**
     * Returns the dimensions of the current page at the current zoom level. Also works in
     * grid view.
     *
     * @public
     * @returns {object} - An object containing the current page dimensions at the current zoom level.
     **/
    getCurrentPageDimensionsAtCurrentZoomLevel ()
    {
        return this.getPageDimensionsAtCurrentZoomLevel(this.settings.activePageIndex);
    }

    /**
     * Returns the current filename (deprecated). Returns the URI for current page.
     *
     * @public
     * @deprecated
     * @returns {string} - The URI for the current page image.
     **/
    getCurrentPageFilename ()
    {
        console.warn('This method will be deprecated in the next version of Diva. Please use getCurrentPageURI instead.');
        return this.settings.manifest.pages[this.settings.activePageIndex].f;
    }

    /**
     * Returns an array of page indices that are visible in the viewport.
     *
     * @public
     * @returns {array} - The 0-based indices array for the currently visible pages.
     **/
    getCurrentPageIndices ()
    {
        return this.settings.currentPageIndices;
    }

    /**
     * Returns the 0-based index for the current page.
     *
     * @public
     * @returns {number} - The 0-based index for the currently visible page.
     **/
     getActivePageIndex ()
     {
        return this.settings.activePageIndex;
     }

    /**
     * Shortcut to getPageOffset for current page.
     *
     * @public
     * @returns {} -
     * */
    getCurrentPageOffset ()
    {
        return this.getPageOffset(this.settings.activePageIndex);
    }

    /**
     * Returns the current URI for the visible page.
     *
     * @public
     * @returns {string} - The URI for the current page image.
     **/
    getCurrentPageURI ()
    {
        return this.settings.manifest.pages[this.settings.activePageIndex].f;
    }

    /**
     * Return the current URL for the viewer, including the hash parameters reflecting
     * the current state of the viewer.
     *
     * @public
     * @returns {string} - The URL for the current view state.
     * */
    getCurrentURL ()
    {
        return this._getCurrentURL();
    }

    /**
     * Returns an array of all filenames in the document. Deprecated.
     *
     * @public
     * @deprecated
     * @returns {Array} - An array of all the URIs in the document.
     * */
    getFilenames ()
    {
        console.warn('This will be removed in the next version of Diva. Use getAllPageURIs instead.');

        return this.settings.manifest.pages.map( (pg) =>
        {
            return pg.f;
        });
    }

    /**
     * Get the number of grid pages per row.
     *
     * @public
     * @returns {number} - The number of grid pages per row.
     **/
    getGridPagesPerRow ()
    {
        // TODO(wabain): Add test case
        return this.settings.pagesPerRow;
    }

    /**
     * Get the instance ID number.
     *
     * @public
     * @returns {number} - The instance ID.
     * */
    //
    getInstanceId ()
    {
        return this.settings.ID;
    }

    /**
     * Get the instance selector for this instance. This is the selector for the parent
     * div.
     *
     * @public
     * @returns {string} - The viewport selector.
     * */
    getInstanceSelector ()
    {
        return this.divaState.viewerCore.selector;
    }

    /**
     * Returns the title of the document, based on the label in the IIIF manifest.
     *
     * @public
     * @returns {string} - The current title of the object from the label key in the IIIF Manifest.
     **/
    getItemTitle ()
    {
        return this.settings.manifest.itemTitle;
    }

    /**
     * Gets the maximum zoom level for the entire document.
     *
     * @public
     * @returns {number} - The maximum zoom level for the document
     * */
    getMaxZoomLevel ()
    {
        return this.settings.maxZoomLevel;
    }

    /**
     * Gets the max zoom level for a given page.
     *
     * @public
     * @param {number} pageIdx - The 0-based index number for the page.
     * @returns {number} - The maximum zoom level for that page.
     * */
    getMaxZoomLevelForPage (pageIdx)
    {
        if (!this._checkLoaded())
            return false;

        return this.settings.manifest.pages[pageIdx].m;
    }

    /**
     * Gets the minimum zoom level for the entire document.
     *
     * @public
     * @returns {number} - The minimum zoom level for the document
     * */
    getMinZoomLevel ()
    {
        return this.settings.minZoomLevel;
    }

    /**
     * Gets the number of pages in the document.
     *
     * @public
     * @returns {number} - The number of pages in the document.
     * */
    getNumberOfPages ()
    {
        if (!this._checkLoaded())
            return false;

        return this.settings.numPages;
    }

    /**
     * If a canvas has multiple images defined, returns the non-primary image.
     *
     * @public
     * @params {number} pageIndex - The page index for which to return the other images.
     * @returns {object} An object containing the other images.
     **/
    getOtherImages (pageIndex)
    {
        return this.settings.manifest.pages[pageIndex].otherImages;
    }

    /**
     * Get page dimensions in the current view and zoom level
     *
     * @public
     * @params {number} pageIndex - A valid 0-based page index
     * @returns {object} - An object containing the dimensions of the page
     * */
    getPageDimensions (pageIndex)
    {
        if (!this._checkLoaded())
            return null;

        return this.divaState.viewerCore.getCurrentLayout().getPageDimensions(pageIndex);
    }

    /**
     * Returns the dimensions of a given page at the current zoom level.
     * Also works in Grid view
     *
     * @public
     * @param {number} pageIndex - The 0-based page index
     * @returns {object} - An object containing the page dimensions at the current zoom level.
     * */
    getPageDimensionsAtCurrentZoomLevel (pageIndex)
    {
        let pidx = parseInt(pageIndex, 10);

        if (!this._isPageIndexValid(pidx))
            throw new Error('Invalid Page Index');

        return this.divaState.viewerCore.getCurrentLayout().getPageDimensions(pidx);
    }

    /**
     * Get page dimensions at a given zoom level
     *
     * @public
     * @params {number} pageIdx - A valid 0-based page index
     * @params {number} zoomLevel - A candidate zoom level.
     * @returns {object} - An object containing the dimensions of the page at the given zoom level.
     **/
    getPageDimensionsAtZoomLevel (pageIdx, zoomLevel)
    {
        if (!this._checkLoaded())
            return false;

        if (zoomLevel > this.settings.maxZoomLevel)
            zoomLevel = this.settings.maxZoomLevel;

        const pg = this.settings.manifest.pages[parseInt(pageIdx, 10)];
        const pgAtZoom = pg.d[parseInt(zoomLevel, 10)];

        return {
            width: pgAtZoom.w,
            height: pgAtZoom.h
        };
    }

    /**
     * Returns a URL for the image of the page at the given index. The
     * optional size parameter supports setting the image width or height
     * (default is full-sized).
     *
     * @public
     * @params {number} pageIndex - 0-based page index
     * @params {?object} size - an object containing width and height information
     * @returns {string} - The IIIF URL for a given page at an optional size
     */
    getPageImageURL (pageIndex, size)
    {
        return this.settings.manifest.getPageImageURL(pageIndex, size);
    }

    /**
     * Given a set of co-ordinates (e.g., from a mouse click), return the 0-based page index
     * for which it matches.
     *
     * @public
     * @params {number} pageX - The x co-ordinate
     * @params {number} pageY - The y co-ordinate
     * @returns {number} - The page index matching the co-ordinates.
     * */
    getPageIndexForPageXYValues (pageX, pageY)
    {
        return this._getPageIndexForPageXYValues(pageX, pageY);
    }

    /**
     * Returns distance between the northwest corners of diva-inner and page index.
     *
     * @public
     * @params {number} pageIndex - The 0-based page index
     * @params {?options} options - A set of options to pass in.
     * @returns {object} - The offset between the upper left corner and the page.
     *
     * */
    getPageOffset (pageIndex, options)
    {
        const region = this.divaState.viewerCore.getPageRegion(pageIndex, options);

        return {
            top: region.top,
            left: region.left
        };
    }

    /**
     * Get the instance settings.
     *
     * @public
     * @returns {object} - The current instance settings.
     * */
    getSettings ()
    {
        return this.settings;
    }

    /**
     * Get an object representing the complete state of the viewer.
     *
     * @public
     * @returns {object} - The current instance state.
     * */
    getState ()
    {
        return this._getState();
    }

    /**
     * Get the current zoom level.
     *
     * @public
     * @returns {number} - The current zoom level.
     * */
    getZoomLevel ()
    {
        return this.settings.zoomLevel;
    }

    /**
     *  Go to a particular page (with indexing starting at 0).
     *  The (xAnchor) side of the page will be anchored to the (xAnchor) side of the diva-outer element
     *
     *  @public
     *  @params {number} pageIndex - 0-based page index.
     *  @params {?string} xAnchor - may either be "left", "right", or default "center"
     *  @params {?string} yAnchor - may either be "top", "bottom", or default "center"; same process as xAnchor.
     *  @returns {boolean} - True if the page index is valid; false if it is not.
     * */
    gotoPageByIndex (pageIndex, xAnchor, yAnchor)
    {
        return this._gotoPageByIndex(pageIndex, xAnchor, yAnchor);
    }

    /**
     * Given a canvas label, attempt to go to that page. If no label was found.
     * the label will be attempted to match against the page index.
     *
     * @public
     * @params {string} label - The label to search on.
     * @params {?string} xAnchor - may either be "left", "right", or default "center"
     * @params {?string} yAnchor - may either be "top", "bottom", or default "center"
     * @returns {boolean} - True if the page index is valid; false if it is not.
     * */
    gotoPageByLabel (label, xAnchor, yAnchor)
    {
        const pages = this.settings.manifest.pages;
        let llc = label.toLowerCase();

        for (let i = 0, len = pages.length; i < len; i++)
        {
            if (pages[i].l.toLowerCase().indexOf(llc) > -1)
                return this._gotoPageByIndex(i, xAnchor, yAnchor);
        }

        const pageIndex = parseInt(label, 10) - 1;
        return this._gotoPageByIndex(pageIndex, xAnchor, yAnchor);
    }

    /**
     * Jump to a page based on its filename. Deprecated. Use gotoPageByURI instead.
     *
     * @public
     * @params {string} filename - The filename of the image to jump to.
     * @params {?string} xAnchor - may either be "left", "right", or default "center"
     * @params {?string} yAnchor - may either be "top", "bottom", or default "center"
     * @returns {boolean} true if successful and false if the filename is not found.
    */
    gotoPageByName (filename, xAnchor, yAnchor)
    {
        console.warn('This method will be removed in the next version of Diva.js. Use gotoPageByURI instead.');
        const pageIndex = this._getPageIndex(filename);
        return this._gotoPageByIndex(pageIndex, xAnchor, yAnchor);
    }

    /**
     * Jump to a page based on its URI.
     *
     * @public
     * @params {string} uri - The URI of the image to jump to.
     * @params {?string} xAnchor - may either be "left", "right", or default "center"
     * @params {?string} yAnchor - may either be "top", "bottom", or default "center"
     * @returns {boolean} true if successful and false if the URI is not found.
     */
    gotoPageByURI (uri, xAnchor, yAnchor)
    {
        const pageIndex = this._getPageIndex(uri);
        return this._gotoPageByIndex(pageIndex, xAnchor, yAnchor);
    }

    /**
     * Whether the page has other images to display.
     *
     * @public
     * @params {number} pageIndex - The 0-based page index
     * @returns {boolean} Whether the page has other images to display.
     **/
    hasOtherImages (pageIndex)
    {
        return this.settings.manifest.pages[pageIndex].otherImages === true;
    }

    /**
     * Hides the pages that are marked "non-paged" in the IIIF manifest.
     *
     * @public
     **/
    hideNonPagedPages ()
    {
        this._reloadViewer({ showNonPagedPages: false });
    }

    /**
     * Is the viewer currently in full-screen mode?
     *
     * @public
     * @returns {boolean} - Whether the viewer is in fullscreen mode.
     **/
    isInFullscreen ()
    {
        return this.settings.inFullscreen;
    }

    /**
     * Check if a page index is within the range of the document
     *
     * @public
     * @returns {boolean} - Whether the page index is valid.
     **/
    isPageIndexValid (pageIndex)
    {
        return this._isPageIndexValid(pageIndex);
    }

    /**
     * Determines if a page is currently in the viewport
     *
     * @public
     * @params {number} pageIndex - The 0-based page index
     * @returns {boolean} - Whether the page is currently in the viewport.
     **/
    isPageInViewport (pageIndex)
    {
        return this.viewerState.renderer.isPageVisible(pageIndex);
    }

    /**
     * Whether the Diva viewer has been fully initialized.
     *
     * @public
     * @returns {boolean} - True if the viewer is initialized; false otherwise.
     **/
    isReady ()
    {
        return this.viewerState.loaded;
    }

    /**
     * Check if something (e.g. a highlight box on a particular page) is visible
     *
     * @public
     * @params {number} pageIndex - The 0-based page index
     * @params {number} leftOffset - The distance of the region from the left of the viewport
     * @params {number} topOffset - The distance of the region from the top of the viewport
     * @params {number} width - The width of the region
     * @params {number} height - The height of the region
     * @returns {boolean} - Whether the region is in the viewport.
     **/
    isRegionInViewport (pageIndex, leftOffset, topOffset, width, height)
    {
        const layout = this.divaState.viewerCore.getCurrentLayout();

        if (!layout)
            return false;

        const offset = layout.getPageOffset(pageIndex);

        const top = offset.top + topOffset;
        const left = offset.left + leftOffset;

        return this.viewerState.viewport.intersectsRegion({
            top: top,
            bottom: top + height,
            left: left,
            right: left + width
        });
    }

    /**
     * Whether the page layout is vertically or horizontally oriented.
     *
     * @public
     * @returns {boolean} - True if vertical; false if horizontal.
     **/
    isVerticallyOriented ()
    {
        return this.settings.verticallyOriented;
    }

    /**
     * Leave fullscreen mode if currently in fullscreen mode.
     *
     * @public
     * @returns {boolean} - true if in fullscreen mode intitially, false otherwise
     **/
    leaveFullscreenMode ()
    {
        if (this.settings.inFullscreen)
        {
            this._toggleFullscreen();
            return true;
        }

        return false;
    }

    /**
     * Leave grid view if currently in grid view.
     *
     * @public
     * @returns {boolean} - true if in grid view initially, false otherwise
     **/
    leaveGridView ()
    {
        if (this.settings.inGrid)
        {
            this._reloadViewer({ inGrid: false });
            return true;
        }

        return false;
    }

    /**
     * Set the number of grid pages per row.
     *
     * @public
     * @params {number} pagesPerRow - The number of pages per row
     * @returns {boolean} - True if the operation was successful.
     **/
    setGridPagesPerRow (pagesPerRow)
    {
        // TODO(wabain): Add test case
        if (!this.divaState.viewerCore.isValidOption('pagesPerRow', pagesPerRow))
            return false;

        return this._reloadViewer({
            inGrid: true,
            pagesPerRow: pagesPerRow
        });
    }

    /**
     * Align this diva instance with a state object (as returned by getState)
     *
     * @public
     * @params {object} state - A Diva state object.
     * @returns {boolean} - True if the operation was successful.
     **/
    setState (state)
    {
        this._reloadViewer(this._getLoadOptionsForState(state));
    }

    /**
     * Sets the zoom level.
     *
     * @public
     * @returns {boolean} - True if the operation was successful.
     **/
    setZoomLevel (zoomLevel)
    {
        if (this.settings.inGrid)
        {
            this._reloadViewer({
                inGrid: false
            });
        }

        return this.divaState.viewerCore.zoom(zoomLevel);
    }

    /**
     * Show non-paged pages.
     *
     * @public
     * @returns {boolean} - True if the operation was successful.
     **/
    showNonPagedPages ()
    {
        this._reloadViewer({ showNonPagedPages: true });
    }

    /**
     * Toggle fullscreen mode.
     *
     * @public
     * @returns {boolean} - True if the operation was successful.
     **/
    toggleFullscreenMode ()
    {
        this._toggleFullscreen();
    }

    /**
     * Show/Hide non-paged pages
     *
     * @public
     * @returns {boolean} - True if the operation was successful.
     **/
    toggleNonPagedPagesVisibility ()
    {
        this._reloadViewer({
            showNonPagedPages: !this.settings.showNonPagedPages
        });
    }

    //Changes between horizontal layout and vertical layout. Returns true if document is now vertically oriented, false otherwise.
    toggleOrientation ()
    {
        return this._togglePageLayoutOrientation();
    }

    /**
     * Translates a measurement from the zoom level on the largest size
     * to one on the current zoom level.
     *
     * For example, a point 1000 on an image that is on zoom level 2 of 5
     * translates to a position of 111.111... (1000 / (5 - 2)^2).
     *
     * Works for a single pixel co-ordinate or a dimension (e.g., translates a box
     * that is 1000 pixels wide on the original to one that is 111.111 pixels wide
     * on the current zoom level).
     *
     * @public
     * @params {number} position - A point on the max zoom level
     * @returns {number} - The same point on the current zoom level.
    */
    translateFromMaxZoomLevel (position)
    {
        const zoomDifference = this.settings.maxZoomLevel - this.settings.zoomLevel;
        return position / Math.pow(2, zoomDifference);
    }

    /**
     * Translates a measurement from the current zoom level to the position on the
     * largest zoom level.
     *
     * Works for a single pixel co-ordinate or a dimension (e.g., translates a box
     * that is 111.111 pixels wide on the current image to one that is 1000 pixels wide
     * on the current zoom level).
     *
     * @public
     * @params {number} position - A point on the current zoom level
     * @returns {number} - The same point on the max zoom level.
    */
    translateToMaxZoomLevel (position)
    {
        const zoomDifference = this.settings.maxZoomLevel - this.settings.zoomLevel;

        // if there is no difference, it's a box on the max zoom level and
        // we can just return the position.
        if (zoomDifference === 0)
            return position;

        return position * Math.pow(2, zoomDifference);
    }

    /**
     * Zoom in.
     *
     * @public
     * @returns {boolean} - false if it's at the maximum zoom
     **/
    zoomIn ()
    {
        return this.setZoomLevel(this.settings.zoomLevel + 1);
    }

    /**
     * Zoom out.
     * @returns {boolean} - false if it's at the minimum zoom
     **/
    zoomOut ()
    {
        return this.setZoomLevel(this.settings.zoomLevel - 1);
    }
}

Diva.Events = _diva_global__WEBPACK_IMPORTED_MODULE_4__["default"].Events;

/* harmony default export */ __webpack_exports__["default"] = (Diva);

/**
 * Make `Diva` available in the global context.
 * */
if (typeof window !== 'undefined') {
    (function (global)
    {
        global.Diva = global.Diva || Diva;
    })(window);
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/document-handler.js":
/*!************************************************************!*\
  !*** ./node_modules/diva.js/source/js/document-handler.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DocumentHandler; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _page_tools_overlay__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page-tools-overlay */ "./node_modules/diva.js/source/js/page-tools-overlay.js");




class DocumentHandler
{
    constructor (viewerCore)
    {
        this._viewerCore = viewerCore;
        this._viewerState = viewerCore.getInternalState();
        this._overlays = [];

        if (this._viewerCore.getPageTools().length)
        {
            const numPages = viewerCore.getSettings().numPages;

            for (let i = 0; i < numPages; i++)
            {
                const overlay = new _page_tools_overlay__WEBPACK_IMPORTED_MODULE_1__["default"](i, viewerCore);
                this._overlays.push(overlay);
                this._viewerCore.addPageOverlay(overlay);

                // create dummy label for width calculation
                // this is necessary because the _pageToolsElem is only created on mount
                // so there's no other way to get its width before the pages are loaded
                // (which we need to avoid their width temporarily being 0 while loading)
                let dummyLabel = document.createElement('span');
                dummyLabel.innerHTML = viewerCore.settings.manifest.pages[i].l;
                dummyLabel.classList.add('diva-page-labels');
                dummyLabel.setAttribute('style', 'display: inline-block;');
                document.body.appendChild(dummyLabel);
                let labelWidth = dummyLabel.clientWidth;
                document.body.removeChild(dummyLabel);

                overlay.labelWidth = labelWidth;
            }
        }
    }

    // USER EVENTS
    onDoubleClick (event, coords)
    {
        const settings = this._viewerCore.getSettings();
        const newZoomLevel = event.ctrlKey ? settings.zoomLevel - 1 : settings.zoomLevel + 1;

        const position = this._viewerCore.getPagePositionAtViewportOffset(coords);
        this._viewerCore.zoom(newZoomLevel, position);
    }

    onPinch (event, coords, startDistance, endDistance)
    {
        // FIXME: Do this check in a way which is less spaghetti code-y
        const viewerState = this._viewerCore.getInternalState();
        const settings = this._viewerCore.getSettings();

        let newZoomLevel = Math.log(Math.pow(2, settings.zoomLevel) * endDistance / (startDistance * Math.log(2))) / Math.log(2);
        newZoomLevel = Math.max(settings.minZoomLevel, newZoomLevel);
        newZoomLevel = Math.min(settings.maxZoomLevel, newZoomLevel);

        if (newZoomLevel === settings.zoomLevel)
        {
            return;
        }

        const position = this._viewerCore.getPagePositionAtViewportOffset(coords);

        const layout = this._viewerCore.getCurrentLayout();
        const centerOffset = layout.getPageToViewportCenterOffset(position.anchorPage, viewerState.viewport);
        const scaleRatio = 1 / Math.pow(2, settings.zoomLevel - newZoomLevel);

        this._viewerCore.reload({
            zoomLevel: newZoomLevel,
            goDirectlyTo: position.anchorPage,
            horizontalOffset: (centerOffset.x - position.offset.left) + position.offset.left * scaleRatio,
            verticalOffset: (centerOffset.y - position.offset.top) + position.offset.top * scaleRatio
        });
    }

    // VIEW EVENTS
    onViewWillLoad ()
    {
        this._viewerCore.publish('DocumentWillLoad', this._viewerCore.getSettings());
    }

    onViewDidLoad ()
    {
        // TODO: Should only be necessary to handle changes on view update, not
        // initial load
        this._handleZoomLevelChange();

        const currentPageIndex = this._viewerCore.getSettings().activePageIndex;
        const fileName = this._viewerCore.getPageName(currentPageIndex);
        this._viewerCore.publish("DocumentDidLoad", currentPageIndex, fileName);
    }

    onViewDidUpdate (renderedPages, targetPage)
    {
        const currentPage = (targetPage !== null) ?
            targetPage :
            getCentermostPage(renderedPages, this._viewerCore.getCurrentLayout(), this._viewerCore.getViewport());

        // calculate the visible pages from the rendered pages
        let temp = this._viewerState.viewport.intersectionTolerance;
        // without setting to 0, isPageVisible returns true for pages out of viewport by intersectionTolerance
        this._viewerState.viewport.intersectionTolerance = 0;
        let visiblePages = renderedPages.filter(index => this._viewerState.renderer.isPageVisible(index));
        // reset back to original value after getting true visible pages
        this._viewerState.viewport.intersectionTolerance = temp;

        // Don't change the current page if there is no page in the viewport
        // FIXME: Would be better to fall back to the page closest to the viewport
        if (currentPage !== null)
        {
            this._viewerCore.setCurrentPages(currentPage, visiblePages);
        }

        if (targetPage !== null)
        {
            this._viewerCore.publish("ViewerDidJump", targetPage);
        }

        this._handleZoomLevelChange();
    }

    _handleZoomLevelChange ()
    {
        const viewerState = this._viewerState;
        const zoomLevel = viewerState.options.zoomLevel;

        // If this is not the initial load, trigger the zoom events
        if (viewerState.oldZoomLevel !== zoomLevel && viewerState.oldZoomLevel >= 0)
        {
            if (viewerState.oldZoomLevel < zoomLevel)
            {
                this._viewerCore.publish("ViewerDidZoomIn", zoomLevel);
            }
            else
            {
                this._viewerCore.publish("ViewerDidZoomOut", zoomLevel);
            }

            this._viewerCore.publish("ViewerDidZoom", zoomLevel);
        }

        viewerState.oldZoomLevel = zoomLevel;
    }

    destroy ()
    {
        this._overlays.forEach((overlay) =>
        {
            this._viewerCore.removePageOverlay(overlay);
        }, this);
    }
}

function getCentermostPage (renderedPages, layout, viewport)
{
    const centerY = viewport.top + (viewport.height / 2);
    const centerX = viewport.left + (viewport.width / 2);

    // Find the minimum distance from the viewport center to a page.
    // Compute minus the squared distance from viewport center to the page's border.
    // http://gamedev.stackexchange.com/questions/44483/how-do-i-calculate-distance-between-a-point-and-an-axis-aligned-rectangle
    const centerPage = Object(lodash__WEBPACK_IMPORTED_MODULE_0__["maxBy"])(renderedPages, pageIndex =>
    {
        const dims = layout.getPageDimensions(pageIndex);
        const imageOffset = layout.getPageOffset(pageIndex, {includePadding: true});

        const midX = imageOffset.left + (dims.width / 2);
        const midY = imageOffset.top + (dims.height / 2);

        const dx = Math.max(Math.abs(centerX - midX) - (dims.width / 2), 0);
        const dy = Math.max(Math.abs(centerY - midY) - (dims.height / 2), 0);

        return -(dx * dx + dy * dy);
    });

    return centerPage != null ? centerPage : null;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/document-layout.js":
/*!***********************************************************!*\
  !*** ./node_modules/diva.js/source/js/document-layout.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DocumentLayout; });
/**
 * Translate page layouts, as generated by page-layouts, into an
 * object which computes layout information for the document as
 * a whole.
 */
class DocumentLayout
{
    constructor (config, zoomLevel)
    {
        const computedLayout = getComputedLayout(config, zoomLevel);

        this.dimensions = computedLayout.dimensions;
        this.pageGroups = computedLayout.pageGroups;
        this._pageLookup = getPageLookup(computedLayout.pageGroups);
    }

    /**
     * @typedef {Object} PageInfo
     * @property {number} index
     * @property {{index, dimensions, pages, region, padding}} group
     * @property {{height: number, width: number}} dimensions
     * @property {{top: number, left: number}} groupOffset
     */

    /**
     * @param pageIndex
     * @returns {PageInfo|null}
     */
    getPageInfo (pageIndex)
    {
        return this._pageLookup[pageIndex] || null;
    }

    /**
     * Get the dimensions of a page
     *
     * @param pageIndex
     * @returns {{height: number, width: number}}
     */
    getPageDimensions (pageIndex)
    {
        if (!this._pageLookup || !this._pageLookup[pageIndex])
            return null;

        const region = getPageRegionFromPageInfo(this._pageLookup[pageIndex]);

        return {
            height: region.bottom - region.top,
            width: region.right - region.left
        };
    }

    // TODO(wabain): Get rid of this; it's a subset of the page region, so
    // give that instead
    /**
     * Get the top-left coordinates of a page, including*** padding
     *
     * @param pageIndex
     * @param options
     * @returns {{top: number, left: number} | null}
     */
    getPageOffset (pageIndex, options)
    {
        const region = this.getPageRegion(pageIndex, options);

        if (!region)
            return null;

        return {
            top: region.top,
            left: region.left
        };
    }

    getPageRegion (pageIndex, options)
    {
        const pageInfo = this._pageLookup[pageIndex];

        if (!pageInfo)
            return null;

        const region = getPageRegionFromPageInfo(pageInfo);
        const padding = pageInfo.group.padding;

        if (options && options.includePadding)
        {
            return {
                top: region.top + padding.top,
                left: region.left + padding.left,
                bottom: region.bottom,
                right: region.right
            };
        }

        return {
            top: region.top,
            left: region.left,
            // need to account for plugin icons below the page, see 
            // https://github.com/DDMAL/diva.js/issues/436
            bottom: region.bottom + padding.top, 
            right: region.right
        };
    }

    /**
     * Get the distance from the top-right of the page to the center of the
     * specified viewport region
     *
     * @param pageIndex
     * @param viewport {{top: number, left: number, bottom: number, right: number}}
     * @returns {{x: number, y: number}}
     */
    getPageToViewportCenterOffset (pageIndex, viewport)
    {
        const scrollLeft = viewport.left;
        const elementWidth = viewport.right - viewport.left;

        const offset = this.getPageOffset(pageIndex);

        const x = scrollLeft - offset.left + parseInt(elementWidth / 2, 10);

        const scrollTop = viewport.top;
        const elementHeight = viewport.bottom - viewport.top;

        const y = scrollTop - offset.top + parseInt(elementHeight / 2, 10);

        return {
            x: x,
            y: y
        };
    }
}

function getPageRegionFromPageInfo (page)
{
    const top    = page.groupOffset.top  + page.group.region.top;
    const bottom = top + page.dimensions.height;
    const left   = page.groupOffset.left + page.group.region.left;
    const right  = left + page.dimensions.width;

    return {
        top: top,
        bottom: bottom,
        left: left,
        right: right
    };
}

function getPageLookup (pageGroups)
{
    const pageLookup = {};

    pageGroups.forEach(group => {
        group.pages.forEach(page => {
            pageLookup[page.index] = {
                index: page.index,
                group: group,
                dimensions: page.dimensions,
                groupOffset: page.groupOffset
            };
        });
    });

    return pageLookup;
}

function getComputedLayout (config, zoomLevel)
{
    const scaledLayouts = zoomLevel === null ? config.pageLayouts : getScaledPageLayouts(config, zoomLevel);

    const documentSecondaryExtent = getExtentAlongSecondaryAxis(config, scaledLayouts);

    // The current position in the document along the primary axis
    let primaryDocPosition = config.verticallyOriented ?
        config.padding.document.top :
        config.padding.document.left;

    const pageGroups = [];

    // TODO: Use bottom, right as well
    const pagePadding = {
        top: config.padding.page.top,
        left: config.padding.page.left
    };

    scaledLayouts.forEach((layout, index) => {
        let top, left;

        if (config.verticallyOriented)
        {
            top = primaryDocPosition;
            left = (documentSecondaryExtent - layout.dimensions.width) / 2;
        }
        else
        {
            top = (documentSecondaryExtent - layout.dimensions.height) / 2;
            left = primaryDocPosition;
        }

        const region = {
            top: top,
            bottom: top + pagePadding.top + layout.dimensions.height,
            left: left,
            right: left + pagePadding.left + layout.dimensions.width
        };

        pageGroups.push({
            index: index,
            dimensions: layout.dimensions,
            pages: layout.pages,
            region: region,
            padding: pagePadding
        });

        primaryDocPosition = config.verticallyOriented ? region.bottom : region.right;
    });

    let height, width;

    if (config.verticallyOriented)
    {
        height = primaryDocPosition + pagePadding.top;
        width = documentSecondaryExtent;
    }
    else
    {
        height = documentSecondaryExtent;
        width = primaryDocPosition + pagePadding.left;
    }

    return {
        dimensions: {
            height: height,
            width: width
        },
        pageGroups: pageGroups
    };
}

function getScaledPageLayouts (config, zoomLevel)
{
    const scaleRatio = Math.pow(2, zoomLevel - config.maxZoomLevel);

    return config.pageLayouts.map(group => ({
        dimensions: scaleDimensions(group.dimensions, scaleRatio),

        pages: group.pages.map(page => ({
            index: page.index,

            groupOffset: {
                top: Math.floor(page.groupOffset.top * scaleRatio),
                left: Math.floor(page.groupOffset.left * scaleRatio)
            },

            dimensions: scaleDimensions(page.dimensions, scaleRatio)
        }))
    }));
}

function scaleDimensions (dimensions, scaleRatio)
{
    return {
        height: Math.floor(dimensions.height * scaleRatio),
        width: Math.floor(dimensions.width * scaleRatio)
    };
}

function getExtentAlongSecondaryAxis (config, scaledLayouts)
{
    // Get the extent of the document along the secondary axis
    let secondaryDim, secondaryPadding;
    const docPadding = config.padding.document;

    if (config.verticallyOriented)
    {
        secondaryDim = 'width';
        secondaryPadding = docPadding.left + docPadding.right;
    }
    else
    {
        secondaryDim = 'height';
        secondaryPadding = docPadding.top + docPadding.bottom;
    }

    return secondaryPadding + scaledLayouts.reduce((maxDim, layout) => Math.max(layout.dimensions[secondaryDim], maxDim), 0);
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/exceptions.js":
/*!******************************************************!*\
  !*** ./node_modules/diva.js/source/js/exceptions.js ***!
  \******************************************************/
/*! exports provided: DivaParentElementNotFoundException, NotAnIIIFManifestException, ObjectDataNotSuppliedException */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DivaParentElementNotFoundException", function() { return DivaParentElementNotFoundException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotAnIIIFManifestException", function() { return NotAnIIIFManifestException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectDataNotSuppliedException", function() { return ObjectDataNotSuppliedException; });
function DivaParentElementNotFoundException (message)
{
    this.name = "DivaParentElementNotFoundException";
    this.message = message;
    this.stack = (new Error()).stack;
}

DivaParentElementNotFoundException.prototype = new Error();

function NotAnIIIFManifestException (message)
{
    this.name = "NotAnIIIFManifestException";
    this.message = message;
    this.stack = (new Error()).stack;
}

NotAnIIIFManifestException.prototype = new Error();

function ObjectDataNotSuppliedException (message)
{
    this.name = "ObjectDataNotSuppliedException";
    this.message = message;
    this.stack = (new Error()).stack;
}

ObjectDataNotSuppliedException.prototype = new Error();


/***/ }),

/***/ "./node_modules/diva.js/source/js/gesture-events.js":
/*!**********************************************************!*\
  !*** ./node_modules/diva.js/source/js/gesture-events.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
    onDoubleClick,
    onPinch,
    onDoubleTap
});

const DOUBLE_CLICK_TIMEOUT = 500;
const DOUBLE_TAP_DISTANCE_THRESHOLD = 50;
const DOUBLE_TAP_TIMEOUT = 250;

function onDoubleClick(elem, callback)
{
    elem.addEventListener('dblclick', function (event)
    {
        if (!event.ctrlKey)
        {
            callback(event, getRelativeOffset(event.currentTarget, event));
        }
    });

    // Handle the control key for macs (in conjunction with double-clicking)
    // FIXME: Does a click get handled with ctrl pressed on non-Macs?
    const tracker = createDoubleEventTracker(DOUBLE_CLICK_TIMEOUT);

    elem.addEventListener('contextmenu', function (event)
    {
        event.preventDefault();

        if (event.ctrlKey)
        {
            if (tracker.isTriggered())
            {
                tracker.reset();
                callback(event, getRelativeOffset(event.currentTarget, event));
            }
            else
            {
                tracker.trigger();
            }
        }
    });
}

function onPinch(elem, callback)
{
    let startDistance = 0;

    elem.addEventListener('touchstart', function (event)
    {
        // Prevent mouse event from firing
        event.preventDefault();

        if (event.originalEvent.touches.length === 2)
        {
            startDistance = distance(
                event.originalEvent.touches[0].clientX,
                event.originalEvent.touches[0].clientY,
                event.originalEvent.touches[1].clientX,
                event.originalEvent.touches[1].clientY
            );
        }
    });

    elem.addEventListener('touchmove', function(event)
    {
        // Prevent mouse event from firing
        event.preventDefault();

        if (event.originalEvent.touches.length === 2)
        {
            const touches = event.originalEvent.touches;

            const moveDistance = distance(
                touches[0].clientX,
                touches[0].clientY,
                touches[1].clientX,
                touches[1].clientY
            );

            const zoomDelta = moveDistance - startDistance;

            if (Math.abs(zoomDelta) > 0)
            {
                const touchCenter = {
                    pageX: (touches[0].clientX + touches[1].clientX) / 2,
                    pageY: (touches[0].clientY + touches[1].clientY) / 2
                };

                callback(event, getRelativeOffset(event.currentTarget, touchCenter), startDistance, moveDistance);
            }
        }
    });
}

function onDoubleTap(elem, callback)
{
    const tracker = createDoubleEventTracker(DOUBLE_TAP_TIMEOUT);
    let firstTap = null;

    elem.addEventListener('touchend', (event) =>
    {
        // Prevent mouse event from firing
        event.preventDefault();

        if (tracker.isTriggered())
        {
            tracker.reset();

            // Doubletap has occurred
            const secondTap = {
                pageX: event.originalEvent.changedTouches[0].clientX,
                pageY: event.originalEvent.changedTouches[0].clientY
            };

            // If first tap is close to second tap (prevents interference with scale event)
            const tapDistance = distance(firstTap.pageX, firstTap.pageY, secondTap.pageX, secondTap.pageY);

            // TODO: Could give something higher-level than secondTap to callback
            if (tapDistance < DOUBLE_TAP_DISTANCE_THRESHOLD)
                callback(event, getRelativeOffset(event.currentTarget, secondTap));

            firstTap = null;
        }
        else
        {
            firstTap = {
                pageX: event.originalEvent.changedTouches[0].clientX,
                pageY: event.originalEvent.changedTouches[0].clientY
            };

            tracker.trigger();
        }
    });
}

// Pythagorean theorem to get the distance between two points (used for
// calculating finger distance for double-tap and pinch-zoom)
function distance(x1, y1, x2, y2)
{
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

// Utility to keep track of whether an event has been triggered twice
// during a a given duration
function createDoubleEventTracker(timeoutDuration)
{
    let triggered = false;
    let timeoutId = null;

    return {
        trigger()
        {
            triggered = true;
            resetTimeout();
            timeoutId = setTimeout(function ()
            {
                triggered = false;
                timeoutId = null;
            }, timeoutDuration);
        },
        isTriggered()
        {
            return triggered;
        },
        reset()
        {
            triggered = false;
            resetTimeout();
        }
    };

    function resetTimeout()
    {
        if (timeoutId !== null)
        {
            clearTimeout(timeoutId);
            timeoutId = null;
        }
    }
}

function getRelativeOffset(elem, pageCoords)
{
    const bounds = elem.getBoundingClientRect();

    return {
        left: pageCoords.pageX - bounds.left,
        top: pageCoords.pageY - bounds.top
    };
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/grid-handler.js":
/*!********************************************************!*\
  !*** ./node_modules/diva.js/source/js/grid-handler.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GridHandler; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);


class GridHandler
{
    constructor (viewerCore)
    {
        this._viewerCore = viewerCore;
    }

    // USER EVENTS
    onDoubleClick (event, coords)
    {
        const position = this._viewerCore.getPagePositionAtViewportOffset(coords);

        const layout = this._viewerCore.getCurrentLayout();
        const viewport = this._viewerCore.getViewport();
        const pageToViewportCenterOffset = layout.getPageToViewportCenterOffset(position.anchorPage, viewport);

        this._viewerCore.reload({
            inGrid: false,
            goDirectlyTo: position.anchorPage,
            horizontalOffset: pageToViewportCenterOffset.x + position.offset.left,
            verticalOffset: pageToViewportCenterOffset.y + position.offset.top
        });
    }

    onPinch ()
    {
        this._viewerCore.reload({inGrid: false});
    }

    // VIEW EVENTS
    onViewWillLoad ()
    {
        // FIXME(wabain): Should something happen here?
        /* No-op */
    }

    onViewDidLoad ()
    {
        // FIXME(wabain): Should something happen here?
        /* No-op */
    }

    onViewDidUpdate (renderedPages, targetPage)
    {
        // return early if there are no rendered pages in view.
        if (renderedPages.length === 0) return;

        // calculate the visible pages from the rendered pages
        let temp = this._viewerCore.viewerState.viewport.intersectionTolerance;
        // without setting to 0, isPageVisible returns true for pages out of viewport by intersectionTolerance
        this._viewerCore.viewerState.viewport.intersectionTolerance = 0;
        let visiblePages = renderedPages.filter(index => this._viewerCore.viewerState.renderer.isPageVisible(index));
        // reset back to original value after getting true visible pages
        this._viewerCore.viewerState.viewport.intersectionTolerance = temp;

        if (targetPage !== null)
        {
            this._viewerCore.setCurrentPages(targetPage, visiblePages);
            return;
        }

        // Select the current page from the first row if it is fully visible, or from
        // the second row if it is fully visible, or from the centermost row otherwise.
        // If the current page is in that group then don't change it. Otherwise, set
        // the current page to the group's first page.

        const layout = this._viewerCore.getCurrentLayout();
        const groups = [];

        renderedPages.forEach(pageIndex =>
        {
            const group = layout.getPageInfo(pageIndex).group;
            if (groups.length === 0 || group !== groups[groups.length - 1])
            {
                groups.push(group);
            }
        });

        const viewport = this._viewerCore.getViewport();
        let chosenGroup;

        if (groups.length === 1 || groups[0].region.top >= viewport.top)
        {
            chosenGroup = groups[0];
        }
        else if (groups[1].region.bottom <= viewport.bottom)
        {
            chosenGroup = groups[1];
        }
        else
        {
            chosenGroup = getCentermostGroup(groups, viewport);
        }

        const currentPage = this._viewerCore.getSettings().activePageIndex;

        const hasCurrentPage = chosenGroup.pages.some(page => page.index === currentPage);

        if (!hasCurrentPage)
        {
            this._viewerCore.setCurrentPages(chosenGroup.pages[0].index, visiblePages);
        }
    }

    destroy ()
    {
        // No-op
    }
}

function getCentermostGroup (groups, viewport)
{
    const viewportMiddle = viewport.top + viewport.height / 2;

    return Object(lodash__WEBPACK_IMPORTED_MODULE_0__["maxBy"])(groups, group =>
    {
        const groupMiddle = group.region.top + group.dimensions.height / 2;
        return -Math.abs(viewportMiddle - groupMiddle);
    });
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/iiif-source-adapter.js":
/*!***************************************************************!*\
  !*** ./node_modules/diva.js/source/js/iiif-source-adapter.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IIIFSourceAdapter; });
class IIIFSourceAdapter
{
    getPageImageURL (manifest, pageIndex, size)
    {
        let dimens;

        if (!size || (size.width == null && size.height == null))
        {
            dimens = 'full';
        }
        else
        {
            dimens = (size.width == null ? '' : size.width) + ',' + (size.height == null ? '' : size.height);
        }

        const page = manifest.pages[pageIndex];
        const quality = (page.api > 1.1) ? 'default' : 'native';

        return encodeURI(page.url + 'full/' + dimens + '/0/' + quality + '.jpg');
    }

    getTileImageURL (manifest, pageIndex, params)
    {
        const page = manifest.pages[pageIndex];

        let height, width;

        if (params.row === params.rowCount - 1)
        {
            height = page.d[params.zoomLevel].h - (params.rowCount - 1) * params.tileDimensions.height;
        }
        else
        {
            height = params.tileDimensions.height;
        }

        if (params.col === params.colCount - 1)
        {
            width = page.d[params.zoomLevel].w - (params.colCount - 1) * params.tileDimensions.width;
        }
        else
        {
            width = params.tileDimensions.width;
        }

        const zoomDifference = Math.pow(2, manifest.maxZoom - params.zoomLevel);

        let x = params.col * params.tileDimensions.width * zoomDifference;
        let y = params.row * params.tileDimensions.height * zoomDifference;

        if (page.hasOwnProperty('xoffset'))
        {
            x += page.xoffset;
            y += page.yoffset;
        }

        const region = [x, y, width * zoomDifference, height * zoomDifference].join(',');

        const quality = (page.api > 1.1) ? 'default' : 'native';

        return encodeURI(page.url + region + '/' + width + ',' + height + '/0/' + quality + '.jpg');
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/image-cache.js":
/*!*******************************************************!*\
  !*** ./node_modules/diva.js/source/js/image-cache.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ImageCache; });
const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('diva:ImageCache');

/* FIXME(wabain): The caching strategy here is completely
 * arbitrary and the implementation isn't especially efficient.
 */
const DEFAULT_MAX_KEYS = 100;

class ImageCache
{
    constructor (options)
    {
        options = options || { maxKeys: DEFAULT_MAX_KEYS };
        this.maxKeys = options.maxKeys || DEFAULT_MAX_KEYS;

        this._held = {};
        this._urls = {};
        this._lru = [];
    }

    get (url)
    {
        const record = this._urls[url];
        return record ? record.img : null;
    }

    has (url)
    {
        return !!this._urls[url];
    }

    put (url, img)
    {
        let record = this._urls[url];
        if (record)
        {
            // FIXME: Does this make sense for this use case?
            record.img = img;
            this._promote(record);
        }
        else
        {
            record = {
                img: img,
                url: url
            };

            this._urls[url] = record;
            this._tryEvict(1);
            this._lru.unshift(record);
        }
    }

    _promote (record)
    {
        const index = this._lru.indexOf(record);
        this._lru.splice(index, 1);
        this._lru.unshift(record);
    }

    _tryEvict (extraCapacity)
    {
        const allowedEntryCount = this.maxKeys - extraCapacity;

        if (this._lru.length <= allowedEntryCount)
            return;

        let evictionIndex = this._lru.length - 1;

        for (;;)
        {
            const target = this._lru[evictionIndex];

            if (!this._held[target.url])
            {
                debug('Evicting image %s', target.url);
                this._lru.splice(evictionIndex, 1);
                delete this._urls[target.url];

                if (this._lru.length <= allowedEntryCount)
                    break;
            }

            if (evictionIndex === 0)
            {
                /* istanbul ignore next */
                debug.enabled && debug('Cache overfull by %s (all entries are being held)',
                    this._lru.length - allowedEntryCount);

                break;
            }

            evictionIndex--;
        }
    }

    acquire (url)
    {
        this._held[url] = (this._held[url] || 0) + 1;
        this._promote(this._urls[url]);
    }

    release (url)
    {
        const count = this._held[url];

        if (count > 1)
            this._held[url]--;
        else
            delete this._held[url];

        this._tryEvict(0);
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/image-manifest.js":
/*!**********************************************************!*\
  !*** ./node_modules/diva.js/source/js/image-manifest.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ImageManifest; });
/* harmony import */ var _parse_iiif_manifest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse-iiif-manifest */ "./node_modules/diva.js/source/js/parse-iiif-manifest.js");
/* harmony import */ var _iiif_source_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iiif-source-adapter */ "./node_modules/diva.js/source/js/iiif-source-adapter.js");




class ImageManifest
{
    constructor (data, urlAdapter)
    {
        // Save all the data we need
        this.pages = data.pgs;
        this.maxZoom = data.max_zoom;
        this.maxRatio = data.dims.max_ratio;
        this.minRatio = data.dims.min_ratio;
        this.itemTitle = data.item_title;
        this.metadata = data.metadata;

        // Only given for IIIF manifests
        this.paged = !!data.paged;

        // These are arrays, the index corresponding to the zoom level
        this._maxWidths = data.dims.max_w;
        this._maxHeights = data.dims.max_h;
        this._averageWidths = data.dims.a_wid;
        this._averageHeights = data.dims.a_hei;
        this._totalHeights = data.dims.t_hei;
        this._totalWidths = data.dims.t_wid;

        this._urlAdapter = urlAdapter;
    }

    static fromIIIF (iiifManifest)
    {
        const data = Object(_parse_iiif_manifest__WEBPACK_IMPORTED_MODULE_0__["default"])(iiifManifest);
        return new ImageManifest(data, new _iiif_source_adapter__WEBPACK_IMPORTED_MODULE_1__["default"]());
    }

    isPageValid (pageIndex, showNonPagedPages)
    {
        if (!showNonPagedPages && this.paged && !this.pages[pageIndex].paged)
        {
            return false;
        }

        return pageIndex >= 0 && pageIndex < this.pages.length;
    }

    getMaxPageDimensions (pageIndex)
    {
        const maxDims = this.pages[pageIndex].d[this.maxZoom];

        return {
            height: maxDims.h,
            width: maxDims.w
        };
    }

    getPageDimensionsAtZoomLevel (pageIndex, zoomLevel)
    {
        const maxDims = this.pages[pageIndex].d[this.maxZoom];

        const scaleRatio = getScaleRatio(this.maxZoom, zoomLevel);

        return {
            height: maxDims.h * scaleRatio,
            width: maxDims.w * scaleRatio
        };
    }

    /**
     * Returns a URL for the image of the given page. The optional size
     * parameter supports setting the image width or height (default is
     * full-sized).
     */
    getPageImageURL (pageIndex, size)
    {
        return this._urlAdapter.getPageImageURL(this, pageIndex, size);
    }

    /**
     * Return an array of tile objects for the specified page and integer zoom level
     */
    getPageImageTiles (pageIndex, zoomLevel, tileDimensions)
    {
        const page = this.pages[pageIndex];

        if (!isFinite(zoomLevel) || zoomLevel % 1 !== 0)
        {
            throw new TypeError('Zoom level must be an integer: ' + zoomLevel);
        }

        const rows = Math.ceil(page.d[zoomLevel].h / tileDimensions.height);
        const cols = Math.ceil(page.d[zoomLevel].w / tileDimensions.width);

        const tiles = [];

        let row, col, url;

        for (row = 0; row < rows; row++)
        {
            for (col = 0; col < cols; col++)
            {
                url = this._urlAdapter.getTileImageURL(this, pageIndex, {
                    row: row,
                    col: col,
                    rowCount: rows,
                    colCount: cols,
                    zoomLevel: zoomLevel,
                    tileDimensions: tileDimensions
                });

                // FIXME: Dimensions should account for partial tiles (e.g. the
                // last row and column in a tiled image)
                tiles.push({
                    row: row,
                    col: col,
                    zoomLevel: zoomLevel,
                    dimensions: {
                        height: tileDimensions.height,
                        width: tileDimensions.width
                    },
                    offset: {
                        top: row * tileDimensions.height,
                        left: col * tileDimensions.width
                    },
                    url: url
                });
            }
        }

        return {
            zoomLevel: zoomLevel,
            rows: rows,
            cols: cols,
            tiles: tiles
        };
    }
}

ImageManifest.prototype.getMaxWidth = zoomedPropertyGetter('_maxWidths');
ImageManifest.prototype.getMaxHeight = zoomedPropertyGetter('_maxHeights');
ImageManifest.prototype.getAverageWidth = zoomedPropertyGetter('_averageWidths');
ImageManifest.prototype.getAverageHeight = zoomedPropertyGetter('_averageHeights');
ImageManifest.prototype.getTotalWidth = zoomedPropertyGetter('_totalWidths');
ImageManifest.prototype.getTotalHeight = zoomedPropertyGetter('_totalHeights');

function zoomedPropertyGetter (privateName)
{
    return function (zoomLevel)
    {
        return this[privateName][zoomLevel];
    };
}

function getScaleRatio (sourceZoomLevel, targetZoomLevel)
{
    return 1 / Math.pow(2, sourceZoomLevel - targetZoomLevel);
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/image-request-handler.js":
/*!*****************************************************************!*\
  !*** ./node_modules/diva.js/source/js/image-request-handler.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ImageRequestHandler; });
/**
 * Handler for the request for an image tile
 *
 * @param url
 * @param callback
 * @constructor
 */
class ImageRequestHandler
{
    constructor (options)
    {
        this._url = options.url;
        this._callback = options.load;
        this._errorCallback = options.error;
        this.timeoutTime = options.timeoutTime || 0;
        this._aborted = this._complete = false;
        this._crossOrigin = options.settings.imageCrossOrigin;

        //Use a timeout to allow the requests to be debounced (as they are in renderer)
        this.timeout = setTimeout(() => {
            // Initiate the request
            this._image = new Image();
            this._image.crossOrigin = this._crossOrigin;
            this._image.onload = this._handleLoad.bind(this);
            this._image.onerror = this._handleError.bind(this);
            this._image.src = options.url;

        }, this.timeoutTime);
    }

    abort ()
    {
        clearTimeout(this.timeout);

        // FIXME
        // People on the Internet say that doing this {{should/should not}} abort the request. I believe
        // it corresponds to what the WHATWG HTML spec says should happen when the UA
        // updates the image data if selected source is null.
        //
        // Sources:
        //
        // https://html.spec.whatwg.org/multipage/embedded-content.html#the-img-element
        // http://stackoverflow.com/questions/7390888/does-changing-the-src-attribute-of-an-image-stop-the-image-from-downloading
        if (this._image)
        {
            this._image.onload = this._image.onerror = null;

            this._image.src = '';
        }

        this._aborted = true;
    }

    _handleLoad ()
    {
        if (this._aborted)
        {
            console.error('ImageRequestHandler invoked on cancelled request for ' + this._url);
            return;
        }

        if (this._complete)
        {
            console.error('ImageRequestHandler invoked on completed request for ' + this._url);
            return;
        }

        this._complete = true;

        this._callback(this._image);
    }

    _handleError ()
    {
        this._errorCallback(this._image);
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/interpolate-animation.js":
/*!*****************************************************************!*\
  !*** ./node_modules/diva.js/source/js/interpolate-animation.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// TODO: requestAnimationFrame fallback

/* harmony default export */ __webpack_exports__["default"] = ({
    animate,
    easing: {
        linear: linearEasing,
        cubic: inOutCubicEasing
    }
});

let now;

if (typeof performance !== 'undefined' && performance.now)
{
    now = () => { return performance.now(); };
}
else
{
    now = () => { return Date.now(); };
}


function animate (options)
{
    const durationMs = options.duration;
    const parameters = options.parameters;
    const onUpdate = options.onUpdate;
    const onEnd = options.onEnd;

    // Setup
    // Times are in milliseconds from a basically arbitrary start
    const start = now();
    const end = start + durationMs;

    const tweenFns = {};
    const values = {};
    const paramKeys = Object.keys(parameters);

    paramKeys.forEach(key => {
        const config = parameters[key];
        tweenFns[key] = interpolate(config.from, config.to, config.easing || inOutCubicEasing);
    });

    // Run it!
    let requestId = requestAnimationFrame(update);

    return {
        cancel()
        {
            if (requestId !== null)
            {
                cancelAnimationFrame(requestId);
                handleAnimationCompletion({
                    interrupted: true
                });
            }
        }
    };

    function update()
    {
        const current = now();
        const elapsed = Math.min((current - start) / durationMs, 1);

        updateValues(elapsed);
        onUpdate(values);

        if (current < end)
        {
            requestId = requestAnimationFrame(update);
        }
        else
        {
            handleAnimationCompletion({
                interrupted: false
            });
        }
    }

    function updateValues(elapsed)
    {
        paramKeys.forEach(key => {
            values[key] = tweenFns[key](elapsed);
        });
    }

    function handleAnimationCompletion(info)
    {
        requestId = null;

        if (onEnd)
            onEnd(info);
    }
}

function interpolate(start, end, easing)
{
    return (elapsed) => { return start + (end - start) * easing(elapsed); };
}

/**
 * Easing functions. inOutCubicEasing is the default, but
 * others are given for convenience.
 *
 **/
function linearEasing(e)
{
    return e;
}

/* jshint ignore:start */
function inOutQuadEasing (e)
{
    return e < .5 ? 2 * e * e : -1+(4-2 * e) * e
}
/* jshint ignore:end */


function inOutCubicEasing (t)
{
    return t < 0.5 ? 4 * t * t * t : ( t - 1 ) * ( 2 * t - 2 ) * ( 2 * t - 2 ) + 1;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-layouts/book-layout.js":
/*!********************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-layouts/book-layout.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getBookLayoutGroups; });
/* harmony import */ var _page_dimensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./page-dimensions */ "./node_modules/diva.js/source/js/page-layouts/page-dimensions.js");


function getBookLayoutGroups (viewerConfig)
{
    const groupings = getGroupings(viewerConfig);

    return groupings.map(grouping => getGroupLayoutsFromPageGrouping(viewerConfig, grouping));
}

function getGroupings(viewerConfig)
{
    const manifest = viewerConfig.manifest;

    const pagesByGroup = [];
    let leftPage = null;
    let nonPagedPages = []; // Pages to display below the current group

    const _addNonPagedPages = () =>
    {
        for (let i = 0, nlen = nonPagedPages.length; i < nlen; i++)
        {
            pagesByGroup.push([ nonPagedPages[i] ]);
        }
        nonPagedPages = [];
    };

    manifest.pages.forEach( (page, index) =>
    {
        const pageRecord = {
            index: index,
            dimensions: Object(_page_dimensions__WEBPACK_IMPORTED_MODULE_0__["default"])(index, manifest),
            paged: (!manifest.paged || page.paged)
        };

        // Only display non-paged pages if specified in the settings
        if (!viewerConfig.showNonPagedPages && !pageRecord.paged)
            return;

        if (!pageRecord.paged)
        {
            nonPagedPages.push(pageRecord);
        }
        else if (index === 0 || page.facingPages)
        {
            // The first page is placed on its own
            pagesByGroup.push([pageRecord]);
            _addNonPagedPages();
        }
        else if (leftPage === null)
        {
            leftPage = pageRecord;
        }
        else
        {
            pagesByGroup.push([leftPage, pageRecord]);
            leftPage = null;
            _addNonPagedPages();
        }
    });

    // Flush a final left page
    if (leftPage !== null)
    {
        pagesByGroup.push([leftPage]);
        _addNonPagedPages();
    }

    return pagesByGroup;
}

function getGroupLayoutsFromPageGrouping(viewerConfig, grouping)
{
    const verticallyOriented = viewerConfig.verticallyOriented;

    if (grouping.length === 2)
        return getFacingPageGroup(grouping[0], grouping[1], verticallyOriented);

    const page = grouping[0];
    const pageDims = page.dimensions;

    // The first page is placed on its own to the right in vertical orientation.
    // NB that this needs to be the page with index 0; if the first page is excluded
    // from the layout then this special case shouldn't apply.
    // If the page is tagged as 'non-paged', center it horizontally
    let leftOffset;
    if (page.paged)
        leftOffset = (page.index === 0 && verticallyOriented) ? pageDims.width : 0;
    else
        leftOffset = (verticallyOriented) ? pageDims.width / 2 : 0;

    const shouldBeHorizontallyAdjusted =
        verticallyOriented && !viewerConfig.manifest.pages[page.index].facingPages;

    // We need to left-align the page in vertical orientation, so we double
    // the group width
    return {
        dimensions: {
            height: pageDims.height,
            width: shouldBeHorizontallyAdjusted ? pageDims.width * 2 : pageDims.width
        },
        pages: [{
            index: page.index,
            groupOffset: {
                top: 0,
                left: leftOffset
            },
            dimensions: pageDims
        }]
    };
}

function getFacingPageGroup(leftPage, rightPage, verticallyOriented)
{
    const leftDims = leftPage.dimensions;
    const rightDims = rightPage.dimensions;

    const height = Math.max(leftDims.height, rightDims.height);

    let width, firstLeftOffset, secondLeftOffset;

    if (verticallyOriented)
    {
        const midWidth = Math.max(leftDims.width, rightDims.width);

        width = midWidth * 2;

        firstLeftOffset = midWidth - leftDims.width;
        secondLeftOffset = midWidth;
    }
    else
    {
        width = leftDims.width + rightDims.width;
        firstLeftOffset = 0;
        secondLeftOffset = leftDims.width;
    }

    return {
        dimensions: {
            height: height,
            width: width
        },
        pages: [
            {
                index: leftPage.index,
                dimensions: leftDims,
                groupOffset: {
                    top: 0,
                    left: firstLeftOffset
                }
            },
            {
                index: rightPage.index,
                dimensions: rightDims,
                groupOffset: {
                    top: 0,
                    left: secondLeftOffset
                }
            }
        ]
    };
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-layouts/grid-layout.js":
/*!********************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-layouts/grid-layout.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getGridLayoutGroups; });

function getGridLayoutGroups (viewerConfig)
{
    const viewportWidth = viewerConfig.viewport.width;
    const manifest = viewerConfig.manifest;
    const pagesPerRow = viewerConfig.pagesPerRow;
    const fixedHeightGrid = viewerConfig.fixedHeightGrid;
    const fixedPadding = viewerConfig.fixedPadding;
    const showNonPagedPages = viewerConfig.showNonPagedPages;

    const horizontalPadding = fixedPadding * (pagesPerRow + 1);
    const pageWidth = (viewportWidth - horizontalPadding) / pagesPerRow;
    const gridPageWidth = pageWidth;

    // Calculate the row height depending on whether we want to fix the width or the height
    const rowHeight = (fixedHeightGrid) ? fixedPadding + manifest.minRatio * pageWidth : fixedPadding + manifest.maxRatio * pageWidth;

    const groups = [];
    let currentPages = [];

    const getGridPageDimensions = pageData =>
    {
        // Calculate the width, height and horizontal placement of this page
        // Get dimensions at max zoom level, although any level should be fine
        const pageDimenData = pageData.d[pageData.d.length - 1];
        const heightToWidthRatio = pageDimenData.h / pageDimenData.w;

        let pageWidth, pageHeight;

        if (fixedHeightGrid)
        {
            pageWidth = (rowHeight - fixedPadding) / heightToWidthRatio;
            pageHeight = rowHeight - fixedPadding;
        }
        else
        {
            pageWidth = gridPageWidth;
            pageHeight = pageWidth * heightToWidthRatio;
        }

        return {
            width: Math.round(pageWidth),
            height: Math.round(pageHeight)
        };
    };

    const rowDimensions = {
        height: rowHeight,
        width: viewportWidth
    };

    manifest.pages.forEach( (page, pageIndex) =>
    {
        if (!showNonPagedPages && manifest.paged && !page.paged)
            return;

        // Calculate the width, height and horizontal placement of this page
        const pageDimens = getGridPageDimensions(page);
        let leftOffset = Math.floor(currentPages.length * (fixedPadding + gridPageWidth) + fixedPadding);

        // Center the page if the height is fixed (otherwise, there is no horizontal padding)
        if (fixedHeightGrid)
        {
            leftOffset += (gridPageWidth - pageDimens.width) / 2;
        }

        // TODO: Precompute page dimensions everywhere
        currentPages.push({
            index: pageIndex,
            dimensions: pageDimens,
            groupOffset: {
                top: 0,
                left: leftOffset
            }
        });

        if (currentPages.length === pagesPerRow)
        {
            groups.push({
                dimensions: rowDimensions,
                pages: currentPages
            });

            currentPages = [];
        }
    });

    if (currentPages.length > 0)
    {
        groups.push({
            dimensions: rowDimensions,
            pages: currentPages
        });
    }

    return groups;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-layouts/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-layouts/index.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getPageLayouts; });
/* harmony import */ var _book_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./book-layout */ "./node_modules/diva.js/source/js/page-layouts/book-layout.js");
/* harmony import */ var _singles_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./singles-layout */ "./node_modules/diva.js/source/js/page-layouts/singles-layout.js");
/* harmony import */ var _grid_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./grid-layout */ "./node_modules/diva.js/source/js/page-layouts/grid-layout.js");




/** Get the relative positioning of pages for the current view */
function getPageLayouts (settings)
{
    if (settings.inGrid)
    {
        return Object(_grid_layout__WEBPACK_IMPORTED_MODULE_2__["default"])(pluck(settings, [
            'manifest',
            'viewport',
            'pagesPerRow',
            'fixedHeightGrid',
            'fixedPadding',
            'showNonPagedPages'
        ]));
    }
    else
    {
        const config = pluck(settings, ['manifest', 'verticallyOriented', 'showNonPagedPages']);

        if (settings.inBookLayout)
            return Object(_book_layout__WEBPACK_IMPORTED_MODULE_0__["default"])(config);
        else
            return Object(_singles_layout__WEBPACK_IMPORTED_MODULE_1__["default"])(config);
    }
}

function pluck (obj, keys)
{
    const out = {};
    keys.forEach(function (key)
    {
        out[key] = obj[key];
    });
    return out;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-layouts/page-dimensions.js":
/*!************************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-layouts/page-dimensions.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getPageDimensions; });
function getPageDimensions (pageIndex, manifest)
{
    const dims = manifest.getMaxPageDimensions(pageIndex);

    return {
        width: Math.floor(dims.width),
        height: Math.floor(dims.height)
    };
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-layouts/singles-layout.js":
/*!***********************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-layouts/singles-layout.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSinglesLayoutGroups; });
/* harmony import */ var _page_dimensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./page-dimensions */ "./node_modules/diva.js/source/js/page-layouts/page-dimensions.js");


function getSinglesLayoutGroups (viewerConfig)
{
    const manifest = viewerConfig.manifest;

    // Render each page alone in a group
    const pages = [];
    manifest.pages.forEach( (page, index) =>
    {
        if (!viewerConfig.showNonPagedPages && manifest.paged && !page.paged)
            return;

        const pageDims = Object(_page_dimensions__WEBPACK_IMPORTED_MODULE_0__["default"])(index, manifest);

        pages.push({
            dimensions: pageDims,
            pages: [{
                index: index,
                groupOffset: { top: 0, left: 0 },
                dimensions: pageDims
            }]
        });
    });

    return pages;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-overlay-manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-overlay-manager.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PageOverlayManager; });
/**
 * Manages a collection of page overlays, which implement a low-level
 * API for synchronizing HTML pages to the canvas. Each overlay needs
 * to implement the following protocol:
 *
 *   mount(): Called when a page is first rendered
 *   refresh(): Called when a page is moved
 *   unmount(): Called when a previously rendered page has stopped being rendered
 *
 * @class
 */

class PageOverlayManager
{
    constructor ()
    {
        this._pages = {};
        this._renderedPages = [];
        this._renderedPageMap = {};
    }

    addOverlay (overlay)
    {
        const overlaysByPage = this._pages[overlay.page] || (this._pages[overlay.page] = []);

        overlaysByPage.push(overlay);

        if (this._renderedPageMap[overlay.page])
            overlay.mount();
    }

    removeOverlay (overlay)
    {
        const page = overlay.page;
        const overlaysByPage = this._pages[page];

        if (!overlaysByPage)
            return;

        const overlayIndex = overlaysByPage.indexOf(overlay);

        if (overlayIndex === -1)
            return;

        if (this._renderedPageMap[page])
            overlaysByPage[overlayIndex].unmount();

        overlaysByPage.splice(overlayIndex, 1);

        if (overlaysByPage.length === 0)
            delete this._pages[page];
    }

    updateOverlays (renderedPages)
    {
        const previouslyRendered = this._renderedPages;
        const newRenderedMap = {};

        renderedPages.map( (pageIndex) =>
        {
            newRenderedMap[pageIndex] = true;

            if (!this._renderedPageMap[pageIndex])
            {
                this._renderedPageMap[pageIndex] = true;

                this._invokeOnOverlays(pageIndex, overlay =>
                {
                    overlay.mount();
                });
            }
        });

        previouslyRendered.map( (pageIndex) =>
        {
            if (newRenderedMap[pageIndex])
            {
                this._invokeOnOverlays(pageIndex, (overlay) =>
                {
                    overlay.refresh();
                });
            }
            else
            {
                delete this._renderedPageMap[pageIndex];
                this._invokeOnOverlays(pageIndex, overlay =>
                {
                    overlay.unmount();
                });
            }
        });

        this._renderedPages = renderedPages;
    }

    _invokeOnOverlays (pageIndex, func)
    {
        const overlays = this._pages[pageIndex];
        if (overlays)
            overlays.map( (o) => func(o) );
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/page-tools-overlay.js":
/*!**************************************************************!*\
  !*** ./node_modules/diva.js/source/js/page-tools-overlay.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PageToolsOverlay; });
/* harmony import */ var _utils_elt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/elt */ "./node_modules/diva.js/source/js/utils/elt.js");

/**
*
*
**/
class PageToolsOverlay
{
    constructor (pageIndex, viewerCore)
    {
        this.page = pageIndex;

        this._viewerCore = viewerCore;

        this._innerElement = this._viewerCore.getSettings().innerElement;
        this._pageToolsElem = null;
        this.labelWidth = 0;
    }

    mount ()
    {
        if (this._pageToolsElem === null)
        {
            this._buttons = this._initializePageToolButtons();

            this._pageToolsElem = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'diva-page-tools-wrapper' },
                Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'diva-page-tools' }, this._buttons)
            );

            this._pageLabelsElem = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'diva-page-labels-wrapper'},
                Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'diva-page-labels' }, this._viewerCore.settings.manifest.pages[this.page].l)
            );
        }

        this.refresh();
        this._innerElement.appendChild(this._pageToolsElem);
        this._innerElement.appendChild(this._pageLabelsElem);
    }

    _initializePageToolButtons ()
    {
        // Callback parameters
        const settings = this._viewerCore.getSettings();
        const publicInstance = this._viewerCore.getPublicInstance();
        const pageIndex = this.page;

        return this._viewerCore.getPageTools().map( (plugin) =>
        {
            // !!! The node needs to be cloned otherwise it is detached from
            //  one and reattached to the other.
            const button = plugin.pageToolsIcon.cloneNode(true);

            // ensure the plugin instance is handed as the first argument to call;
            // this will set the context (i.e., `this`) of the handleClick call to the plugin instance
            // itself.
            button.addEventListener('click', (event) =>
            {
                plugin.handleClick.call(plugin, event, settings, publicInstance, pageIndex);
            }, false);

            button.addEventListener('touchend', (event) =>
            {
                // Prevent firing of emulated mouse events
                event.preventDefault();

                plugin.handleClick.call(plugin, event, settings, publicInstance, pageIndex);
            }, false);

            return button;

        });
    }

    unmount ()
    {
        this._innerElement.removeChild(this._pageToolsElem);
        this._innerElement.removeChild(this._pageLabelsElem);
    }

    refresh ()
    {
        const pos = this._viewerCore.getPageRegion(this.page, {
            includePadding: true,
            incorporateViewport: true
        });

        // if window is resized larger, a margin is created - need to subtract this from offsets
        let marginLeft = window.getComputedStyle(this._innerElement, null).getPropertyValue('margin-left');

        this._pageToolsElem.style.top = `${pos.top}px`;
        this._pageToolsElem.style.left = `${pos.left - parseInt(marginLeft)}px`;

        this._pageLabelsElem.style.top = `${pos.top}px`;
        this._pageLabelsElem.style.left = `${pos.right - parseInt(marginLeft) - this.labelWidth - 5}px`;
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/parse-iiif-manifest.js":
/*!***************************************************************!*\
  !*** ./node_modules/diva.js/source/js/parse-iiif-manifest.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parseIIIFManifest; });
/* harmony import */ var _utils_parse_label_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/parse-label-value */ "./node_modules/diva.js/source/js/utils/parse-label-value.js");


const getMaxZoomLevel = (width, height) =>
{
    const largestDimension = Math.max(width, height);
    if (largestDimension < 128) 
        return 0;
    return Math.ceil(Math.log((largestDimension + 1) / (256 + 1)) / Math.log(2));
};

const incorporateZoom = (imageDimension, zoomDifference) => imageDimension / (Math.pow(2, zoomDifference));

const getOtherImageData = (otherImages, lowestMaxZoom) =>
{
    return otherImages.map( (itm) =>
    {
        const w = itm.width;
        const h = itm.height;
        const info = parseImageInfo(itm);
        const url = info.url.slice(-1) !== '/' ? info.url + '/' : info.url;  // append trailing slash to url if it's not there.

        const dims = new Array(lowestMaxZoom + 1);
        for (let j = 0; j < lowestMaxZoom + 1; j++)
        {
            dims[j] = {
                h: Math.floor(incorporateZoom(h, lowestMaxZoom - j)),
                w: Math.floor(incorporateZoom(w, lowestMaxZoom - j))
            };
        }

        return {
            f: info.url,
            url: url,
            il: itm.label || "",
            d: dims
        };
    });
};

const getIIIFPresentationVersion = (context) =>
{
    if (context === "http://iiif.io/api/presentation/2/context.json")
        return 2;
    else if (Array.isArray(context) && context.includes("http://iiif.io/api/presentation/2/context.json"))
        return 2;
    else if (Array.isArray(context) && context.includes("http://iiif.io/api/presentation/3/context.json"))
        return 3;
    else
        return 2; // Assume a v2 manifest.
};

/**
 * Parses an IIIF Presentation API Manifest and converts it into a Diva.js-format object
 * (See https://github.com/DDMAL/diva.js/wiki/Development-notes#data-received-through-ajax-request)
 *
 * @param {Object} manifest - an object that represents a valid IIIF manifest
 * @returns {Object} divaServiceBlock - the data needed by Diva to show a view of a single document
 */
function parseIIIFManifest (manifest)
{
    let ctx = manifest["@context"];

    if (!ctx)
    {
        console.error("Invalid IIIF Manifest; No @context found.");
        return null;
    }

    const version = getIIIFPresentationVersion(ctx);
    const sequence = manifest.sequences ? manifest.sequences[0] : null;
    const canvases = sequence ? sequence.canvases : manifest.items;
    const numCanvases = canvases.length;

    const pages = new Array(canvases.length);

    let thisCanvas, 
        thisResource, 
        thisImage,
        secondaryImages,
        otherImages = [],
        context, 
        url, 
        info, 
        imageAPIVersion, 
        width, 
        height, 
        maxZoom, 
        canvas, 
        label, 
        imageLabel, 
        zoomDimensions, 
        widthAtCurrentZoomLevel, 
        heightAtCurrentZoomLevel;

    let lowestMaxZoom = 100;
    let maxRatio = 0;
    let minRatio = 100;

    // quickly determine the lowest possible max zoom level (i.e., the upper bound for images) across all canvases.
    // while we're here, compute the global ratios as well.
    for (let z = 0; z < numCanvases; z++)
    {
        const c = canvases[z];
        const w = c.width;
        const h = c.height;
        const mz = getMaxZoomLevel(w, h);
        const ratio = h / w;
        maxRatio = Math.max(ratio, maxRatio);
        minRatio = Math.min(ratio, minRatio);

        lowestMaxZoom = Math.min(lowestMaxZoom, mz);
    }

    /*
        These arrays need to be pre-initialized since we will do arithmetic and value checking on them
    */
    const totalWidths = new Array(lowestMaxZoom + 1).fill(0);
    const totalHeights = new Array(lowestMaxZoom + 1).fill(0);
    const maxWidths = new Array(lowestMaxZoom + 1).fill(0);
    const maxHeights = new Array(lowestMaxZoom + 1).fill(0);

    for (let i = 0; i < numCanvases; i++)
    {
        thisCanvas = canvases[i];
        canvas = thisCanvas['@id'] || thisCanvas.id;
        label = thisCanvas.label;
        thisResource = thisCanvas.images ? thisCanvas.images[0].resource : thisCanvas.items[0].items[0].body;

        /*
         * If a canvas has multiple images it will be encoded
         * with a resource type of "oa:Choice" (v2) or "Choice" (v3).
         **/
        otherImages = []; // reset array
        if (thisResource['@type'] === "oa:Choice" || thisResource.type === "Choice")
        {
            thisImage = thisResource.default || thisResource.items[0];
            secondaryImages = thisResource.item || thisResource.items.slice(1);
            otherImages = getOtherImageData(secondaryImages, lowestMaxZoom);
        }
        else
        {
            thisImage = thisResource;
        }

        // Prioritize the canvas height / width first, since images may not have h/w
        width = thisCanvas.width || thisImage.width;
        height = thisCanvas.height || thisImage.height;

        if (width <= 0 || height <= 0)
        {
            console.warn('Invalid width or height for canvas ' + label + '. Skipping');
            continue;
        }

        maxZoom = getMaxZoomLevel(width, height);

        imageLabel = thisImage.label || null;

        info = parseImageInfo(thisImage);
        url = info.url.slice(-1) !== '/' ? info.url + '/' : info.url;  // append trailing slash to url if it's not there.

        context = thisImage.service['@context'] || thisImage.service.type;

        if (context === 'http://iiif.io/api/image/2/context.json' || context === "ImageService2")
        {
            imageAPIVersion = 2;
        }
        else if (context === 'http://library.stanford.edu/iiif/image-api/1.1/context.json')
        {
            imageAPIVersion = 1.1;
        }
        else
        {
            imageAPIVersion = 1.0;
        }

        zoomDimensions = new Array(lowestMaxZoom + 1);

        for (let k = 0; k < lowestMaxZoom + 1; k++)
        {
            widthAtCurrentZoomLevel = Math.floor(incorporateZoom(width, lowestMaxZoom - k));
            heightAtCurrentZoomLevel = Math.floor(incorporateZoom(height, lowestMaxZoom - k));
            zoomDimensions[k] = {
                h: heightAtCurrentZoomLevel,
                w: widthAtCurrentZoomLevel
            };

            totalWidths[k] += widthAtCurrentZoomLevel;
            totalHeights[k] += heightAtCurrentZoomLevel;
            maxWidths[k] = Math.max(widthAtCurrentZoomLevel, maxWidths[k]);
            maxHeights[k] = Math.max(heightAtCurrentZoomLevel, maxHeights[k]);
        }

        let isPaged = thisCanvas.viewingHint !== 'non-paged' || (thisCanvas.behavior ? thisCanvas.behavior[0] !== 'non-paged' : false);
        let isFacing = thisCanvas.viewingHint === 'facing-pages' || (thisCanvas.behavior ? thisCanvas.behavior[0] === 'facing-pages' : false);

        pages[i] = {
            d: zoomDimensions,
            m: maxZoom,
            l: label,         // canvas label ('page 1, page 2', etc.)
            il: imageLabel,   // default image label ('primary image', 'UV light', etc.)
            f: info.url,
            url: url,
            api: imageAPIVersion,
            paged: isPaged,
            facingPages: isFacing,
            canvas: canvas,
            otherImages: otherImages,
            xoffset: info.x || null,
            yoffset: info.y || null
        };
    }

    const averageWidths = new Array(lowestMaxZoom + 1);
    const averageHeights = new Array(lowestMaxZoom + 1);

    for (let a = 0; a < lowestMaxZoom + 1; a++)
    {
        averageWidths[a] = totalWidths[a] / numCanvases;
        averageHeights[a] = totalHeights[a] / numCanvases;
    }

    const dims = {
        a_wid: averageWidths,
        a_hei: averageHeights,
        max_w: maxWidths,
        max_h: maxHeights,
        max_ratio: maxRatio,
        min_ratio: minRatio,
        t_hei: totalHeights,
        t_wid: totalWidths
    };

    // assumes paged is false for non-paged values
    return {
        version: version,
        item_title: Object(_utils_parse_label_value__WEBPACK_IMPORTED_MODULE_0__["default"])(manifest).label,
        metadata: manifest.metadata || null,
        dims: dims,
        max_zoom: lowestMaxZoom,
        pgs: pages,
        paged: manifest.viewingHint === 'paged' || (manifest.behaviour ? manifest.behaviour[0] === 'paged' : false) || (sequence ? sequence.viewingHint === 'paged' : false)
    };
}

/**
 * Takes in a resource block from a canvas and outputs the following information associated with that resource:
 * - Image URL
 * - Image region to be displayed
 *
 * @param {Object} resource - an object representing the resource block of a canvas section in a IIIF manifest
 * @returns {Object} imageInfo - an object containing image URL and region
 */
function parseImageInfo (resource)
{
    let url = resource['@id'] || resource.id;
    const fragmentRegex = /#xywh=([0-9]+,[0-9]+,[0-9]+,[0-9]+)/;
    let xywh = '';
    let stripURL = true;

    if (/\/([0-9]+,[0-9]+,[0-9]+,[0-9]+)\//.test(url))
    {
        // if resource in image API format, extract region x,y,w,h from URL (after 4th slash from last)
        // matches coordinates in URLs of the form http://www.example.org/iiif/book1-page1/40,50,1200,1800/full/0/default.jpg
        const urlArray = url.split('/');
        xywh = urlArray[urlArray.length - 4];
    }
    else if (fragmentRegex.test(url))
    {
        // matches coordinates of the style http://www.example.org/iiif/book1/canvas/p1#xywh=50,50,320,240
        const result = fragmentRegex.exec(url);
        xywh = result[1];
    }
    else if (resource.service && (resource.service['@id'] || resource.service.id))
    {
        // this URL excludes region parameters so we don't need to remove them
        url = resource.service['@id'] || resource.service.id;
        stripURL = false;
    }

    if (stripURL)
    {
        // extract URL up to identifier (we eliminate the last 5 parameters: /region/size/rotation/quality.format)
        url = url.split('/').slice(0, -4).join('/');
    }

    const imageInfo = {
        url: url
    };

    if (xywh.length)
    {
        // parse into separate components
        const dimensions = xywh.split(',');
        imageInfo.x = parseInt(dimensions[0], 10);
        imageInfo.y = parseInt(dimensions[1], 10);
        imageInfo.w = parseInt(dimensions[2], 10);
        imageInfo.h = parseInt(dimensions[3], 10);
    }

    return imageInfo;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/renderer.js":
/*!****************************************************!*\
  !*** ./node_modules/diva.js/source/js/renderer.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Renderer; });
/* harmony import */ var _utils_elt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/elt */ "./node_modules/diva.js/source/js/utils/elt.js");
/* harmony import */ var _composite_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./composite-image */ "./node_modules/diva.js/source/js/composite-image.js");
/* harmony import */ var _document_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./document-layout */ "./node_modules/diva.js/source/js/document-layout.js");
/* harmony import */ var _image_cache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./image-cache */ "./node_modules/diva.js/source/js/image-cache.js");
/* harmony import */ var _image_request_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./image-request-handler */ "./node_modules/diva.js/source/js/image-request-handler.js");
/* harmony import */ var _interpolate_animation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interpolate-animation */ "./node_modules/diva.js/source/js/interpolate-animation.js");







const REQUEST_DEBOUNCE_INTERVAL = 250;

class Renderer
{
    constructor (options, hooks)
    {
        this._viewport = options.viewport;
        this._outerElement = options.outerElement;
        this._documentElement = options.innerElement;
        this._settings = options.settings;

        this._hooks = hooks || {};

        this._canvas = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('canvas', { class: 'diva-viewer-canvas' });
        this._ctx = this._canvas.getContext('2d');

        this.layout = null;

        this._sourceResolver = null;
        this._renderedPages = null;
        this._config = null;
        this._zoomLevel = null;
        this._compositeImages = null;
        this._renderedTiles = null;
        this._animation = null;

        // FIXME(wabain): What level should this be maintained at?
        // Diva global?
        this._cache = new _image_cache__WEBPACK_IMPORTED_MODULE_3__["default"]();
        this._pendingRequests = {};
    }

    static getCompatibilityErrors ()
    {
        if (typeof HTMLCanvasElement !== 'undefined')
        {
            return null;
        }

        return [
            'Your browser lacks support for the ', Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('pre', 'canvas'),
            ' element. Please upgrade your browser.'
        ];
    }

    load (config, viewportPosition, sourceResolver)
    {
        this._clearAnimation();

        if (this._hooks.onViewWillLoad)
        {
            this._hooks.onViewWillLoad();
        }

        this._sourceResolver = sourceResolver;
        this._config = config;
        this._compositeImages = {};
        this._setLayoutToZoomLevel(viewportPosition.zoomLevel);

        // FIXME(wabain): Remove this when there's more confidence the check shouldn't be needed
        if (!this.layout.getPageInfo(viewportPosition.anchorPage))
        {
            throw new Error('invalid page: ' + viewportPosition.anchorPage);
        }

        if (this._canvas.width !== this._viewport.width || this._canvas.height !== this._viewport.height)
        {
            this._canvas.width = this._viewport.width;
            this._canvas.height = this._viewport.height;
        }

        // FIXME: What hooks should be called here?
        this.goto(viewportPosition.anchorPage, viewportPosition.verticalOffset, viewportPosition.horizontalOffset);

        if (this._canvas.parentNode !== this._outerElement)
        {
            this._outerElement.insertBefore(this._canvas, this._outerElement.firstChild);
        }

        if (this._hooks.onViewDidLoad)
        {
            this._hooks.onViewDidLoad();
        }
    }

    _setViewportPosition (viewportPosition)
    {
        if (viewportPosition.zoomLevel !== this._zoomLevel)
        {
            if (this._zoomLevel === null)
            {
                throw new TypeError('The current view is not zoomable');
            }
            else if (viewportPosition.zoomLevel === null)
            {
                throw new TypeError('The current view requires a zoom level');
            }

            this._setLayoutToZoomLevel(viewportPosition.zoomLevel);
        }

        this._goto(viewportPosition.anchorPage, viewportPosition.verticalOffset, viewportPosition.horizontalOffset);
    }

    _setLayoutToZoomLevel (zoomLevel)
    {
        this.layout = new _document_layout__WEBPACK_IMPORTED_MODULE_2__["default"](this._config, zoomLevel);
        this._zoomLevel = zoomLevel;

        Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["setAttributes"])(this._documentElement, {
            style: {
                height: this.layout.dimensions.height + 'px',
                width: this.layout.dimensions.width + 'px'
            }
        });

        this._viewport.setInnerDimensions(this.layout.dimensions);
    }

    adjust ()
    {
        this._clearAnimation();

        this._render();

        if (this._hooks.onViewDidUpdate)
        {
            this._hooks.onViewDidUpdate(this._renderedPages.slice(), null);
        }
    }

    _render ()
    {
        const newRenderedPages = [];
        this.layout.pageGroups.forEach((group) =>
        {
            if (!this._viewport.intersectsRegion(group.region))
            {
                return;
            }

            const visiblePages = group.pages
                .filter(function (page)
                {
                    return this.isPageVisible(page.index);
                }, this)
                .map(page => page.index);

            newRenderedPages.push.apply(newRenderedPages, visiblePages);
        }, this);

        this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
        this._paintOutline(newRenderedPages);

        newRenderedPages.forEach((pageIndex) =>
        {
            if (!this._compositeImages[pageIndex])
            {
                const page = this.layout.getPageInfo(pageIndex);
                const zoomLevels = this._sourceResolver.getAllZoomLevelsForPage(page);
                const composite = new _composite_image__WEBPACK_IMPORTED_MODULE_1__["default"](zoomLevels);
                composite.updateFromCache(this._cache);
                this._compositeImages[pageIndex] = composite;
            }
        }, this);

        this._initiateTileRequests(newRenderedPages);

        const changes = findChanges(this._renderedPages || [], newRenderedPages);

        changes.removed.forEach((pageIndex) =>
        {
            delete this._compositeImages[pageIndex];
        }, this);

        this._renderedPages = newRenderedPages;
        this._paint();

        if (this._hooks.onPageWillLoad)
        {
            changes.added.forEach((pageIndex) =>
            {
                this._hooks.onPageWillLoad(pageIndex);
            }, this);
        }
    }

    _paint ()
    {
        const renderedTiles = [];

        this._renderedPages.forEach( (pageIndex) =>
        {
            this._compositeImages[pageIndex].getTiles(this._zoomLevel).forEach((source) =>
            {
                const scaled = getScaledTileRecord(source, this._zoomLevel);

                if (this._isTileVisible(pageIndex, scaled))
                {
                    renderedTiles.push(source.url);
                    this._drawTile(pageIndex, scaled, this._cache.get(source.url));
                }
            });
        });

        const cache = this._cache;

        const changes = findChanges(this._renderedTiles || [], renderedTiles);

        changes.added.forEach(url =>
        {
            cache.acquire(url);
        });

        changes.removed.forEach(url =>
        {
            cache.release(url);
        });

        if (changes.removed)
        {
            // FIXME: Should only need to update the composite images
            // for which tiles were removed
            this._renderedPages.forEach((pageIndex) =>
            {
                this._compositeImages[pageIndex].updateFromCache(this._cache);
            }, this);
        }

        this._renderedTiles = renderedTiles;
    }

    // Paint a page outline while the tiles are loading.
    _paintOutline (pages)
    {
        pages.forEach( (pageIndex) =>
        {
            let pageInfo = this.layout.getPageInfo(pageIndex);
            let pageOffset = this._getImageOffset(pageIndex);

            // Ensure the document is drawn to the center of the viewport
            let viewportPaddingX = Math.max(0, (this._viewport.width - this.layout.dimensions.width) / 2);
            let viewportPaddingY = Math.max(0, (this._viewport.height - this.layout.dimensions.height) / 2);

            let viewportOffsetX = pageOffset.left - this._viewport.left + viewportPaddingX;
            let viewportOffsetY = pageOffset.top - this._viewport.top + viewportPaddingY;

            let destXOffset = viewportOffsetX < 0 ? -viewportOffsetX : 0;
            let destYOffset = viewportOffsetY < 0 ? -viewportOffsetY : 0;

            let canvasX = Math.max(0, viewportOffsetX);
            let canvasY = Math.max(0, viewportOffsetY);

            let destWidth = pageInfo.dimensions.width - destXOffset;
            let destHeight = pageInfo.dimensions.height - destYOffset;

            this._ctx.strokeStyle = '#AAA';
            // In order to get a 1px wide line using strokes, we need to start at a 'half pixel'
            this._ctx.strokeRect(canvasX + 0.5, canvasY + 0.5, destWidth, destHeight);
        });
    }

    // This method should be sent all visible pages at once because it will initiate
    // all image requests and cancel any remaining image requests. In the case that
    // a request is ongoing and the tile is still visible in the viewport, the old request
    // is kept active instead of restarting it. The image requests are given a timeout
    // before loading in order to debounce them and have a small reaction time
    // to cancel them and avoid useless requests.
    _initiateTileRequests (pages)
    {
        // Only requests in this object are kept alive, since all others are not visible in the viewport
        const newPendingRequests = {};

        // Used later as a closure to initiate the image requests with the right source and pageIndex
        const initiateRequest = (source, pageIndex) =>
        {
            const composite = this._compositeImages[pageIndex];

            newPendingRequests[source.url] = new _image_request_handler__WEBPACK_IMPORTED_MODULE_4__["default"]({
                url: source.url,
                timeoutTime: REQUEST_DEBOUNCE_INTERVAL,
                settings: this._settings,
                load: img =>
                {
                    delete this._pendingRequests[source.url];
                    this._cache.put(source.url, img);

                    // Awkward way to check for updates
                    if (composite === this._compositeImages[pageIndex])
                    {
                        composite.updateWithLoadedUrls([source.url]);

                        if (this._isTileForSourceVisible(pageIndex, source))
                        {
                            this._paint();
                        }
                    }
                    else
                    {
                        if (this._isTileForSourceVisible(pageIndex, source))
                            this._paint();
                    }
                },
                error: () =>
                {
                    // TODO: Could make a limited number of retries, etc.
                    delete this._pendingRequests[source.url];
                }
            });
        };

        for (let i = 0; i < pages.length; i++)
        {
            const pageIndex = pages[i];
            const tiles = this._sourceResolver.getBestZoomLevelForPage(this.layout.getPageInfo(pageIndex)).tiles;

            for (let j = 0; j < tiles.length; j++)
            {
                const source = tiles[j];
                if (this._cache.has(source.url) || !this._isTileForSourceVisible(pageIndex, source))
                {
                    continue;
                }

                // Don't create a new request if the tile is already being loaded
                if (this._pendingRequests[source.url])
                {
                    newPendingRequests[source.url] = this._pendingRequests[source.url];
                    delete this._pendingRequests[source.url];
                    continue;
                }

                // Use a closure since the load and error methods are going to be called later and
                // we need to keep the right reference to the source and the page index
                initiateRequest(source, pageIndex);
            }
        }

        for (const url in this._pendingRequests)
        {
            this._pendingRequests[url].abort();
        }
        this._pendingRequests = newPendingRequests;
    }

    _drawTile (pageIndex, scaledTile, img)
    {
        let tileOffset = this._getTileToDocumentOffset(pageIndex, scaledTile);

        // Ensure the document is drawn to the center of the viewport
        let viewportPaddingX = Math.max(0, (this._viewport.width - this.layout.dimensions.width) / 2);
        let viewportPaddingY = Math.max(0, (this._viewport.height - this.layout.dimensions.height) / 2);

        let viewportOffsetX = tileOffset.left - this._viewport.left + viewportPaddingX;
        let viewportOffsetY = tileOffset.top - this._viewport.top + viewportPaddingY;

        let destXOffset = viewportOffsetX < 0 ? -viewportOffsetX : 0;
        let destYOffset = viewportOffsetY < 0 ? -viewportOffsetY : 0;

        let canvasX = Math.max(0, viewportOffsetX);
        let canvasY = Math.max(0, viewportOffsetY);

        let sourceXOffset = destXOffset / scaledTile.scaleRatio;
        let sourceYOffset = destYOffset / scaledTile.scaleRatio;

        // Ensure that the specified dimensions are no greater than the actual
        // size of the image. Safari won't display the tile if they are.
        let destImgWidth = Math.min(scaledTile.dimensions.width, img.width * scaledTile.scaleRatio) - destXOffset;
        let destImgHeight = Math.min(scaledTile.dimensions.height, img.height * scaledTile.scaleRatio) - destYOffset;

        let destWidth = Math.max(1, Math.round(destImgWidth));
        let destHeight = Math.max(1, Math.round(destImgHeight));

        let sourceWidth = destWidth / scaledTile.scaleRatio;
        let sourceHeight = destHeight / scaledTile.scaleRatio;

        this._ctx.drawImage(
            img,
            sourceXOffset, sourceYOffset,
            sourceWidth, sourceHeight,
            canvasX, canvasY,
            destWidth, destHeight);
    }

    _isTileForSourceVisible (pageIndex, tileSource)
    {
        return this._isTileVisible(pageIndex, getScaledTileRecord(tileSource, this._zoomLevel));
    }

    _isTileVisible (pageIndex, scaledTile)
    {
        const tileOffset = this._getTileToDocumentOffset(pageIndex, scaledTile);

        // FIXME(wabain): This check is insufficient during a zoom transition
        return this._viewport.intersectsRegion({
            top: tileOffset.top,
            bottom: tileOffset.top + scaledTile.dimensions.height,
            left: tileOffset.left,
            right: tileOffset.left + scaledTile.dimensions.width
        });
    }

    _getTileToDocumentOffset (pageIndex, scaledTile)
    {
        const imageOffset = this._getImageOffset(pageIndex);

        return {
            top: imageOffset.top + scaledTile.offset.top,
            left: imageOffset.left + scaledTile.offset.left
        };
    }

    _getImageOffset (pageIndex)
    {
        return this.layout.getPageOffset(pageIndex, {includePadding: true});
    }

    // TODO: Update signature
    goto (pageIndex, verticalOffset, horizontalOffset)
    {
        this._clearAnimation();
        this._goto(pageIndex, verticalOffset, horizontalOffset);

        if (this._hooks.onViewDidUpdate)
        {
            this._hooks.onViewDidUpdate(this._renderedPages.slice(), pageIndex);
        }
    }

    _goto (pageIndex, verticalOffset, horizontalOffset)
    {
        // FIXME(wabain): Move this logic to the viewer
        const pageOffset = this.layout.getPageOffset(pageIndex);

        const desiredVerticalCenter = pageOffset.top + verticalOffset;
        const top = desiredVerticalCenter - Math.round(this._viewport.height / 2);

        const desiredHorizontalCenter = pageOffset.left + horizontalOffset;
        const left = desiredHorizontalCenter - Math.round(this._viewport.width / 2);

        this._viewport.top = top;
        this._viewport.left = left;

        this._render();
    }

    transitionViewportPosition (options)
    {
        this._clearAnimation();

        const getPosition = options.getPosition;
        const onViewDidTransition = this._hooks.onViewDidTransition;

        this._animation = _interpolate_animation__WEBPACK_IMPORTED_MODULE_5__["default"].animate({
            duration: options.duration,
            parameters: options.parameters,
            onUpdate: (values) =>
            {
                this._setViewportPosition(getPosition(values));
                this._hooks.onZoomLevelWillChange(values.zoomLevel);

                if (onViewDidTransition)
                {
                    onViewDidTransition();
                }
            },
            onEnd: (info) =>
            {
                if (options.onEnd)
                {
                    options.onEnd(info);
                }

                if (this._hooks.onViewDidUpdate && !info.interrupted)
                {
                    this._hooks.onViewDidUpdate(this._renderedPages.slice(), null);
                }
            }
        });
    }

    _clearAnimation ()
    {
        if (this._animation)
        {
            this._animation.cancel();
            this._animation = null;
        }
    }

    isPageVisible (pageIndex)
    {
        if (!this.layout)
        {
            return false;
        }

        const page = this.layout.getPageInfo(pageIndex);

        if (!page)
        {
            return false;
        }

        return this._viewport.intersectsRegion(this.layout.getPageRegion(pageIndex));
    }

    getRenderedPages ()
    {
        return this._renderedPages.slice();
    }

    destroy ()
    {
        this._clearAnimation();

        // FIXME(wabain): I don't know if we should actually do this
        Object.keys(this._pendingRequests).forEach((req) =>
        {
            const handler = this._pendingRequests[req];
            delete this._pendingRequests[req];

            handler.abort();
        }, this);

        this._canvas.parentNode.removeChild(this._canvas);
    }
}

function getScaledTileRecord (source, scaleFactor)
{
    let scaleRatio;

    if (scaleFactor === null)
    {
        scaleRatio = 1;
    }
    else
    {
        scaleRatio = Math.pow(2, scaleFactor - source.zoomLevel);
    }

    return {
        sourceZoomLevel: source.zoomLevel,
        scaleRatio: scaleRatio,
        row: source.row,
        col: source.col,
        dimensions: {
            width: source.dimensions.width * scaleRatio,
            height: source.dimensions.height * scaleRatio
        },
        offset: {
            left: source.offset.left * scaleRatio,
            top: source.offset.top * scaleRatio
        },
        url: source.url
    };
}

function findChanges (oldArray, newArray)
{
    if (oldArray === newArray)
    {
        return {
            added: [],
            removed: []
        };
    }

    const removed = oldArray.filter(oldEntry => newArray.indexOf(oldEntry) === -1);

    const added = newArray.filter(newEntry => oldArray.indexOf(newEntry) === -1);

    return {
        added: added,
        removed: removed
    };
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/settings-view.js":
/*!*********************************************************!*\
  !*** ./node_modules/diva.js/source/js/settings-view.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return createSettingsView; });

function createSettingsView(sources)
{
    const obj = {};

    sources.forEach( (source) =>
    {
        registerMixin(obj, source);
    });

    return obj;
}

function registerMixin(obj, mixin)
{
    Object.keys(mixin).forEach( (key) =>
    {
        Object.defineProperty(obj, key, {
            get: () =>
            {
                return mixin[key];
            },
            set: () =>
            {
                // TODO: Make everything strict mode so this isn't needed
                throw new TypeError('Cannot set settings.' + key);
            }
        });
    });
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/tile-coverage-map.js":
/*!*************************************************************!*\
  !*** ./node_modules/diva.js/source/js/tile-coverage-map.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TileCoverageMap; });
class TileCoverageMap
{
    constructor (rows, cols)
    {
        this._rows = rows;
        this._cols = cols;
        this._map = new Array(rows).fill(null).map(() => new Array(cols).fill(false));
    }

    isLoaded (row, col)
    {
        // Return true for out of bounds tiles because they
        // don't need to load. (Unfortunately this will also
        // mask logical errors.)
        if (row >= this._rows || col >= this._cols)
            return true;

        return this._map[row][col];
    }

    set(row, col, value)
    {
        this._map[row][col] = value;
    }
}

/***/ }),

/***/ "./node_modules/diva.js/source/js/toolbar.js":
/*!***************************************************!*\
  !*** ./node_modules/diva.js/source/js/toolbar.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Toolbar; });
/* harmony import */ var _diva_global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diva-global */ "./node_modules/diva.js/source/js/diva-global.js");
/* harmony import */ var _utils_elt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/elt */ "./node_modules/diva.js/source/js/utils/elt.js");



class Toolbar
{
    constructor (viewer)
    {
        this.viewer = viewer;
        this.settings = viewer.settings;
    }

    _elemAttrs (ident, base)
    {
        const attrs = {
            id: this.settings.ID + ident,
            class: 'diva-' + ident
        };

        if (base)
            return Object.assign(attrs, base);
        else
            return attrs;
    }


    /** Convenience function to subscribe to a Diva event */
    _subscribe (event, callback)
    {
        _diva_global__WEBPACK_IMPORTED_MODULE_0__["default"].Events.subscribe(event, callback, this.settings.ID);
    }


    createButton (name, label, callback, icon)
    {
        const button = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('button', {
            type: 'button',
            id: this.settings.ID + name,
            class: 'diva-' + name + ' diva-button',
            title: label,
            'aria-label': label
        });

        if (icon)
            button.appendChild(icon);

        if (callback)
            button.addEventListener('click', callback);

        return button;
    }

    createLabel (name, id, label, innerName, innerValue)
    {
        return Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', { id: this.settings.ID + id, class: name + ' diva-label'},
                    [ label, Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('span', { id: this.settings.ID + innerName }, innerValue)
                    ]);
    }

    createZoomButtons ()
    {
        let zoomOutIcon = this._createZoomOutIcon();
        let zoomInIcon = this._createZoomInIcon();

        let zoomButtons = [
            this.createButton('zoom-out-button', 'Zoom Out', () => {
                this.viewer.setZoomLevel(this.settings.zoomLevel - 1);
            }, zoomOutIcon),
            this.createButton('zoom-in-button', 'Zoom In', () => {
                this.viewer.setZoomLevel(this.settings.zoomLevel + 1);
            }, zoomInIcon),
            this.createLabel('diva-zoom-label', 'zoom-label', 'Zoom level: ', 'zoom-level', this.settings.zoomLevel + 1)
        ];

        let zoomHandler = function ()
        {
            let labelEl = document.getElementById(this.settings.ID + 'zoom-level');
            labelEl.textContent = this.settings.zoomLevel + 1;
        };

        this._subscribe('ZoomLevelDidChange', zoomHandler);
        this._subscribe('ViewerDidLoad', zoomHandler);

        return Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', { id: this.settings.ID + "zoom-controls", style: "display: none"}, zoomButtons);
    }

    createGridControls ()
    {
        let gridMoreIcon = this._createGridMoreIcon();
        let gridFewerIcon = this._createGridFewerIcon();

        let gridButtons = [
            this.createButton('grid-out-button', 'Fewer', () => {
                this.viewer.setGridPagesPerRow(this.settings.pagesPerRow - 1);
            }, gridFewerIcon),
            this.createButton('grid-in-button', 'More', () => {
                this.viewer.setGridPagesPerRow(this.settings.pagesPerRow + 1);
            }, gridMoreIcon),
            this.createLabel('diva-grid-label', 'grid-label', 'Pages per row: ', 'pages-per-row', this.settings.pagesPerRow)
        ];

        let gridChangeHandler = function ()
        {
            let labelEl = document.getElementById(this.settings.ID + 'pages-per-row');
            labelEl.textContent = this.settings.pagesPerRow;
        };

        this._subscribe('GridRowNumberDidChange', gridChangeHandler);

        return Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', {id: this.settings.ID + "grid-controls", style: "display:none" }, gridButtons);
    }

    createPageLabel ()
    {
        // Current page
        const currentPage = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('span', {
            id: this.settings.ID + 'current-page'
        });

        const updateCurrentPage = () =>
        {
            // get labels for index range
            let indices = this.viewer.getCurrentPageIndices();
            let startIndex = indices[0];
            let endIndex = indices[indices.length - 1];
            let startLabel = this.settings.manifest.pages[startIndex].l;
            let endLabel = this.settings.manifest.pages[endIndex].l;

            if (startIndex !== endIndex)
            {
            	if (this.settings.enableIndexAsLabel)
                	currentPage.textContent = startIndex + " - " + endIndex;
            	else
            		currentPage.textContent = startLabel + " - " + endLabel;
            }
            else
        	{
            	if (this.settings.enableIndexAsLabel)
            		currentPage.textContent = startIndex;
            	else
            		currentPage.textContent = startLabel;
        	}
        };

        this._subscribe('VisiblePageDidChange', updateCurrentPage);
        this._subscribe('ViewerDidLoad', updateCurrentPage);
        this._subscribe('ViewDidSwitch', updateCurrentPage);

        return Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('span', {
                class: 'diva-page-label diva-label'
            },
            currentPage
        );
    }

    createGotoPageForm ()
    {
        const gotoPageInput = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('input', {
            id: this.settings.ID + 'goto-page-input',
            class: 'diva-input diva-goto-page-input',
            autocomplete: 'off',
            type: 'text',
            'aria-label': 'Page Input'
        });

        const gotoPageSubmit = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('input', {
            id: this.settings.ID + 'goto-page-submit',
            class: 'diva-button diva-button-text',
            type: 'submit',
            value: 'Go'
        });

        const inputSuggestions = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', {
                id: this.settings.ID + 'input-suggestions',
                class: 'diva-input-suggestions'
            }
        );

        const gotoForm = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('form', {
                id: this.settings.ID + 'goto-page',
                class: 'diva-goto-form'
            },
            gotoPageInput,
            gotoPageSubmit,
            inputSuggestions
        );

        gotoForm.addEventListener('submit', (e) =>
        {
            e.preventDefault();

            const desiredPageLabel = gotoPageInput.value;

            if (this.settings.onGotoSubmit && typeof this.settings.onGotoSubmit === "function")
            {
                const pageIndex = this.settings.onGotoSubmit(desiredPageLabel);
                if (!this.viewer.gotoPageByIndex(pageIndex))
                    window.alert("No page could be found with that label or page number");

            }
            else // Default if no function is specified in the settings
            {
                if (!this.viewer.gotoPageByLabel(desiredPageLabel))
                    window.alert("No page could be found with that label or page number");
            }

            // Hide the suggestions
            inputSuggestions.style.display = 'none';

            // Prevent the default action of reloading the page
            return false;
        });

        ['input', 'focus'].forEach(event =>
        {
            gotoPageInput.addEventListener(event, () => {
                inputSuggestions.innerHTML = ''; // Remove all previous suggestions

                const value = gotoPageInput.value;
                let numSuggestions = 0;
                if (this.settings.enableGotoSuggestions && value)
                {
                    const pages = this.settings.manifest.pages;
                    for (let i = 0, len = pages.length; i < len && numSuggestions < 10; i++)
                    {
                        if (pages[i].l.toLowerCase().indexOf(value.toLowerCase()) > -1)
                        {
                            const newInputSuggestion = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', {
                                    class: 'diva-input-suggestion'
                                },
                                pages[i].l
                            );

                            inputSuggestions.appendChild(newInputSuggestion);

                            numSuggestions++;
                        }
                    }

                    // Show label suggestions
                    if (numSuggestions > 0)
                        inputSuggestions.style.display = 'block';
                }
                else
                    inputSuggestions.style.display = 'none';
            });
        });

        gotoPageInput.addEventListener('keydown', e => {
            let el;
            if (e.keyCode === 13) // 'Enter' key
            {
                const active = document.getElementsByClassName('active')[0];
                if (typeof active !== 'undefined')
                    gotoPageInput.value = active.innerText;
            }
            if (e.keyCode === 38) // Up arrow key
            {
                el = document.getElementsByClassName('active')[0];
                const prevEl = el ? el.previousSibling : undefined;
                if (typeof prevEl !== 'undefined')
                {
                    el.classList.remove('active');
                    if (prevEl !== null)
                        prevEl.classList.add('active');
                }
                else
                {
                    let last = document.getElementsByClassName('diva-input-suggestion').length - 1;
                    document.getElementsByClassName('diva-input-suggestion')[last].classList.add('active');
                }
            }
            else if (e.keyCode === 40) // Down arrow key
            {
                el = document.getElementsByClassName('active')[0];
                const nextEl = el ? el.nextSibling : undefined;
                if (typeof nextEl !== 'undefined')
                {
                    el.classList.remove('active');
                    if (nextEl !== null)
                        nextEl.classList.add('active');
                }
                else
                {
                    document.getElementsByClassName('diva-input-suggestion')[0].classList.add('active');
                }
            }
        });

        onEvent(inputSuggestions, 'mousedown', '.diva-input-suggestion', function ()
        {
            gotoPageInput.value = this.textContent;
            inputSuggestions.style.display = 'none';
            let submitEvent = new Event('submit', {
                cancelable: true
            });
            gotoForm.dispatchEvent(submitEvent);
        });

        // javascript equivalent to jquery .on(event, selector, function)
        function onEvent (elem, evt, sel, handler)
        {
            elem.addEventListener(evt, function (event)
            {
                var t = event.target;
                while (t && t !== this)
                {
                    if (t.matches(sel))
                        handler.call(t, event);
                    t = t.parentNode;
                }
            });
        }

        gotoPageInput.addEventListener('blur', () => {
            // Hide label suggestions
            inputSuggestions.style.display = 'none';
        });

        return gotoForm;
    }

    createViewMenu ()
    {
        const viewOptionsList = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', this._elemAttrs('view-options'));
        const gridViewIcon = this._createGridViewIcon();
        const bookViewIcon = this._createBookViewIcon();
        const pageViewIcon = this._createPageViewIcon();

        const viewOptionsToggle = () =>
        {
            viewOptionsList.style.display = viewOptionsList.style.display === "none" ? "block" : "none";
        };

        const changeViewButton = this.createButton('view-icon', 'Change view', viewOptionsToggle);

        const selectView = (view) =>
        {
            this.viewer.changeView(view);

            //hide view menu
            viewOptionsList.style.display = "none";
        };

        const updateViewMenu = () =>
        {
            const viewIconClasses = ' diva-view-icon diva-button';


            // display the icon of the mode we're currently in (?)
            if (this.settings.inGrid)
            {
                changeViewButton.appendChild(gridViewIcon);
                changeViewButton.className = 'diva-grid-icon' + viewIconClasses;
            }
            else if (this.settings.inBookLayout)
            {
                changeViewButton.appendChild(bookViewIcon);
                changeViewButton.className = 'diva-book-icon' + viewIconClasses;
            }
            else
            {
                changeViewButton.appendChild(pageViewIcon);
                changeViewButton.className = 'diva-document-icon' + viewIconClasses;
            }

            const viewOptions = document.createDocumentFragment();

            // then display document, book, and grid buttons in that order, excluding the current view
            if (this.settings.inGrid || this.settings.inBookLayout)
                viewOptions.appendChild(this.createButton('document-icon', 'Document View', selectView.bind(null, 'document'), pageViewIcon));

            if (this.settings.inGrid || !this.settings.inBookLayout)
                viewOptions.appendChild(this.createButton('book-icon', 'Book View', selectView.bind(null, 'book'), bookViewIcon));

            if (!this.settings.inGrid)
                viewOptions.appendChild(this.createButton('grid-icon', 'Grid View', selectView.bind(null, 'grid'), gridViewIcon));

            // remove old menu
            while (viewOptionsList.firstChild)
            {
                viewOptionsList.removeChild(viewOptionsList.firstChild);
            }

            // insert new menu
            viewOptionsList.appendChild(viewOptions);
        };

        document.addEventListener('mouseup', event =>
        {
            if (viewOptionsList !== event.target)
            {
                viewOptionsList.style.display = 'none';
            }
        });

        this._subscribe('ViewDidSwitch', updateViewMenu);
        this._subscribe('ObjectDidLoad', updateViewMenu);

        return Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', this._elemAttrs('view-menu'),
            changeViewButton,
            viewOptionsList
        );
    }

    createFullscreenButton ()
    {
        let fullscreenIcon = this._createFullscreenIcon();

        return this.createButton('fullscreen-icon', 'Toggle fullscreen mode', () => {
            this.viewer.toggleFullscreenMode();
        }, fullscreenIcon);
    }

    toggleZoomGridControls ()
    {
        if (!this.settings.inGrid)
        {
            document.getElementById(this.settings.ID + "zoom-controls").style.display = "block";
            document.getElementById(this.settings.ID + "grid-controls").style.display = "none";
        }
        else
        {
            document.getElementById(this.settings.ID + "zoom-controls").style.display = "none";
            document.getElementById(this.settings.ID + "grid-controls").style.display = "block";
        }

    }

    render ()
    {
        this._subscribe("ViewDidSwitch", this.toggleZoomGridControls);
        this._subscribe("ObjectDidLoad", this.toggleZoomGridControls);

        let leftTools = [
            this.createZoomButtons(),
            this.createGridControls()
        ];
        let rightTools = [
            this.createPageLabel(),
            this.createViewMenu()
        ];
        if (this.settings.enableFullscreen)
            rightTools.push(this.createFullscreenButton());
        if (this.settings.enableGotoPage)
            rightTools.splice(1, 0, this.createGotoPageForm());

        // assign toolbar plugins to proper side
        let plugins = this.viewer.viewerState.pluginInstances;
        for (let i = 0, len = plugins.length; i < len; i++)
        {
            let plugin = plugins[i];

            if (!plugin.toolbarSide) // not a toolbar tool
                continue;

            plugin.toolbarIcon = plugin.createIcon();
            if (!plugin.toolbarIcon) // icon couldn't be created
                continue;

            // add plugin tools after the go-to-page and page-label tools
            if (plugin.toolbarSide === 'right')
                rightTools.splice(2, 0, plugin.toolbarIcon);
            else if (plugin.toolbarSide === 'left')
                leftTools.splice(2, 0, plugin.toolbarIcon);

            plugin.toolbarIcon.addEventListener('click', handlePluginClick.bind(this, plugin));
        }

        function handlePluginClick (plugin)
        {
            plugin.handleClick(this.viewer);
        }

        const tools = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', this._elemAttrs('tools'),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', this._elemAttrs('tools-left'), leftTools),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_1__["elt"])('div', this._elemAttrs('tools-right'), rightTools)
                );

        this.settings.toolbarParentObject.insertBefore(
            tools,
            this.settings.toolbarParentObject.firstChild
        );
    }

    _createToolbarIcon (paths)
    {
        let icon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        icon.setAttributeNS(null, 'viewBox', "0 0 25 25");
        icon.setAttributeNS(null, 'x', '0px');
        icon.setAttributeNS(null, 'y', '0px');
        icon.setAttributeNS(null, 'style', "enable-background:new 0 0 48 48;");

        let glyph = document.createElementNS("http://www.w3.org/2000/svg", "g");
        glyph.setAttributeNS(null, "transform", "matrix(1, 0, 0, 1, -12, -12)");

        paths.forEach( (path) =>
        {
            let pEl = document.createElementNS("http://www.w3.org/2000/svg", "path");
            pEl.setAttributeNS(null, "d", path);
            glyph.appendChild(pEl);
        });

        icon.appendChild(glyph);
        return icon;
    }

    _createZoomOutIcon ()
    {
        let paths = [
            "M19.5,23c-0.275,0-0.5-0.225-0.5-0.5v-1c0-0.275,0.225-0.5,0.5-0.5h7c0.275,0,0.5,0.225,0.5,0.5v1c0,0.275-0.225,0.5-0.5,0.5H19.5z",
            "M37.219,34.257l-2.213,2.212c-0.202,0.202-0.534,0.202-0.736,0l-6.098-6.099c-1.537,0.993-3.362,1.577-5.323,1.577c-5.431,0-9.849-4.418-9.849-9.849c0-5.431,4.418-9.849,9.849-9.849c5.431,0,9.849,4.418,9.849,9.849c0,1.961-0.584,3.786-1.576,5.323l6.098,6.098C37.422,33.722,37.422,34.054,37.219,34.257z M29.568,22.099c0-3.706-3.014-6.72-6.72-6.72c-3.706,0-6.72,3.014-6.72,6.72c0,3.706,3.014,6.72,6.72,6.72C26.555,28.818,29.568,25.805,29.568,22.099z"
        ];

        return this._createToolbarIcon(paths);
    }

    _createZoomInIcon ()
    {
        let paths = [
            "M37.469,34.257l-2.213,2.212c-0.202,0.202-0.534,0.202-0.736,0l-6.098-6.099c-1.537,0.993-3.362,1.577-5.323,1.577c-5.431,0-9.849-4.418-9.849-9.849c0-5.431,4.418-9.849,9.849-9.849c5.431,0,9.849,4.418,9.849,9.849c0,1.961-0.584,3.786-1.576,5.323l6.098,6.098C37.672,33.722,37.672,34.054,37.469,34.257z M29.818,22.099c0-3.706-3.014-6.72-6.72-6.72c-3.706,0-6.72,3.014-6.72,6.72c0,3.706,3.014,6.72,6.72,6.72C26.805,28.818,29.818,25.805,29.818,22.099z M26.5,21H24v-2.5c0-0.275-0.225-0.5-0.5-0.5h-1c-0.275,0-0.5,0.225-0.5,0.5V21h-2.5c-0.275,0-0.5,0.225-0.5,0.5v1c0,0.275,0.225,0.5,0.5,0.5H22v2.5c0,0.275,0.225,0.5,0.5,0.5h1c0.275,0,0.5-0.225,0.5-0.5V23h2.5c0.275,0,0.5-0.225,0.5-0.5v-1C27,21.225,26.775,21,26.5,21z"
        ];
        return this._createToolbarIcon(paths);
    }

    _createGridMoreIcon ()
    {
        let paths = [
            "M29.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z"
        ];
        return this._createToolbarIcon(paths);
    }

    _createGridFewerIcon ()
    {
        let paths = [
            "M25.5,35c-0.275,0-0.5-0.225-0.5-0.5v-9c0-0.275,0.225-0.5,0.5-0.5h9c0.275,0,0.5,0.225,0.5,0.5v9c0,0.275-0.225,0.5-0.5,0.5H25.5z M22.5,35c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H22.5z M34.5,23c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H34.5z M22.5,23c0.275,0,0.5-0.225,0.5-0.5v-9c0-0.275-0.225-0.5-0.5-0.5h-9c-0.275,0-0.5,0.225-0.5,0.5v9c0,0.275,0.225,0.5,0.5,0.5H22.5z"
        ];
        return this._createToolbarIcon(paths);
    }

    _createGridViewIcon ()
    {
        let paths = [
            "M29.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,35c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,27c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z M29.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H29.5z M21.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H21.5z M13.5,19c-0.275,0-0.5-0.225-0.5-0.5v-5c0-0.275,0.225-0.5,0.5-0.5h5c0.275,0,0.5,0.225,0.5,0.5v5c0,0.275-0.225,0.5-0.5,0.5H13.5z"
        ];
        return this._createToolbarIcon(paths);
    }

    _createBookViewIcon ()
    {
        let paths = [
            "M35,16.8v-1.323c0,0-2.292-1.328-5.74-1.328c-3.448,0-5.26,1.25-5.26,1.25s-1.813-1.25-5.26-1.25c-3.448,0-5.74,1.328-5.74,1.328V16.8l-1,0.531v0.021v15.687c0,0,4.531-1.578,6.999-1.578c2.468,0,5.001,0.885,5.001,0.885s2.532-0.885,5-0.885c0.306,0,0.643,0.024,1,0.066v4.325l1.531-2.016L33,35.852v-3.72c2,0.43,3,0.906,3,0.906V17.352v-0.021L35,16.8z M23,29.03c-1-0.292-2.584-0.679-3.981-0.679c-2.246,0-3.019,0.404-4.019,0.699V16.634c0,0,1.125-0.699,4.019-0.699c1.694,0,2.981,0.417,3.981,1.126V29.03z M33,29.051c-1-0.295-1.773-0.699-4.02-0.699c-1.396,0-2.981,0.387-3.98,0.679V17.06c1-0.709,2.286-1.126,3.98-1.126c2.895,0,4.02,0.699,4.02,0.699V29.051z"
        ];
        return this._createToolbarIcon(paths);
    }

    _createPageViewIcon ()
    {
        let paths = [
            "M29.425,29h4.47L29,33.934v-4.47C29,29.19,29.151,29,29.425,29z M34,14.563V28h-5.569C28.157,28,28,28.196,28,28.47V34H14.497C14.223,34,14,33.71,14,33.437V14.563C14,14.29,14.223,14,14.497,14h18.9C33.672,14,34,14.29,34,14.563z M25.497,26.497C25.497,26.223,25.275,26,25,26h-7c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,27.777,17.725,28,18,28h7c0.275,0,0.497-0.223,0.497-0.497V26.497z M30.497,22.497C30.497,22.223,30.275,22,30,22H18c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,23.777,17.725,24,18,24h12c0.275,0,0.497-0.223,0.497-0.497V22.497z M30.497,18.497C30.497,18.223,30.275,18,30,18H18c-0.275,0-0.497,0.223-0.497,0.497v1.006C17.503,19.777,17.725,20,18,20h12c0.275,0,0.497-0.223,0.497-0.497V18.497z"
        ];

        return this._createToolbarIcon(paths);
    }

    _createFullscreenIcon ()
    {
        let paths = [
            "M35,12H13c-0.55,0-1,0.45-1,1v22c0,0.55,0.45,1,1,1h22c0.55,0,1-0.45,1-1V13C36,12.45,35.55,12,35,12z M34,34H14V14h20V34z",
            "M17,21.75v-4.5c0-0.138,0.112-0.25,0.25-0.25h4.5c0.138,0,0.17,0.08,0.073,0.177l-1.616,1.616l1.823,1.823c0.097,0.097,0.097,0.256,0,0.354l-1.061,1.06c-0.097,0.097-0.256,0.097-0.354,0l-1.823-1.823l-1.616,1.616C17.08,21.92,17,21.888,17,21.75z M20.97,25.97c-0.097-0.097-0.256-0.097-0.354,0l-1.823,1.823l-1.616-1.616C17.08,26.08,17,26.112,17,26.25v4.5c0,0.138,0.112,0.25,0.25,0.25h4.5c0.138,0,0.17-0.08,0.073-0.177l-1.616-1.616l1.823-1.823c0.097-0.097,0.097-0.256,0-0.354L20.97,25.97z M30.75,17h-4.5c-0.138,0-0.17,0.08-0.073,0.177l1.616,1.616l-1.823,1.823c-0.097,0.097-0.097,0.256,0,0.354l1.061,1.06c0.097,0.097,0.256,0.097,0.354,0l1.823-1.823l1.616,1.616C30.92,21.92,31,21.888,31,21.75v-4.5C31,17.112,30.888,17,30.75,17z M30.823,26.177l-1.616,1.616l-1.823-1.823c-0.097-0.097-0.256-0.097-0.354,0l-1.061,1.06c-0.097,0.097-0.097,0.256,0,0.354l1.823,1.823l-1.616,1.616C26.08,30.92,26.112,31,26.25,31h4.5c0.138,0,0.25-0.112,0.25-0.25v-4.5C31,26.112,30.92,26.08,30.823,26.177z M26,22.5c0-0.275-0.225-0.5-0.5-0.5h-3c-0.275,0-0.5,0.225-0.5,0.5v3c0,0.275,0.225,0.5,0.5,0.5h3c0.275,0,0.5-0.225,0.5-0.5V22.5z"
        ];

        return this._createToolbarIcon(paths);
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/dragscroll.js":
/*!************************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/dragscroll.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @fileoverview dragscroll - scroll area by dragging
 * @version 0.0.8
 *
 * @license MIT, see http://github.com/asvd/dragscroll
 * @copyright 2015 asvd <heliosframework@gmail.com>
 */
(function (root, factory)
{
    if (true)
    {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    else {}
}(this, function (exports)
{
    var _window = window;
    var _document = document;
    var mousemove = 'mousemove';
    var mouseup = 'mouseup';
    var mousedown = 'mousedown';
    var EventListener = 'EventListener';
    var addEventListener = 'add' + EventListener;
    var removeEventListener = 'remove' + EventListener;
    var newScrollX, newScrollY; // jshint ignore:line

    var dragged = [];

    var reset = function (i, el)
    {
        for (i = 0; i < dragged.length;)
        {
            el = dragged[i++];
            el = el.container || el;
            el[removeEventListener](mousedown, el.md, 0);
            _window[removeEventListener](mouseup, el.mu, 0);
            _window[removeEventListener](mousemove, el.mm, 0);
        }

        // suppress warning about functions in loops.
        /* jshint ignore:start */
        // cloning into array since HTMLCollection is updated dynamically
        dragged = [].slice.call(_document.getElementsByClassName('dragscroll'));
        for (i = 0; i < dragged.length;)
        {
            (function (el, lastClientX, lastClientY, pushed, scroller, cont)
            {
                (cont = el.container || el)[addEventListener](
                    mousedown,
                    cont.md = function (e)
                    {
                        if (!el.hasAttribute('nochilddrag') || _document.elementFromPoint(e.pageX, e.pageY) === cont)
                        {
                            pushed = 1;
                            lastClientX = e.clientX;
                            lastClientY = e.clientY;

                            e.preventDefault();
                        }
                    }, 0
                );

                _window[addEventListener](mouseup, cont.mu = function ()
                    {
                        pushed = 0;
                    }, 0);

                _window[addEventListener](mousemove, cont.mm = function (e)
                    {
                        if (pushed)
                        {
                            (scroller = el.scroller || el).scrollLeft -=
                                newScrollX = (-lastClientX + (lastClientX = e.clientX));
                            scroller.scrollTop -=
                                newScrollY = (-lastClientY + (lastClientY = e.clientY));
                            if (el === _document.body)
                            {
                                (scroller = _document.documentElement).scrollLeft -= newScrollX;
                                scroller.scrollTop -= newScrollY;
                            }
                        }
                    }, 0);
            })(dragged[i++]);
        }
        /* jshint ignore:end */
    };

    if (_document.readyState === 'complete')
    {
        reset();
    }
    else
    {
        _window[addEventListener]('load', reset, 0);
    }

    exports.reset = reset;
    window.resetDragscroll = reset;
}));


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/elt.js":
/*!*****************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/elt.js ***!
  \*****************************************************/
/*! exports provided: setAttributes, elt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAttributes", function() { return setDOMAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elt", function() { return elt; });


/**
 * Convenience function to create a DOM element, set attributes on it, and
 * append children. All arguments which are not of primitive type, are not
 * arrays, and are not DOM nodes are treated as attribute hashes and are
 * handled as described for setDOMAttributes. Children can either be a DOM
 * node or a primitive value, which is converted to a text node. Arrays are
 * handled recursively. Null and undefined values are ignored.
 *
 * Inspired by the ProseMirror helper of the same name.
 */
function elt (tag)
{
    const el = document.createElement(tag);
    const args = Array.prototype.slice.call(arguments, 1);

    while (args.length)
    {
        const arg = args.shift();
        handleEltConstructorArg(el, arg);
    }

    return el;
}

function handleEltConstructorArg (el, arg)
{
    if (arg == null)  // NB: == is correct;
        return;

    if (typeof arg !== 'object' && typeof arg !== 'function')
    {
        // Coerce to string
        el.appendChild(document.createTextNode(arg));
    }
    else if (arg instanceof window.Node)
    {
        el.appendChild(arg);
    }
    else if (arg instanceof Array)
    {
        const childCount = arg.length;
        for (let i = 0; i < childCount; i++)
            handleEltConstructorArg(el, arg[i]);
    }
    else
    {
        setDOMAttributes(el, arg);
    }
}

/**
 * Set attributes of a DOM element. The `style` property is special-cased to
 * accept either a string or an object whose own attributes are assigned to
 * el.style.
 */
function setDOMAttributes (el, attributes)
{
    for (const prop in attributes)
    {
        if (!attributes.hasOwnProperty(prop))
            continue;

        if (prop === 'style')
        {
            setStyle(el, attributes.style);
        }
        else
        {
            el.setAttribute(prop, attributes[prop]);
        }
    }
}

function setStyle (el, style)
{
    if (!style)
        return;

    if (typeof style !== 'object')
    {
        el.style.cssText = style;
        return;
    }

    for (const cssProp in style)
    {
        if (!style.hasOwnProperty(cssProp))
            continue;

        el.style[cssProp] = style[cssProp];
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/events.js":
/*!********************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/events.js ***!
  \********************************************************/
/*! exports provided: Events */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return Events; });
/**
 * Events. Pub/Sub system for Loosely Coupled logic.
 * Based on Peter Higgins' port from Dojo to jQuery
 * https://github.com/phiggins42/bloody-jquery-plugins/blob/master/pubsub.js
 *
 * Re-adapted to vanilla Javascript
 *
 * @class Events
 */

class DivaEvents
{
    constructor()
    {
        this._cache = {};
    }

    /**
     * diva.Events.publish
     * e.g.: diva.Events.publish("PageDidLoad", [pageIndex, filename, pageSelector], this);
     *
     * @class Events
     * @method publish
     * @param topic {String}
     * @param args  {Array}
     * @param scope {Object=} Optional - Subscribed functions will be executed with the supplied object as `this`.
     *     It is necessary to supply this argument with the self variable when within a Diva instance.
     *     The scope argument is matched with the instance ID of subscribers to determine whether they
     *         should be executed. (See instanceID argument of subscribe.)
     */
    publish(topic, args, scope)
    {
        if (this._cache[topic])
        {
            const thisTopic = this._cache[topic];

            if (typeof thisTopic.global !== 'undefined')
            {
                const thisTopicGlobal = thisTopic.global;
                const globalCount = thisTopicGlobal.length;

                for (let i=0; i < globalCount; i++)
                {
                    thisTopicGlobal[i].apply(scope || null, args || []);
                }
            }

            if (scope && typeof scope.getInstanceId !== 'undefined')
            {
                // get publisher instance ID from scope arg, compare, and execute if match
                const instanceID = scope.getInstanceId();

                if (this._cache[topic][instanceID])
                {
                    const thisTopicInstance = this._cache[topic][instanceID];
                    const scopedCount = thisTopicInstance.length;

                    for (let j=0; j < scopedCount; j++)
                    {
                        thisTopicInstance[j].apply(scope, args || []);
                    }
                }
            }
        }
    }

    /**
     * diva.Events.subscribe
     * e.g.: diva.Events.subscribe("PageDidLoad", highlight, settings.ID)
     *
     * @class Events
     * @method subscribe
     * @param {string} topic
     * @param {function} callback
     * @param {string=} instanceID  Optional - String representing the ID of a Diva instance; if provided,
     *                                       callback only fires for events published from that instance.
     * @return Event handler {Array}
     */
    subscribe(topic, callback, instanceID)
    {
        if (!this._cache[topic])
        {
            this._cache[topic] = {};
        }

        if (typeof instanceID === 'string')
        {
            if (!this._cache[topic][instanceID])
            {
                this._cache[topic][instanceID] = [];
            }

            this._cache[topic][instanceID].push(callback);
        }
        else
        {
            if (!this._cache[topic].global)
            {
                this._cache[topic].global = [];
            }

            this._cache[topic].global.push(callback);
        }

        return instanceID ? [topic, callback, instanceID] : [topic, callback];
    }

    /**
     * diva.Events.unsubscribe
     * e.g.: var handle = Events.subscribe("PageDidLoad", highlight);
     *         Events.unsubscribe(handle);
     *
     * @class Events
     * @method unsubscribe
     * @param {array} handle
     * @param {boolean=} completely - Unsubscribe all events for a given topic.
     * @return {boolean} success
     */
    unsubscribe(handle, completely)
    {
        const t = handle[0];

        if (this._cache[t])
        {
            let topicArray;
            const instanceID = handle.length === 3 ? handle[2] : 'global';

            topicArray = this._cache[t][instanceID];

            if (!topicArray)
            {
                return false;
            }

            if (completely)
            {
                delete this._cache[t][instanceID];
                return topicArray.length > 0;
            }

            let i = topicArray.length;

            while (i--)
            {
                if (topicArray[i] === handle[1])
                {
                    this._cache[t][instanceID].splice(i, 1);
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * diva.Events.unsubscribeAll
     * e.g.: diva.Events.unsubscribeAll('global');
     *
     * @class Events
     * @param {string=} instanceID Optional - instance ID to remove subscribers from or 'global' (if omitted,
     *                              subscribers in all scopes removed)
     * @method unsubscribeAll
     */
    unsubscribeAll(instanceID)
    {
        if (instanceID)
        {
            const topics = Object.keys(this._cache);
            let i = topics.length;
            let topic;

            while (i--)
            {
                topic = topics[i];

                if (typeof this._cache[topic][instanceID] !== 'undefined')
                {
                    delete this._cache[topic][instanceID];
                }
            }
        }
        else
        {
            this._cache = {};
        }
    }
}

let Events = new DivaEvents();


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/get-scrollbar-width.js":
/*!*********************************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/get-scrollbar-width.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getScrollbarWidth; });
// From http://www.alexandre-gomes.com/?p=115, modified slightly
function getScrollbarWidth()
{
    let inner = document.createElement('p');
    inner.style.width = '100%';
    inner.style.height = '200px';

    let outer = document.createElement('div');
    outer.style.position = 'absolute';
    outer.style.top = '0px';
    outer.style.left = '0px';
    outer.style.visibility = 'hidden';
    outer.style.width = '200px';
    outer.style.height = '150px';
    outer.style.overflow = 'hidden';
    outer.appendChild(inner);

    document.body.appendChild(outer);

    let w1 = inner.offsetWidth;
    outer.style.overflow = 'scroll';
    let w2 = inner.offsetWidth;
    if (w1 === w2) {
        w2 = outer.clientWidth; // for IE i think
    }

    document.body.removeChild(outer);
    return w1 - w2;
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/hash-params.js":
/*!*************************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/hash-params.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
let HashParams = {
    get: getHashParam,
    update: updateHashParam
};

/* harmony default export */ __webpack_exports__["default"] = (HashParams);


// For getting the #key values from the URL. For specifying a page and zoom level
// Look into caching, because we only need to get this during the initial load
// Although for the tests I guess we would need to override caching somehow
function getHashParam (key)
{
    const hash = window.location.hash;

    if (hash !== '')
    {
        // Check if there is something that looks like either &key= or #key=
        let startIndex = (hash.indexOf('&' + key + '=') > 0) ? hash.indexOf('&' + key + '=') : hash.indexOf('#' + key + '=');

        // If startIndex is still -1, it means it can't find either
        if (startIndex >= 0)
        {
            // Add the length of the key plus the & and =
            startIndex += key.length + 2;

            // Either to the next ampersand or to the end of the string
            const endIndex = hash.indexOf('&', startIndex);
            if (endIndex > startIndex)
            {
                return decodeURIComponent(hash.substring(startIndex, endIndex));
            }
            else if (endIndex < 0)
            {
                // This means this hash param is the last one
                return decodeURIComponent(hash.substring(startIndex));
            }
            // If the key doesn't have a value I think
            return '';
        }
        else
        {
            // If it can't find the key
            return false;
        }
    }
    else
    {
        // If there are no hash params just return false
        return false;
    }
}

function updateHashParam (key, value)
{
    // First make sure that we have to do any work at all
    const originalValue = getHashParam(key);
    const hash = window.location.hash;

    if (originalValue !== value)
    {
        // Is the key already in the URL?
        if (typeof originalValue === 'string')
        {
            // Already in the URL. Just get rid of the original value
            const startIndex = (hash.indexOf('&' + key + '=') > 0) ? hash.indexOf('&' + key + '=') : hash.indexOf('#' + key + '=');
            const endIndex = startIndex + key.length + 2 + originalValue.length;
            // # if it's the first, & otherwise
            const startThing = (startIndex === 0) ? '#' : '&';
            window.location.replace(hash.substring(0, startIndex) + startThing + key + '=' + value + hash.substring(endIndex));
        }
        else
        {
            // It's not present - add it
            if (hash.length === 0)
            {
                window.location.replace('#' + key + '=' + value);
            }
            else
            {
                // Append it
                window.location.replace(hash + '&' + key + '=' + value);
            }
        }
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/parse-label-value.js":
/*!*******************************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/parse-label-value.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parseLabelValue; });
/**
 * Parses a v3 manifest's label/value pair from an object & array to a string
 *
 * @public
 * @params {string} key - The key from which a label/value pair should be extracted.
 * @returns {object} - The label/value pair as strings.
 * */

function parseLabelValue (key)
{
    let l = key.label; 
    let label = (typeof l === 'object') ? l[Object.keys(l)[0]][0] : l;

    let v = key.value;
    let value;
    if (Array.isArray(v))
    { // is array of objects
        value = v.map(e => e[Object.keys(e)[0]]);
    }
    else
    { // is object where value is possibly an array
        value = (typeof v === 'object') ? v[Object.keys(v)[0]] : v;
    }

    if (Array.isArray(value))
    {
        value = value.join(', ');
    }

    return {
        label: label,
        value: value
    };
}

/***/ }),

/***/ "./node_modules/diva.js/source/js/utils/vanilla.kinetic.js":
/*!*****************************************************************!*\
  !*** ./node_modules/diva.js/source/js/utils/vanilla.kinetic.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 The MIT License (MIT)
 Copyright (c) <2011> <Dave Taylor http://the-taylors.org>

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is furnished
 to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Port to vanilla Javascript by Jacek Nowacki http://jacek-nowacki.net/
**/

(function() {
    var _raf = window.requestAnimationFrame;

    var _isTouch = 'ontouchend' in document;

    // this is simple, no "deep" support
    var _extend = function() {
        for (var i=1; i<arguments.length; i++) {
            for (var key in arguments[i]) {
                if (arguments[i].hasOwnProperty(key)) {
                    arguments[0][key] = arguments[i][key];
                }
            }
        }
        return arguments[0];
    };

    var VanillaKinetic = function(element, settings) {
        this.settings = _extend({}, VanillaKinetic.DEFAULTS, settings);
        this.el       = element;
        this.ACTIVE_CLASS = "kinetic-active";

        this._initElements();

        this.el._VanillaKinetic = this;
        return this;
    };

    VanillaKinetic.DEFAULTS = {
        cursor: 'move',
        decelerate: true,
        triggerHardware: false,
        threshold: 0,
        y: true,
        x: true,
        slowdown: 0.9,
        maxvelocity: 40,
        throttleFPS: 60,
        invert: false,
        movingClass: {
            up: 'kinetic-moving-up',
            down: 'kinetic-moving-down',
            left: 'kinetic-moving-left',
            right: 'kinetic-moving-right'
        },
        deceleratingClass: {
            up: 'kinetic-decelerating-up',
            down: 'kinetic-decelerating-down',
            left: 'kinetic-decelerating-left',
            right: 'kinetic-decelerating-right'
        }
    };

    // Public functions
    VanillaKinetic.prototype.start = function(options) {
        this.settings = _extend(this.settings, options);
        this.velocity = options.velocity || this.velocity;
        this.velocityY = options.velocityY || this.velocityY;
        this.settings.decelerate = false;
        this._move();
    };

    VanillaKinetic.prototype.end = function() {
        this.settings.decelerate = true;
    };

    VanillaKinetic.prototype.stop = function() {
        this.velocity = 0;
        this.velocityY = 0;
        this.settings.decelerate = true;
        if (typeof this.settings.stopped === 'function') {
            this.settings.stopped.call(this);
        }
    };

    VanillaKinetic.prototype.detach = function() {
        this._detachListeners();
        this.el.classList.remove(this.ACTIVE_CLASS);
        this.el.style.cursor = '';
    };

    VanillaKinetic.prototype.attach = function() {
        if (this.el.classList.contains(this.ACTIVE_CLASS)) {
            return;
        }
        this._attachListeners();
        this.el.classList.add(this.ACTIVE_CLASS);
        this.el.style.cursor = this.settings.cursor;
    };

    // Internal functions

    VanillaKinetic.prototype._initElements = function() {
        this.el.classList.add(this.ACTIVE_CLASS);

        _extend(this, {
            xpos: null,
            prevXPos: false,
            ypos: null,
            prevYPos: false,
            mouseDown: false,
            throttleTimeout: 1000 / this.settings.throttleFPS,
            lastMove: null,
            elementFocused: null
        });

        this.velocity = 0;
        this.velocityY = 0;

        var that = this;
        this.documentResetHandler = function() {
            that._resetMouse.apply(that);
        };

        // FIXME make sure to remove this
        var html = document.documentElement;
        html.addEventListener("mouseup", this.documentResetHandler, false);
        html.addEventListener("click", this.documentResetHandler, false);

        this._initEvents();

        this.el.style.cursor = this.settings.cursor;

        if (this.settings.triggerHardware) {
            var prefixes = ['', '-ms-', '-webkit-', '-moz-'];
            var styles = {
                'transform': 'translate3d(0,0,0)',
                'perspective': '1000', // TODO is this even valid? is this even needed?
                'backface-visibility': 'hidden'
            };
            for (var i=0; i<prefixes.length; i++) {
                var prefix = prefixes[i];
                for (var key in styles) {
                    if (styles.hasOwnProperty(key)){
                        this.el.style[prefix+key] = styles[key];
                    }
                }
            }
        }
    };

    VanillaKinetic.prototype._initEvents = function() {
        var self = this;
        this.settings.events = {
            touchStart: function(e) {
                var touch;
                if (self._useTarget(e.target, e)) {
                    touch = e.originalEvent.touches[0];
                    self.threshold = self._threshold(e.target, e);
                    self._start(touch.clientX, touch.clientY);
                    e.stopPropagation();
                }
            },
            touchMove: function(e) {
                var touch;
                if (self.mouseDown) {
                    touch = e.originalEvent.touches[0];
                    self._inputmove(touch.clientX, touch.clientY);
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                }
            },
            inputDown: function(e) {
                if (self._useTarget(e.target, e)) {
                    self.threshold = self._threshold(e.target, e);
                    self._start(e.clientX, e.clientY);
                    self.elementFocused = e.target;
                    if (e.target.nodeName === "IMG") {
                        e.preventDefault();
                    }
                    e.stopPropagation();
                }
            },
            inputEnd: function(e) {
                if (self._useTarget(e.target, e)) {
                    self._end();
                    self.elementFocused = null;
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                }
            },
            inputMove: function(e) {
                if (self.mouseDown) {
                    self._inputmove(e.clientX, e.clientY);
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                }
            },
            scroll: function(e) {
                if (typeof self.settings.moved === 'function') {
                    self.settings.moved.call(self, self.settings);
                }
                if (e.preventDefault) {
                    e.preventDefault();
                }
            },
            inputClick: function(e) {
                if (Math.abs(self.velocity) > 0 || Math.abs(self.velocityY) > 0) {
                    e.preventDefault();
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    return false;
                }
            },
            dragStart: function(e) {
                if (self._useTarget(e.target, e) && self.elementFocused) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    return false;
                }
            },
            selectStart: function(e) {
                if (typeof self.settings.selectStart === 'function') {
                    return self.settings.selectStart.apply(self, arguments);
                }
                else if (self._useTarget(e.target, e)) {
                    if (e.preventDefault) {
                        e.preventDefault();
                    }
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    return false;
                }
            }
        };

        this._attachListeners();
    };

    VanillaKinetic.prototype._inputmove = function(clientX, clientY) {
        if (!this.lastMove || new Date() > new Date(this.lastMove.getTime() + this.throttleTimeout)) {
            this.lastMove = new Date();

            if (this.mouseDown && (this.xpos || this.ypos)) {
                var movedX = (clientX - this.xpos);
                var movedY = (clientY - this.ypos);
                if (this.settings.invert) {
                    movedX *= -1;
                    movedY *= -1;
                }
                if (this.threshold>0) {
                    var moved = Math.sqrt(movedX*movedX + movedY*movedY);
                    if (this.threshold>moved) {
                        return;
                    }
                    else {
                        this.threshold = 0;
                    }
                }
                if (this.elementFocused) {
                    this.elementFocused.blur();
                    this.elementFocused = null;
                    this.el.focus();
                }

                this.settings.decelerate = false;
                this.velocity = this.velocityY = 0;

                var scrollLeft = this.scrollLeft();
                var scrollTop = this.scrollTop();

                this.scrollLeft(this.settings.x ? scrollLeft - movedX : scrollLeft);
                this.scrollTop(this.settings.y ? scrollTop - movedY : scrollTop);

                this.prevXPos = this.xpos;
                this.prevYPos = this.ypos;
                this.xpos = clientX;
                this.ypos = clientY;

                this._calculateVelocities();
                this._setMoveClasses(this.settings.movingClass);

                if (typeof this.settings.moved === 'function') {
                    this.settings.moved.call(this, this.settings);
                }
            }
        }
    };

    VanillaKinetic.prototype._calculateVelocities = function() {
        this.velocity = this._capVelocity(this.prevXPos - this.xpos, this.settings.maxvelocity);
        this.velocityY = this._capVelocity(this.prevYPos - this.ypos, this.settings.maxvelocity);
        if (this.settings.invert) {
            this.velocity *= -1;
            this.velocityY *= -1;
        }
    };

    VanillaKinetic.prototype._end = function() {
        if (this.xpos && this.prevXPos && this.settings.decelerate === false) {
            this.settings.decelerate = true;
            this._calculateVelocities();
            this.xpos = this.prevXPos = this.mouseDown = false;
            this._move();
        }
    };

    VanillaKinetic.prototype._useTarget = function(target, event) {
        if (typeof this.settings.filterTarget === 'function') {
            return this.settings.filterTarget.call(this, target, event) !== false;
        }
        return true;

    };

    VanillaKinetic.prototype._threshold = function(target, event) {
        if (typeof this.settings.threshold === 'function') {
            return this.settings.threshold.call(this, target, event);
        }
        return this.settings.threshold;
    };

    VanillaKinetic.prototype._start = function(clientX, clientY) {
        this.mouseDown = true;
        this.velocity = this.prevXPos = 0;
        this.velocityY = this.prevYPos = 0;
        this.xpos = clientX;
        this.ypos = clientY;
    };

    VanillaKinetic.prototype._resetMouse = function() {
        this.xpos = false;
        this.ypos = false;
        this.mouseDown = false;
    };

    VanillaKinetic.prototype._decelerateVelocity = function(velocity, slowdown) {
        return Math.floor(Math.abs(velocity)) === 0 ? 0 // is velocity less than 1?
            : velocity * slowdown; // reduce slowdown
    };

    VanillaKinetic.prototype._capVelocity = function(velocity, max) {
        var newVelocity = velocity;
        if (velocity > 0){
            if (velocity > max){
                newVelocity = max;
            }
        } else {
            if (velocity < (0 - max)){
                newVelocity = (0 - max);
            }
        }
        return newVelocity;
    };

    VanillaKinetic.prototype._setMoveClasses = function(classes) {
        // The fix-me comment below is from original jQuery.kinetic project
        // FIXME: consider if we want to apply PL #44, this should not remove
        // classes we have not defined on the element!
        var settings = this.settings;
        var el = this.el;

        el.classList.remove(settings.movingClass.up);
        el.classList.remove(settings.movingClass.down);
        el.classList.remove(settings.movingClass.left);
        el.classList.remove(settings.movingClass.right);
        el.classList.remove(settings.deceleratingClass.up);
        el.classList.remove(settings.deceleratingClass.down);
        el.classList.remove(settings.deceleratingClass.left);
        el.classList.remove(settings.deceleratingClass.right);

        if (this.velocity > 0){
            el.classList.add(classes.right);
        }
        if (this.velocity < 0){
            el.classList.add(classes.left);
        }
        if (this.velocityY > 0){
            el.classList.add(classes.down);
        }
        if (this.velocityY < 0){
            el.classList.add(classes.up);
        }
    };

    VanillaKinetic.prototype._move = function() {
        var scroller = this._getScroller();
        var self = this;
        var settings = this.settings;

        if (settings.x && scroller.scrollWidth > 0) {
            this.scrollLeft(this.scrollLeft() + this.velocity);
            if (Math.abs(this.velocity) > 0) {
                this.velocity = settings.decelerate ?
                    self._decelerateVelocity(this.velocity, settings.slowdown) : this.velocity;
            }
        }
        else {
            this.velocity = 0;
        }

        if (settings.y && scroller.scrollHeight > 0){
            this.scrollTop(this.scrollTop() + this.velocityY);
            if (Math.abs(this.velocityY) > 0){
                this.velocityY = settings.decelerate ?
                    self._decelerateVelocity(this.velocityY, settings.slowdown) : this.velocityY;
            }
        }
        else {
            this.velocityY = 0;
        }

        self._setMoveClasses(settings.deceleratingClass);

        if (typeof settings.moved === 'function'){
            settings.moved.call(this, settings);
        }

        if (Math.abs(this.velocity) > 0 || Math.abs(this.velocityY) > 0){
            if (!this.moving) {
                this.moving = true;
                // tick for next movement
                _raf(function() {
                    self.moving = false;
                    self._move();
                });
            }
        }
        else {
            self.stop();
        }
    };

    VanillaKinetic.prototype._getScroller = function() {
        // FIXME we may want to normalize behaviour across browsers as in original jQuery.kinetic
        // currently this won't work correctly on all brwosers when attached to html or body element
        return this.el;
    };

    VanillaKinetic.prototype.scrollLeft = function(left) {
        var scroller = this._getScroller();
        if (typeof left === 'number') {
            scroller.scrollLeft = left;
            this.settings.scrollLeft = left;
        }
        else {
            return scroller.scrollLeft;
        }
    };

    VanillaKinetic.prototype.scrollTop = function(top) {
        var scroller = this._getScroller();
        if (typeof top === 'number') {
            scroller.scrollTop = top;
            this.settings.scrollTop = top;
        }
        else {
            return scroller.scrollTop;
        }
    };

    VanillaKinetic.prototype._attachListeners = function() {
        var el = this.el;
        var settings = this.settings;

        if (_isTouch) {
            el.addEventListener('touchstart', settings.events.touchStart, false);
            el.addEventListener('touchend', settings.events.inputEnd, false);
            el.addEventListener('touchmove', settings.events.touchMove, false);
        }

        el.addEventListener('mousedown', settings.events.inputDown, false);
        el.addEventListener('mouseup', settings.events.inputEnd, false);
        el.addEventListener('mousemove', settings.events.inputMove, false);

        el.addEventListener('click', settings.events.inputClick, false);
        el.addEventListener('scroll', settings.events.scroll, false);
        el.addEventListener('selectstart', settings.events.selectStart, false);
        el.addEventListener('dragstart', settings.events.dragStart, false);
    };

    VanillaKinetic.prototype._detachListeners = function() {
        var el = this.el;
        var settings = this.settings;

        if (_isTouch) {
            el.removeEventListener('touchstart', settings.events.touchStart, false);
            el.removeEventListener('touchend', settings.events.inputEnd, false);
            el.removeEventListener('touchmove', settings.events.touchMove, false);
        }

        el.removeEventListener('mousedown', settings.events.inputDown, false);
        el.removeEventListener('mouseup', settings.events.inputEnd, false);
        el.removeEventListener('mousemove', settings.events.inputMove, false);

        el.removeEventListener('click', settings.events.inputClick, false);
        el.removeEventListener('scroll', settings.events.scroll, false);
        el.removeEventListener('selectstart', settings.events.selectStart, false);
        el.removeEventListener('dragstart', settings.events.dragStart, false);
    };


    window.VanillaKinetic = VanillaKinetic;
})();


/***/ }),

/***/ "./node_modules/diva.js/source/js/validation-runner.js":
/*!*************************************************************!*\
  !*** ./node_modules/diva.js/source/js/validation-runner.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ValidationRunner; });
class ValidationRunner
{
    constructor (options)
    {
        this.whitelistedKeys = options.whitelistedKeys || [];
        this.additionalProperties = options.additionalProperties || [];
        this.validations = options.validations;
    }

    isValid (key, value, settings)
    {
        // Get the validation index
        let validationIndex = null;

        this.validations.some((validation, index) =>
        {
            if (validation.key !== key)
            {
                return false;
            }

            validationIndex = index;
            return true;
        });

        if (validationIndex === null)
        {
            return true;
        }

        // Run the validation
        const dummyChanges = {};
        dummyChanges[key] = value;
        const proxier = createSettingsProxier(settings, dummyChanges, this);

        return !this._runValidation(validationIndex, value, proxier);
    }

    validate (settings)
    {
        this._validateOptions({}, settings);
    }

    getValidatedOptions (settings, options)
    {
        const cloned = Object.assign({}, options);
        this._validateOptions(settings, cloned);
        return cloned;
    }

    _validateOptions (settings, options)
    {
        const settingsProxier = createSettingsProxier(settings, options, this);
        this._applyValidations(options, settingsProxier);
    }

    _applyValidations (options, proxier)
    {
        this.validations.forEach((validation, index) =>
        {
            if (!options.hasOwnProperty(validation.key))
            {
                return;
            }

            const input = options[validation.key];
            const corrected = this._runValidation(index, input, proxier);

            if (corrected)
            {
                if (!corrected.warningSuppressed)
                {
                    emitWarning(validation.key, input, corrected.value);
                }

                options[validation.key] = corrected.value;
            }
        }, this);
    }

    _runValidation (index, input, proxier)
    {
        const validation = this.validations[index];

        proxier.index = index;

        let warningSuppressed = false;
        const config = {
            suppressWarning: () =>
            {
                warningSuppressed = true;
            }
        };

        const outputValue = validation.validate(input, proxier.proxy, config);

        if (outputValue === undefined || outputValue === input)
        {
            return null;
        }

        return {
            value: outputValue,
            warningSuppressed: warningSuppressed
        };
    }
}

/**
 * The settings proxy wraps the settings object and ensures that
 * only values which have previously been validated are accessed,
 * throwing a TypeError otherwise.
 *
 * FIXME(wabain): Is it worth keeping this? When I wrote it I had
 * multiple validation stages and it was a lot harder to keep track
 * of everything, so this was more valuable.
 */
function createSettingsProxier (settings, options, runner)
{
    const proxier = {
        proxy: {},
        index: null
    };

    const lookup = lookupValue.bind(null, settings, options);

    const properties = {};

    runner.whitelistedKeys.forEach((whitelisted) =>
    {
        properties[whitelisted] = {
            get: lookup.bind(null, whitelisted)
        };
    });

    runner.additionalProperties.forEach((additional) =>
    {
        properties[additional.key] = {
            get: additional.get
        };
    });

    runner.validations.forEach( (validation, validationIndex) =>
    {
        properties[validation.key] = {
            get: () =>
            {
                if (validationIndex < proxier.index)
                {
                    return lookup(validation.key);
                }

                const currentKey = runner.validations[proxier.index].key;
                throw new TypeError('Cannot access setting ' + validation.key + ' while validating ' + currentKey);
            }
        };
    });

    Object.defineProperties(proxier.proxy, properties);

    return proxier;
}

function emitWarning (key, original, corrected)
{
    console.warn('Invalid value for ' + key + ': ' + original + '. Using ' + corrected + ' instead.');
}

function lookupValue (base, extension, key)
{
    if (key in extension)
    {
        return extension[key];
    }

    return base[key];
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/viewer-core.js":
/*!*******************************************************!*\
  !*** ./node_modules/diva.js/source/js/viewer-core.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ViewerCore; });
/* harmony import */ var _utils_elt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/elt */ "./node_modules/diva.js/source/js/utils/elt.js");
/* harmony import */ var _utils_get_scrollbar_width__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/get-scrollbar-width */ "./node_modules/diva.js/source/js/utils/get-scrollbar-width.js");
/* harmony import */ var _gesture_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gesture-events */ "./node_modules/diva.js/source/js/gesture-events.js");
/* harmony import */ var _diva_global__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./diva-global */ "./node_modules/diva.js/source/js/diva-global.js");
/* harmony import */ var _document_handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./document-handler */ "./node_modules/diva.js/source/js/document-handler.js");
/* harmony import */ var _grid_handler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./grid-handler */ "./node_modules/diva.js/source/js/grid-handler.js");
/* harmony import */ var _page_overlay_manager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./page-overlay-manager */ "./node_modules/diva.js/source/js/page-overlay-manager.js");
/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./renderer */ "./node_modules/diva.js/source/js/renderer.js");
/* harmony import */ var _page_layouts__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./page-layouts */ "./node_modules/diva.js/source/js/page-layouts/index.js");
/* harmony import */ var _settings_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./settings-view */ "./node_modules/diva.js/source/js/settings-view.js");
/* harmony import */ var _validation_runner__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./validation-runner */ "./node_modules/diva.js/source/js/validation-runner.js");
/* harmony import */ var _viewport__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./viewport */ "./node_modules/diva.js/source/js/viewport.js");













const debug = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js")('diva:ViewerCore');

function generateId() {
    return generateId.counter++;
}
generateId.counter = 1;


// Define validations
const optionsValidations = [
    {
        key: 'goDirectlyTo',
        validate: (value, settings) =>
        {
            if (value < 0 || value >= settings.manifest.pages.length)
                return 0;
        }
    },
    {
        key: 'minPagesPerRow',
        validate: (value) =>
        {
            return Math.max(2, value);
        }
    },
    {
        key: 'maxPagesPerRow',
        validate: (value, settings) =>
        {
            return Math.max(value, settings.minPagesPerRow);
        }
    },
    {
        key: 'pagesPerRow',
        validate: (value, settings) =>
        {
            // Default to the maximum
            if (value < settings.minPagesPerRow || value > settings.maxPagesPerRow)
                return settings.maxPagesPerRow;
        }
    },
    {
        key: 'maxZoomLevel',
        validate: (value, settings, config) =>
        {
            // Changing this value isn't really an error, it just depends on the
            // source manifest
            config.suppressWarning();

            if (value < 0 || value > settings.manifest.maxZoom)
                return settings.manifest.maxZoom;
        }
    },
    {
        key: 'minZoomLevel',
        validate: (value, settings, config) =>
        {
            // Changes based on the manifest value shouldn't trigger a
            // warning
            if (value > settings.manifest.maxZoom)
            {
                config.suppressWarning();
                return 0;
            }

            if (value < 0 || value > settings.maxZoomLevel)
                return 0;
        }
    },
    {
        key: 'zoomLevel',
        validate: (value, settings, config) =>
        {
            if (value > settings.manifest.maxZoom)
            {
                config.suppressWarning();
                return 0;
            }

            if (value < settings.minZoomLevel || value > settings.maxZoomLevel)
                return settings.minZoomLevel;
        }
    }
];

class ViewerCore
{
    constructor (element, options, publicInstance)
    {
        this.parentObject = element;
        this.publicInstance = publicInstance;

        // Things that cannot be changed because of the way they are used by the script
        // Many of these are declared with arbitrary values that are changed later on
        this.viewerState = {
            currentPageIndices: [0],    // The visible pages in the viewport
            activePageIndex: 0,         // The current 'active' page in the viewport
            horizontalOffset: 0,        // Distance from the center of the diva element to the top of the current page
            horizontalPadding: 0,       // Either the fixed padding or adaptive padding
            ID: null,                   // The prefix of the IDs of the elements (usually 1-diva-)
            initialKeyScroll: false,    // Holds the initial state of enableKeyScroll
            initialSpaceScroll: false,  // Holds the initial state of enableSpaceScroll
            innerElement: null,         // The native .diva-outer DOM object
            innerObject: {},            // document.getElementById(settings.ID + 'inner'), for selecting the .diva-inner element
            isActiveDiva: true,         // In the case that multiple diva panes exist on the same page, this should have events funneled to it.
            isScrollable: true,         // Used in enable/disableScrollable public methods
            isZooming: false,           // Flag to keep track of whether zooming is still in progress, for handleZoom
            loaded: false,              // A flag for when everything is loaded and ready to go.
            manifest: null,
            mobileWebkit: false,        // Checks if the user is on a touch device (iPad/iPod/iPhone/Android)
            numPages: 0,                // Number of pages in the array
            oldZoomLevel: -1,           // Holds the previous zoom level after zooming in or out
            options: options,
            outerElement: null,         // The native .diva-outer DOM object
            outerObject: {},            // document.getElementById(settings.ID + 'outer'), for selecting the .diva-outer element
            pageOverlays: new _page_overlay_manager__WEBPACK_IMPORTED_MODULE_6__["default"](),
            pageTools: [],              // The plugins which are enabled as page tools
            parentObject: this.parentObject, // JQuery object referencing the parent element
            pendingManifestRequest: null, // Reference to the xhr request retrieving the manifest. Used to cancel the request on destroy()
            pluginInstances: [],                // Filled with the enabled plugins from the registry
            renderer: null,
            resizeTimer: -1,            // Holds the ID of the timeout used when resizing the window (for clearing)
            scrollbarWidth: 0,          // Set to the actual scrollbar width in init()
            selector: '',               // Uses the generated ID prefix to easily select elements
            throbberTimeoutID: -1,      // Holds the ID of the throbber loading timeout
            toolbar: null,              // Holds an object with some toolbar-related functions
            verticalOffset: 0,          // Distance from the center of the diva element to the left side of the current page
            verticalPadding: 0,         // Either the fixed padding or adaptive padding
            viewHandler: null,
            viewport: null,             // Object caching the viewport dimensions
            viewportElement: null,
            viewportObject: null,
            zoomDuration: 400
        };

        this.settings = Object(_settings_view__WEBPACK_IMPORTED_MODULE_9__["default"])([options, this.viewerState]);

        // Generate an ID that can be used as a prefix for all the other IDs
        const idNumber = generateId();
        this.viewerState.ID = 'diva-' + idNumber + '-';
        this.viewerState.selector = this.settings.ID;

        // Aliases for compatibility
        Object.defineProperties(this.settings, {
            // Height of the document viewer pane
            panelHeight: {
                get: () =>
                {
                    return this.viewerState.viewport.height;
                }
            },
            // Width of the document viewer pane
            panelWidth: {
                get: () =>
                {
                    return this.viewerState.viewport.width;
                }
            }
        });

        this.optionsValidator = new _validation_runner__WEBPACK_IMPORTED_MODULE_10__["default"]({
            additionalProperties: [
                {
                    key: 'manifest',
                    get: () =>
                    {
                        return this.viewerState.manifest;
                    }
                }
            ],

            validations: optionsValidations
        });

        this.viewerState.scrollbarWidth = Object(_utils_get_scrollbar_width__WEBPACK_IMPORTED_MODULE_1__["default"])();

        // If window.orientation is defined, then it's probably mobileWebkit
        this.viewerState.mobileWebkit = window.orientation !== undefined;

        if (options.hashParamSuffix === null)
        {
            // Omit the suffix from the first instance
            if (idNumber === 1)
                options.hashParamSuffix = '';
            else
                options.hashParamSuffix = idNumber + '';
        }

        // Create the inner and outer panels
        const innerElem = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('inner', { class: 'diva-inner' }));
        const viewportElem = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('viewport'), innerElem);
        const outerElem = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('outer'),
            viewportElem,
            Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('throbber'),
                [
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube1' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube2' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube3' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube4' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube5' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube6' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube7' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube8' }),
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', { class: 'cube cube9' }),
                ]
            ));

        this.viewerState.innerElement = innerElem;
        this.viewerState.viewportElement = viewportElem;
        this.viewerState.outerElement = outerElem;

        this.viewerState.innerObject = innerElem;
        this.viewerState.viewportObject = viewportElem;
        this.viewerState.outerObject = outerElem;

        this.settings.parentObject.append(outerElem);

        this.viewerState.viewport = new _viewport__WEBPACK_IMPORTED_MODULE_11__["default"](this.viewerState.viewportElement, {
            intersectionTolerance: this.settings.viewportMargin
        });

        this.boundScrollFunction = this.scrollFunction.bind(this);
        this.boundEscapeListener = this.escapeListener.bind(this);

        // Do all the plugin initialisation
        this.initPlugins();
        this.handleEvents();

        // Show the throbber while waiting for the manifest to load
        this.showThrobber();
    }

    isValidOption (key, value)
    {
        return this.optionsValidator.isValid(key, value, this.viewerState.options);
    }

    elemAttrs (ident, base)
    {
        const attrs = {
            id: this.settings.ID + ident,
            class: 'diva-' + ident
        };

        if (base)
            return Object.assign(attrs, base);
        else
            return attrs;
    }

    getPageData (pageIndex, attribute)
    {
        return this.settings.manifest.pages[pageIndex].d[this.settings.zoomLevel][attribute];
    }

    // Reset some settings and empty the viewport
    clearViewer ()
    {
        this.viewerState.viewport.top = 0;

        // Clear all the timeouts to prevent undesired pages from loading
        clearTimeout(this.viewerState.resizeTimer);
    }

    hasChangedOption (options, key)
    {
        return key in options && options[key] !== this.settings[key];
    }

    //Shortcut for closing fullscreen with the escape key
    escapeListener (e)
    {
        if (e.keyCode === 27)
        {
            this.publicInstance.leaveFullscreenMode();
        }
    }

    /**
     * Update settings to match the specified options. Load the viewer,
     * fire appropriate events for changed options.
     */
    reloadViewer (newOptions)
    {
        const queuedEvents = [];

        newOptions = this.optionsValidator.getValidatedOptions(this.settings, newOptions);

        // Set the zoom level if valid and fire a ZoomLevelDidChange event
        if (this.hasChangedOption(newOptions, 'zoomLevel'))
        {
            this.viewerState.oldZoomLevel = this.settings.zoomLevel;
            this.viewerState.options.zoomLevel = newOptions.zoomLevel;
            queuedEvents.push(["ZoomLevelDidChange", newOptions.zoomLevel]);
        }

        // Set the pages per row if valid and fire an event
        if (this.hasChangedOption(newOptions, 'pagesPerRow'))
        {
            this.viewerState.options.pagesPerRow = newOptions.pagesPerRow;
            queuedEvents.push(["GridRowNumberDidChange", newOptions.pagesPerRow]);
        }

        // Update verticallyOriented (no event fired)
        if (this.hasChangedOption(newOptions, 'verticallyOriented'))
            this.viewerState.options.verticallyOriented = newOptions.verticallyOriented;

        // Show/Hide non-paged pages
        if (this.hasChangedOption(newOptions, 'showNonPagedPages'))
        {
            this.viewerState.options.showNonPagedPages = newOptions.showNonPagedPages;
        }

        // Update page position (no event fired here)
        if ('goDirectlyTo' in newOptions)
        {
            this.viewerState.options.goDirectlyTo = newOptions.goDirectlyTo;

            if ('verticalOffset' in newOptions)
                this.viewerState.verticalOffset = newOptions.verticalOffset;

            if ('horizontalOffset' in newOptions)
                this.viewerState.horizontalOffset = newOptions.horizontalOffset;
        }
        else
        {
            // Otherwise the default is to remain on the current page
            this.viewerState.options.goDirectlyTo = this.settings.activePageIndex;
        }

        if (this.hasChangedOption(newOptions, 'inGrid') || this.hasChangedOption(newOptions, 'inBookLayout'))
        {
            if ('inGrid' in newOptions)
                this.viewerState.options.inGrid = newOptions.inGrid;

            if ('inBookLayout' in newOptions)
                this.viewerState.options.inBookLayout = newOptions.inBookLayout;

            queuedEvents.push(["ViewDidSwitch", this.settings.inGrid]);
        }

        // Note: prepareModeChange() depends on inGrid and the vertical/horizontalOffset (for now)
        if (this.hasChangedOption(newOptions, 'inFullscreen'))
        {
            this.viewerState.options.inFullscreen = newOptions.inFullscreen;
            this.prepareModeChange(newOptions);
            queuedEvents.push(["ModeDidSwitch", this.settings.inFullscreen]);
        }

        this.clearViewer();
        this.updateViewHandlerAndRendering();

        if (this.viewerState.renderer)
        {
            // TODO: The usage of padding variables is still really
            // messy and inconsistent
            const rendererConfig = {
                pageLayouts: Object(_page_layouts__WEBPACK_IMPORTED_MODULE_8__["default"])(this.settings),
                padding: this.getPadding(),
                maxZoomLevel: this.settings.inGrid ? null : this.viewerState.manifest.maxZoom,
                verticallyOriented: this.settings.verticallyOriented || this.settings.inGrid,
            };

            const viewportPosition = {
                zoomLevel: this.settings.inGrid ? null : this.settings.zoomLevel,
                anchorPage: this.settings.goDirectlyTo,
                verticalOffset: this.viewerState.verticalOffset,
                horizontalOffset: this.viewerState.horizontalOffset
            };

            const sourceProvider = this.getCurrentSourceProvider();

            if (debug.enabled)
            {
                const serialized = Object.keys(rendererConfig)
                    .filter(function (key)
                    {
                        // Too long
                        return key !== 'pageLayouts' && key !== 'padding';
                    })
                    .map(function (key)
                    {
                        const value = rendererConfig[key];
                        return key + ': ' + JSON.stringify(value);
                    })
                    .join(', ');

                debug('reload with %s', serialized);
            }

            this.viewerState.renderer.load(rendererConfig, viewportPosition, sourceProvider);
        }

        queuedEvents.forEach( (params) =>
        {
            this.publish.apply(this, params);
        });

        return true;
    }

    // Handles switching in and out of fullscreen mode
    prepareModeChange (options)
    {
        // Toggle the classes
        const changeClass = options.inFullscreen ? 'add' : 'remove';
        this.viewerState.outerObject.classList[changeClass]('diva-fullscreen');
        document.body.classList[changeClass]('diva-hide-scrollbar');
        this.settings.parentObject.classList[changeClass]('diva-full-width');

        // Adjust Diva's internal panel size, keeping the old values
        const storedHeight = this.settings.panelHeight;
        const storedWidth = this.settings.panelWidth;
        this.viewerState.viewport.invalidate();

        // If this isn't the original load, the offsets matter, and the position isn't being changed...
        if (!this.viewerState.loaded && !this.settings.inGrid && !('verticalOffset' in options))
        {
            //get the updated panel size
            const newHeight = this.settings.panelHeight;
            const newWidth = this.settings.panelWidth;

            //and re-center the new panel on the same point
            this.viewerState.verticalOffset += ((storedHeight - newHeight) / 2);
            this.viewerState.horizontalOffset += ((storedWidth - newWidth) / 2);
        }

        //turn on/off escape key listener
        if (options.inFullscreen)
            document.addEventListener('keyup', this.boundEscapeListener);
        else
            document.removeEventListener('keyup', this.boundEscapeListener);
    }

    // Update the view handler and the view rendering for the current view
    updateViewHandlerAndRendering ()
    {
        const Handler = this.settings.inGrid ? _grid_handler__WEBPACK_IMPORTED_MODULE_5__["default"] : _document_handler__WEBPACK_IMPORTED_MODULE_4__["default"];

        if (this.viewerState.viewHandler && !(this.viewerState.viewHandler instanceof Handler))
        {
            this.viewerState.viewHandler.destroy();
            this.viewerState.viewHandler = null;
        }

        if (!this.viewerState.viewHandler)
            this.viewerState.viewHandler = new Handler(this);

        if (!this.viewerState.renderer)
            this.initializeRenderer();
    }

    // TODO: This could probably be done upon ViewerCore initialization
    initializeRenderer ()
    {
        const compatErrors = _renderer__WEBPACK_IMPORTED_MODULE_7__["default"].getCompatibilityErrors();

        if (compatErrors)
        {
            this.showError(compatErrors);
        }
        else
        {
            const options = {
                viewport: this.viewerState.viewport,
                outerElement: this.viewerState.outerElement,
                innerElement: this.viewerState.innerElement,
                settings: this.settings
            };

            const hooks = {
                onViewWillLoad: () =>
                {
                    this.viewerState.viewHandler.onViewWillLoad();
                },
                onViewDidLoad: () =>
                {
                    this.updatePageOverlays();
                    this.viewerState.viewHandler.onViewDidLoad();
                },
                onViewDidUpdate: (pages, targetPage) =>
                {
                    this.updatePageOverlays();
                    this.viewerState.viewHandler.onViewDidUpdate(pages, targetPage);
                },
                onViewDidTransition: () =>
                {
                    this.updatePageOverlays();
                },
                onPageWillLoad: (pageIndex) =>
                {
                    this.publish('PageWillLoad', pageIndex);
                },
                onZoomLevelWillChange: (zoomLevel) =>
                {
                    this.publish('ZoomLevelWillChange', zoomLevel);
                }
            };

            this.viewerState.renderer = new _renderer__WEBPACK_IMPORTED_MODULE_7__["default"](options, hooks);
        }
    }

    getCurrentSourceProvider ()
    {
        if (this.settings.inGrid)
        {
            const gridSourceProvider = {
                getAllZoomLevelsForPage: (page) =>
                {
                    return [gridSourceProvider.getBestZoomLevelForPage(page)];
                },
                getBestZoomLevelForPage: (page) =>
                {
                    const url = this.settings.manifest.getPageImageURL(page.index, {
                        width: page.dimensions.width
                    });

                    return {
                        zoomLevel: 1, // FIXME
                        rows: 1,
                        cols: 1,
                        tiles: [{
                            url: url,
                            zoomLevel: 1, // FIXME
                            row: 0,
                            col: 0,
                            dimensions: page.dimensions,
                            offset: {
                                top: 0,
                                left: 0
                            }
                        }]
                    };
                }
            };

            return gridSourceProvider;
        }

        const tileDimensions = {
            width: this.settings.tileWidth,
            height: this.settings.tileHeight
        };

        return {
            getBestZoomLevelForPage: (page) =>
            {
                return this.settings.manifest.getPageImageTiles(page.index, Math.ceil(this.settings.zoomLevel), tileDimensions);
            },
            getAllZoomLevelsForPage: (page) =>
            {
                const levels = [];
                const levelCount = this.viewerState.manifest.maxZoom;

                for (let level=0; level <= levelCount; level++)
                {
                    levels.push(this.settings.manifest.getPageImageTiles(page.index, level, tileDimensions));
                }

                levels.reverse();

                return levels;
            }
        };
    }

    getPadding ()
    {
        let topPadding, leftPadding;
        let docVPadding, docHPadding;

        if (this.settings.inGrid)
        {
            docVPadding = this.settings.fixedPadding;
            topPadding = leftPadding = docHPadding = 0;
        }
        else
        {
            topPadding = this.settings.verticallyOriented ? this.viewerState.verticalPadding : 0;
            leftPadding = this.settings.verticallyOriented ? 0 : this.viewerState.horizontalPadding;

            docVPadding = this.settings.verticallyOriented ? 0 : this.viewerState.verticalPadding;
            docHPadding = this.settings.verticallyOriented ? this.viewerState.horizontalPadding : 0;
        }

        return {
            document: {
                top: docVPadding,
                bottom: docVPadding,
                left: docHPadding,
                right: docHPadding
            },
            page: {
                top: topPadding,
                bottom: 0,
                left: leftPadding,
                right: 0
            }
        };
    }

    updatePageOverlays ()
    {
        this.viewerState.pageOverlays.updateOverlays(
            this.viewerState.renderer.getRenderedPages()
        );
    }

    // Called to handle any zoom level
    handleZoom (newZoomLevel, focalPoint)
    {
        // If the zoom level provided is invalid, return false
        if (!this.isValidOption('zoomLevel', newZoomLevel))
            return false;

        // While zooming, don't update scroll offsets based on the scaled version of diva-inner
        this.viewerState.viewportObject.removeEventListener('scroll', this.boundScrollFunction);

        // If no focal point was given, zoom on the center of the viewport
        if (!focalPoint)
        {
            const viewport = this.viewerState.viewport;
            const currentRegion = this.viewerState.renderer.layout.getPageRegion(this.settings.activePageIndex);

            focalPoint = {
                anchorPage: this.settings.activePageIndex,
                offset: {
                    left: (viewport.width / 2) - (currentRegion.left - viewport.left),
                    top: (viewport.height / 2) - (currentRegion.top - viewport.top)
                }
            };
        }

        const pageRegion = this.viewerState.renderer.layout.getPageRegion(focalPoint.anchorPage);

        // calculate distance from cursor coordinates to center of viewport
        const focalXToCenter = (pageRegion.left + focalPoint.offset.left) -
            (this.settings.viewport.left + (this.settings.viewport.width / 2));
        const focalYToCenter = (pageRegion.top + focalPoint.offset.top) -
            (this.settings.viewport.top + (this.settings.viewport.height / 2));

        const getPositionForZoomLevel =  (zoomLevel, initZoom) =>
        {
            const zoomRatio = Math.pow(2, zoomLevel - initZoom);

            //TODO(jeromepl): Calculate position from page top left to viewport top left
            // calculate horizontal/verticalOffset: distance from viewport center to page upper left corner
            const horizontalOffset = (focalPoint.offset.left * zoomRatio) - focalXToCenter;
            const verticalOffset = (focalPoint.offset.top * zoomRatio) - focalYToCenter;

            return {
                zoomLevel: zoomLevel,
                anchorPage: focalPoint.anchorPage,
                verticalOffset: verticalOffset,
                horizontalOffset: horizontalOffset
            };
        };

        this.viewerState.options.zoomLevel = newZoomLevel;
        let initialZoomLevel = this.viewerState.oldZoomLevel;
        this.viewerState.oldZoomLevel = this.settings.zoomLevel;
        const endPosition = getPositionForZoomLevel(newZoomLevel, initialZoomLevel);
        this.viewerState.options.goDirectlyTo = endPosition.anchorPage;
        this.viewerState.verticalOffset = endPosition.verticalOffset;
        this.viewerState.horizontalOffset = endPosition.horizontalOffset;

        this.viewerState.renderer.transitionViewportPosition({
            duration: this.settings.zoomDuration,
            parameters: {
                zoomLevel: {
                    from: initialZoomLevel,
                    to: newZoomLevel
                }
            },
            getPosition: (parameters) =>
            {
                return getPositionForZoomLevel(parameters.zoomLevel, initialZoomLevel);
            },
            onEnd: (info) =>
            {
                this.viewerState.viewportObject.addEventListener('scroll', this.boundScrollFunction);

                if (info.interrupted)
                    this.viewerState.oldZoomLevel = newZoomLevel;
            }
        });

        // Deactivate zoom buttons while zooming
        let zoomInButton = document.getElementById(this.settings.selector + 'zoom-in-button');
        let zoomOutButton = document.getElementById(this.settings.selector + 'zoom-out-button');
        zoomInButton.disabled = true;
        zoomOutButton.disabled = true;
        setTimeout(() =>
        {
            zoomInButton.disabled = false;
            zoomOutButton.disabled = false;
        }, this.settings.zoomDuration);

        // Send off the zoom level did change event.
        this.publish("ZoomLevelDidChange", newZoomLevel);

        return true;
    }

    /*
     Gets the Y-offset for a specific point on a specific page
     Acceptable values for "anchor":
     "top" (default) - will anchor top of the page to the top of the diva-outer element
     "bottom" - top, s/top/bottom
     "center" - will center the page on the diva element
     Returned value will be the distance from the center of the diva-outer element to the top of the current page for the specified anchor
     */
    getYOffset (pageIndex, anchor)
    {
        let pidx = (typeof(pageIndex) === "undefined" ? this.settings.activePageIndex : pageIndex);

        if (anchor === "center" || anchor === "centre") //how you can tell an American coded this
        {
            return parseInt(this.getPageData(pidx, "h") / 2, 10);
        }
        else if (anchor === "bottom")
        {
            return parseInt(this.getPageData(pidx, "h") - this.settings.panelHeight / 2, 10);
        }
        else
        {
            return parseInt(this.settings.panelHeight / 2, 10);
        }
    }

    //Same as getYOffset with "left" and "right" as acceptable values instead of "top" and "bottom"
    getXOffset (pageIndex, anchor)
    {
        let pidx = (typeof(pageIndex) === "undefined" ? this.settings.activePageIndex : pageIndex);

        if (anchor === "left")
        {
            return parseInt(this.settings.panelWidth / 2, 10);
        }
        else if (anchor === "right")
        {
            return parseInt(this.getPageData(pidx, "w") - this.settings.panelWidth / 2, 10);
        }
        else
        {
            return parseInt(this.getPageData(pidx, "w") / 2, 10);
        }
    }

    // updates panelHeight/panelWidth on resize
    updatePanelSize ()
    {
        this.viewerState.viewport.invalidate();

        // FIXME(wabain): This should really only be called after initial load
        if (this.viewerState.renderer)
        {
            this.updateOffsets();
            this.viewerState.renderer.goto(this.settings.activePageIndex, this.viewerState.verticalOffset, this.viewerState.horizontalOffset);
        }

        return true;
    }

    updateOffsets ()
    {
        const pageOffset = this.viewerState.renderer.layout.getPageToViewportCenterOffset(this.settings.activePageIndex, this.viewerState.viewport);

        if (pageOffset)
        {
            this.viewerState.horizontalOffset = pageOffset.x;
            this.viewerState.verticalOffset = pageOffset.y;
        }
    }

    // Bind mouse events (drag to scroll, double-click)
    bindMouseEvents ()
    {
        // Set drag scroll on the viewport object
        this.viewerState.viewportObject.classList.add('dragscroll');

        _gesture_events__WEBPACK_IMPORTED_MODULE_2__["default"].onDoubleClick(this.viewerState.viewportObject, (event, coords) =>
        {
            debug('Double click at %s, %s', coords.left, coords.top);
            this.viewerState.viewHandler.onDoubleClick(event, coords);
        });
    }

    onResize ()
    {
        this.updatePanelSize();
        // Cancel any previously-set resize timeouts
        clearTimeout(this.viewerState.resizeTimer);

        this.viewerState.resizeTimer = setTimeout( () =>
        {
            const pageOffset = this.viewerState.renderer.layout.getPageToViewportCenterOffset(this.settings.activePageIndex, this.viewerState.viewport);

            if (pageOffset)
            {
                this.reloadViewer({
                    goDirectlyTo: this.settings.activePageIndex,
                    verticalOffset: pageOffset.y,
                    horizontalOffset: pageOffset.x
                });
            }
            else
            {
                this.reloadViewer({
                    goDirectlyTo: this.settings.activePageIndex
                });
            }
        }, 200);
    }

    // Bind touch and orientation change events
    bindTouchEvents ()
    {
        // Block the user from moving the window only if it's not integrated
        if (this.settings.blockMobileMove)
        {
            document.body.addEventListener('touchmove', (event) =>
            {
                const e = event.originalEvent;
                e.preventDefault();

                return false;
            });
        }

        // Touch events for swiping in the viewport to scroll pages
        // this.viewerState.viewportObject.addEventListener('scroll', this.scrollFunction.bind(this));

        _gesture_events__WEBPACK_IMPORTED_MODULE_2__["default"].onPinch(this.viewerState.viewportObject, function (event, coords, start, end)
        {
            debug('Pinch %s at %s, %s', end - start, coords.left, coords.top);
            this.viewerState.viewHandler.onPinch(event, coords, start, end);
        });

        _gesture_events__WEBPACK_IMPORTED_MODULE_2__["default"].onDoubleTap(this.viewerState.viewportObject, function (event, coords)
        {
            debug('Double tap at %s, %s', coords.left, coords.top);
            this.viewerState.viewHandler.onDoubleClick(event, coords);
        });
    }

    // Handle the scroll
    scrollFunction ()
    {
        const previousTopScroll = this.viewerState.viewport.top;
        const previousLeftScroll = this.viewerState.viewport.left;

        let direction;

        this.viewerState.viewport.invalidate();

        const newScrollTop = this.viewerState.viewport.top;
        const newScrollLeft = this.viewerState.viewport.left;

        if (this.settings.verticallyOriented || this.settings.inGrid)
            direction = newScrollTop - previousTopScroll;
        else
            direction = newScrollLeft - previousLeftScroll;

        this.viewerState.renderer.adjust();

        const primaryScroll = (this.settings.verticallyOriented || this.settings.inGrid) ? newScrollTop : newScrollLeft;

        this.publish("ViewerDidScroll", primaryScroll);

        if (direction > 0)
        {
            this.publish("ViewerDidScrollDown", primaryScroll);
        }
        else if (direction < 0)
        {
            this.publish("ViewerDidScrollUp", primaryScroll);
        }

        this.updateOffsets();
    }

    // Binds most of the event handlers (some more in createToolbar)
    handleEvents ()
    {
        // Change the cursor for dragging
        this.viewerState.innerObject.addEventListener('mousedown', () =>
        {
            this.viewerState.innerObject.classList.add('diva-grabbing');
        });

        this.viewerState.innerObject.addEventListener('mouseup', () =>
        {
            this.viewerState.innerObject.classList.remove('diva-grabbing');
        });

        this.bindMouseEvents();
        this.viewerState.viewportObject.addEventListener('scroll', this.boundScrollFunction);

        const upArrowKey = 38, downArrowKey = 40, leftArrowKey = 37, rightArrowKey = 39, spaceKey = 32, pageUpKey = 33, pageDownKey = 34, homeKey = 36, endKey = 35;

        // Catch the key presses in document
        document.addEventListener('keydown.diva', (event) =>
        {
            if (!this.viewerState.isActiveDiva)
                return true;

            // Space or page down - go to the next page
            if ((this.settings.enableSpaceScroll && !event.shiftKey && event.keyCode === spaceKey) || (this.settings.enableKeyScroll && event.keyCode === pageDownKey))
            {
                this.viewerState.viewport.top += this.settings.panelHeight;
                return false;
            }
            else if (!this.settings.enableSpaceScroll && event.keyCode === spaceKey)
            {
                event.preventDefault();
            }

            if (this.settings.enableKeyScroll)
            {
                // Don't steal keyboard shortcuts (metaKey = command [OS X], super [Win/Linux])
                if (event.shiftKey || event.ctrlKey || event.metaKey)
                    return true;

                switch (event.keyCode)
                {
                    case pageUpKey:
                        // Page up - go to the previous page
                        this.viewerState.viewport.top -= this.settings.panelHeight;
                        return false;

                    case upArrowKey:
                        // Up arrow - scroll up
                        this.viewerState.viewport.top -= this.settings.arrowScrollAmount;
                        return false;

                    case downArrowKey:
                        // Down arrow - scroll down
                        this.viewerState.viewport.top += this.settings.arrowScrollAmount;
                        return false;

                    case leftArrowKey:
                        // Left arrow - scroll left
                        this.viewerState.viewport.left -= this.settings.arrowScrollAmount;
                        return false;

                    case rightArrowKey:
                        // Right arrow - scroll right
                        this.viewerState.viewport.left += this.settings.arrowScrollAmount;
                        return false;

                    case homeKey:
                        // Home key - go to the beginning of the document
                        this.viewerState.viewport.top = 0;
                        return false;

                    case endKey:
                        // End key - go to the end of the document
                        // Count on the viewport coordinate value being normalized
                        if (this.settings.verticallyOriented)
                            this.viewerState.viewport.top = Infinity;
                        else
                            this.viewerState.viewport.left = Infinity;

                        return false;

                    default:
                        return true;
                }
            }
            return true;
        });

        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.subscribe('ViewerDidTerminate', function()
        {
            document.removeEventListener('keydown.diva');
        }, this.settings.ID);

        // this.bindTouchEvents();

        // Handle window resizing events
        window.addEventListener('resize', this.onResize.bind(this), false);

        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.subscribe('ViewerDidTerminate', function()
        {
            window.removeEventListener('resize', this.onResize, false);
        }, this.settings.ID);

        // Handle orientation change separately
        if ('onorientationchange' in window)
        {
            window.addEventListener('orientationchange', this.onResize, false);

            _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.subscribe('ViewerDidTerminate', function()
            {
                window.removeEventListener('orientationchange', this.onResize, false);
            }, this.settings.ID);
        }

        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.subscribe('PanelSizeDidChange', this.updatePanelSize, this.settings.ID);

        // Clear page and resize timeouts when the viewer is destroyed
        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.subscribe('ViewerDidTerminate', () =>
        {
            if (this.viewerState.renderer)
                this.viewerState.renderer.destroy();

            clearTimeout(this.viewerState.resizeTimer);
        }, this.settings.ID);
    }

    initPlugins ()
    {
        if (!this.settings.hasOwnProperty('plugins'))
            return null;

        this.viewerState.pluginInstances = this.settings.plugins.map( (plugin) =>
        {
            const p = new plugin(this);

            if (p.isPageTool)
                this.viewerState.pageTools.push(p);

            return p;
        });
    }

    showThrobber ()
    {
        this.hideThrobber();

        this.viewerState.throbberTimeoutID = setTimeout( () =>
        {
            let thb = document.getElementById(this.settings.selector + 'throbber');
            if (thb) thb.style.display = 'block';
        }, this.settings.throbberTimeout);
    }

    hideThrobber ()
    {
        // Clear the timeout, if it hasn't executed yet
        clearTimeout(this.viewerState.throbberTimeoutID);

        let thb = document.getElementById(this.settings.selector + 'throbber');
        // Hide the throbber if it has already executed
        if (thb) thb.style.display = 'none';
    }

    showError (message)
    {
        const errorElement = Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('error'), [
            Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('button', this.elemAttrs('error-close', {'aria-label': 'Close dialog'})),
            Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('p',
                Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('strong', 'Error')
            ),
            Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', message)
        ]);

        this.viewerState.outerObject.appendChild(errorElement);

        // Bind dialog close button
        document.getElementById(this.settings.selector + 'error-close').addEventListener('click', () =>
        {
            errorElement.parentNode.removeChild(errorElement);
        });
    }

    setManifest (manifest, loadOptions)
    {
        this.viewerState.manifest = manifest;

        this.hideThrobber();

        // Convenience value
        this.viewerState.numPages = this.settings.manifest.pages.length;

        this.optionsValidator.validate(this.viewerState.options);

        this.publish('NumberOfPagesDidChange', this.settings.numPages);

        // Calculate the horizontal and vertical inter-page padding based on the dimensions of the average zoom level
        if (this.settings.adaptivePadding > 0)
        {
            const z = Math.floor((this.settings.minZoomLevel + this.settings.maxZoomLevel) / 2);
            this.viewerState.horizontalPadding = parseInt(this.settings.manifest.getAverageWidth(z) * this.settings.adaptivePadding, 10);
            this.viewerState.verticalPadding = parseInt(this.settings.manifest.getAverageHeight(z) * this.settings.adaptivePadding, 10);
        }
        else
        {
            // It's less than or equal to 0; use fixedPadding instead
            this.viewerState.horizontalPadding = this.settings.fixedPadding;
            this.viewerState.verticalPadding = this.settings.fixedPadding;
        }

        // Make sure the vertical padding is at least 40, if plugin icons are enabled
        if (this.viewerState.pageTools.length)
        {
            this.viewerState.verticalPadding = Math.max(40, this.viewerState.verticalPadding);
        }

        // If we detect a viewingHint of 'paged' in the manifest or sequence, enable book view by default
        if (this.settings.manifest.paged)
        {
            this.viewerState.options.inBookLayout = true;
        }

        // Plugin setup hooks should be bound to the ObjectDidLoad event
        this.publish('ObjectDidLoad', this.settings);

        // Adjust the document panel dimensions
        this.updatePanelSize();

        let needsXCoord, needsYCoord;

        let anchoredVertically = false;
        let anchoredHorizontally = false;

        // NB: `==` here will check both null and undefined
        if (loadOptions.goDirectlyTo == null)
        {
            loadOptions.goDirectlyTo = this.settings.goDirectlyTo;
            needsXCoord = needsYCoord = true;
        }
        else
        {
            needsXCoord = loadOptions.horizontalOffset == null || isNaN(loadOptions.horizontalOffset);
            needsYCoord = loadOptions.verticalOffset == null || isNaN(loadOptions.verticalOffset);
        }

        // Set default values for the horizontal and vertical offsets
        if (needsXCoord)
        {
            // FIXME: What if inBookLayout/verticallyOriented is changed by loadOptions?
            if (loadOptions.goDirectlyTo === 0 && this.settings.inBookLayout && this.settings.verticallyOriented)
            {
                // if in book layout, center the first opening by default
                loadOptions.horizontalOffset = this.viewerState.horizontalPadding;
            }
            else
            {
                anchoredHorizontally = true;
                loadOptions.horizontalOffset = this.getXOffset(loadOptions.goDirectlyTo, "center");
            }
        }

        if (needsYCoord)
        {
            anchoredVertically = true;
            loadOptions.verticalOffset = this.getYOffset(loadOptions.goDirectlyTo, "top");
        }

        this.reloadViewer(loadOptions);

        //prep dimensions one last time now that pages have loaded
        this.updatePanelSize();

        if (this.settings.enableAutoTitle)
        {
            let title = document.getElementById(this.settings.selector + 'title');

            if (title)
            {
                title.innerHTML = this.settings.manifest.itemTitle;
            }
            else
            {
                this.settings.parentObject.insertBefore(
                    Object(_utils_elt__WEBPACK_IMPORTED_MODULE_0__["elt"])('div', this.elemAttrs('title'), [this.settings.manifest.itemTitle]),
                    this.settings.parentObject.firstChild
                );
            }
        }

        // FIXME: This is a hack to ensure that the outerElement scrollbars are taken into account
        if (this.settings.verticallyOriented)
            this.viewerState.innerElement.style.minWidth = this.settings.panelWidth + 'px';
        else
            this.viewerState.innerElement.style.minHeight = this.settings.panelHeight + 'px';

        // FIXME: If the page was supposed to be positioned relative to the viewport we need to
        // recalculate it to take into account the scrollbars
        if (anchoredVertically || anchoredHorizontally)
        {
            if (anchoredVertically)
                this.viewerState.verticalOffset = this.getYOffset(this.settings.activePageIndex, "top");

            if (anchoredHorizontally)
                this.viewerState.horizontalOffset = this.getXOffset(this.settings.activePageIndex, "center");

            this.viewerState.renderer.goto(this.settings.activePageIndex, this.viewerState.verticalOffset, this.viewerState.horizontalOffset);
        }

        // signal that everything should be set up and ready to go.
        this.viewerState.loaded = true;

        this.publish("ViewerDidLoad", this.settings);
    }

    publish (event)
    {
        const args = Array.prototype.slice.call(arguments, 1);
        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.publish(event, args, this.publicInstance);
    }

    getSettings ()
    {
        return this.settings;
    }

    // Temporary accessor for the state of the viewer core
    // TODO: Replace this with a more restricted view of whatever needs
    // be exposed through settings for backwards compat
    getInternalState ()
    {
        return this.viewerState;
    }

    getPublicInstance ()
    {
        return this.publicInstance;
    }

    getPageTools ()
    {
        return this.viewerState.pageTools;
    }

    getCurrentLayout ()
    {
        return this.viewerState.renderer ? this.viewerState.renderer.layout : null;
    }

    /** Get a copy of the current viewport dimensions */
    getViewport ()
    {
        const viewport = this.viewerState.viewport;

        return {
            top: viewport.top,
            left: viewport.left,
            bottom: viewport.bottom,
            right: viewport.right,

            width: viewport.width,
            height: viewport.height
        };
    }

    addPageOverlay (overlay)
    {
        this.viewerState.pageOverlays.addOverlay(overlay);
    }

    removePageOverlay (overlay)
    {
        this.viewerState.pageOverlays.removeOverlay(overlay);
    }

    getPageRegion (pageIndex, options)
    {
        const layout = this.viewerState.renderer.layout;
        const region = layout.getPageRegion(pageIndex, options);

        if (options && options.incorporateViewport)
        {
            const secondaryDim = this.settings.verticallyOriented ? 'width' : 'height';

            if (this.viewerState.viewport[secondaryDim] > layout.dimensions[secondaryDim])
            {
                const docOffset = (this.viewerState.viewport[secondaryDim] - layout.dimensions[secondaryDim]) / 2;

                if (this.settings.verticallyOriented)
                {
                    return {
                        top: region.top,
                        bottom: region.bottom,

                        left: region.left + docOffset,
                        right: region.right + docOffset
                    };
                }
                else
                {
                    return {
                        top: region.top + docOffset,
                        bottom: region.bottom + docOffset,

                        left: region.left,
                        right: region.right
                    };
                }
            }
        }

        return region;
    }

    getPagePositionAtViewportOffset (coords)
    {
        const docCoords = {
            left: coords.left + this.viewerState.viewport.left,
            top: coords.top + this.viewerState.viewport.top
        };

        const renderedPages = this.viewerState.renderer.getRenderedPages();
        const pageCount = renderedPages.length;

        // Find the page on which the coords occur
        for (let i=0; i < pageCount; i++)
        {
            const pageIndex = renderedPages[i];
            const region = this.viewerState.renderer.layout.getPageRegion(pageIndex);

            if (region.left <= docCoords.left && region.right >= docCoords.left &&
                region.top <= docCoords.top && region.bottom >= docCoords.top)
            {
                return {
                    anchorPage: pageIndex,
                    offset: {
                        left: docCoords.left - region.left,
                        top: docCoords.top - region.top
                    }
                };
            }
        }

        // Fall back to current page
        // FIXME: Would be better to use the closest page or something
        const currentRegion = this.viewerState.renderer.layout.getPageRegion(this.settings.activePageIndex);

        return {
            anchorPage: this.settings.activePageIndex,
            offset: {
                left: docCoords.left - currentRegion.left,
                top: docCoords.top - currentRegion.top
            }
        };
    }

    // setManifest (manifest, loadOptions)
    // {
    //     setManifest(manifest, loadOptions || {});
    // }

    /**
     * Set the current page to the given index, firing VisiblePageDidChange
     *
     * @param pageIndex
     */
    setCurrentPages (activePage, visiblePages)
    {
        if (!arraysEqual(this.viewerState.currentPageIndices, visiblePages))
        {
            this.viewerState.currentPageIndices = visiblePages;
            if (this.viewerState.activePageIndex !== activePage)
            {
                this.viewerState.activePageIndex = activePage;
                this.publish("ActivePageDidChange", activePage);
            }
            this.publish("VisiblePageDidChange", visiblePages);

            // Publish an event if the page we're switching to has other images.
            if (this.viewerState.manifest.pages[activePage].otherImages.length > 0)
                this.publish('VisiblePageHasAlternateViews', activePage);
        }
        else if (this.viewerState.activePageIndex !== activePage)
        {
            this.viewerState.activePageIndex = activePage;
            this.publish("ActivePageDidChange", activePage);
        }

        function arraysEqual (a, b)
        {
            if (a.length !== b.length)
                return false;

            for (let i = 0, len = a.length; i < len; i++)
            {
                if (a[i] !== b[i])
                    return false;
            }
            return true;
        }
    }

    getPageName (pageIndex)
    {
        return this.viewerState.manifest.pages[pageIndex].f;
    }

    reload (newOptions)
    {
        this.reloadViewer(newOptions);
    }

    zoom (zoomLevel, focalPoint)
    {
        return this.handleZoom(zoomLevel, focalPoint);
    }

    enableScrollable ()
    {
        if (!this.viewerState.isScrollable)
        {
            this.bindMouseEvents();
            this.enableDragScrollable();
            this.viewerState.options.enableKeyScroll = this.viewerState.initialKeyScroll;
            this.viewerState.options.enableSpaceScroll = this.viewerState.initialSpaceScroll;
            this.viewerState.viewportElement.style.overflow = 'auto';
            this.viewerState.isScrollable = true;
        }
    }

    enableDragScrollable ()
    {
        if (this.viewerState.viewportObject.hasAttribute('nochilddrag'))
            this.viewerState.viewportObject.removeAttribute('nochilddrag');
    }

    disableScrollable ()
    {
        if (this.viewerState.isScrollable)
        {
            // block dragging
            this.disableDragScrollable();

            // block double-click zooming
            this.viewerState.outerObject.dblclick = null;
            this.viewerState.outerObject.contextmenu = null;

            // disable all other scrolling actions
            this.viewerState.viewportElement.style.overflow = 'hidden';

            // block scrolling keys behavior, respecting initial scroll settings
            this.viewerState.initialKeyScroll = this.settings.enableKeyScroll;
            this.viewerState.initialSpaceScroll = this.settings.enableSpaceScroll;
            this.viewerState.options.enableKeyScroll = false;
            this.viewerState.options.enableSpaceScroll = false;

            this.viewerState.isScrollable = false;
        }
    }

    disableDragScrollable ()
    {
        if (!this.viewerState.viewportObject.hasAttribute('nochilddrag'))
            this.viewerState.viewportObject.setAttribute('nochilddrag', "");
    }

    // isValidOption (key, value)
    // {
    //     return isValidOption(key, value);
    // }

    // getXOffset (pageIndex, xAnchor)
    // {
    //     return getXOffset(pageIndex, xAnchor);
    // }

    // getYOffset (pageIndex, yAnchor)
    // {
    //     return getYOffset(pageIndex, yAnchor);
    // }

    // this.publish = publish;

    clear ()
    {
        this.clearViewer();
    }

    setPendingManifestRequest (pendingManifestRequest)
    {
        this.viewerState.pendingManifestRequest = pendingManifestRequest;
    }

    destroy ()
    {
        // Useful event to access elements in diva before they get destroyed. Used by the highlight plugin.
        this.publish('ViewerWillTerminate', this.settings);

        // Cancel any pending request retrieving a manifest
        if (this.settings.pendingManifestRequest)
            this.settings.pendingManifestRequest.abort();

        // Removes the hide-scrollbar class from the body
        document.body.removeClass('diva-hide-scrollbar');

        // Empty the parent container and remove any diva-related data
        this.settings.parentObject.parent().empty().removeData('diva');

        // Remove any additional styling on the parent element
        this.settings.parentObject.parent().removeAttr('style').removeAttr('class');

        this.publish('ViewerDidTerminate', this.settings);

        // Clear the Events cache
        _diva_global__WEBPACK_IMPORTED_MODULE_3__["default"].Events.unsubscribeAll(this.settings.ID);
    }
}


/***/ }),

/***/ "./node_modules/diva.js/source/js/viewport.js":
/*!****************************************************!*\
  !*** ./node_modules/diva.js/source/js/viewport.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Viewport; });
class Viewport
{
    constructor (outer, options)
    {
        options = options || {};

        this.intersectionTolerance = options.intersectionTolerance || 0;
        this.outer = outer;
        this._top = this._left = this._width = this._height = this._innerDimensions = null;

        this.invalidate();
    }

    intersectsRegion (region)
    {
        return this.hasHorizontalOverlap(region) && this.hasVerticalOverlap(region);
    }

    hasVerticalOverlap (region)
    {
        const top = this.top - this.intersectionTolerance;
        const bottom = this.bottom + this.intersectionTolerance;

        return (
            fallsBetween(region.top, top, bottom) ||
            fallsBetween(region.bottom, top, bottom) ||
            (region.top <= top && region.bottom >= bottom)
        );
    }

    hasHorizontalOverlap (region)
    {
        const left = this.left - this.intersectionTolerance;
        const right = this.right + this.intersectionTolerance;

        return (
            fallsBetween(region.left, left, right) ||
            fallsBetween(region.right, left, right) ||
            (region.left <= left && region.right >= right)
        );
    }

    invalidate ()
    {
        // FIXME: Should this check the inner dimensions as well?
        this._width = this.outer.clientWidth;
        this._height = this.outer.clientHeight;

        this._top = this.outer.scrollTop;
        this._left = this.outer.scrollLeft;
    }

    setInnerDimensions (dimensions)
    {
        this._innerDimensions = dimensions;

        if (dimensions)
        {
            this._top = clamp(this._top, 0, dimensions.height - this._height);
            this._left = clamp(this._left, 0, dimensions.width - this._width);
        }
    }
}

Object.defineProperties(Viewport.prototype, {
    top: getCoordinateDescriptor('top', 'height'),
    left: getCoordinateDescriptor('left', 'width'),

    width: getDimensionDescriptor('width'),
    height: getDimensionDescriptor('height'),

    bottom: {
        get: function ()
        {
            return this._top + this._height;
        }
    },
    right: {
        get: function ()
        {
            return this._left + this._width;
        }
    }
});

function getCoordinateDescriptor (coord, associatedDimension)
{
    const privateProp = '_' + coord;
    const source = 'scroll' + coord.charAt(0).toUpperCase() + coord.slice(1);

    return {
        get: function ()
        {
            return this[privateProp];
        },
        set: function (newValue)
        {
            let normalized;

            if (this._innerDimensions)
            {
                const maxAllowed = this._innerDimensions[associatedDimension] - this[associatedDimension];
                normalized = clamp(newValue, 0, maxAllowed);
            }
            else
            {
                normalized = clampMin(newValue, 0);
            }

            this[privateProp] = this.outer[source] = normalized;
        }
    };
}

function getDimensionDescriptor (dimen)
{
    return {
        get: function ()
        {
            return this['_' + dimen];
        }
    };
}

function fallsBetween (point, start, end)
{
    return point >= start && point <= end;
}

function clamp (value, min, max)
{
    return clampMin(clampMax(value, max), min);
}

function clampMin (value, min)
{
    return Math.max(value, min);
}

function clampMax (value, max)
{
    return Math.min(value, max);
}


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ "./node_modules/immediate/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/immediate/lib/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var types = [
  __webpack_require__(/*! ./nextTick */ 0),
  __webpack_require__(/*! ./queueMicrotask */ "./node_modules/immediate/lib/queueMicrotask.js"),
  __webpack_require__(/*! ./mutation.js */ "./node_modules/immediate/lib/mutation.js"),
  __webpack_require__(/*! ./messageChannel */ "./node_modules/immediate/lib/messageChannel.js"),
  __webpack_require__(/*! ./stateChange */ "./node_modules/immediate/lib/stateChange.js"),
  __webpack_require__(/*! ./timeout */ "./node_modules/immediate/lib/timeout.js")
];
var draining;
var currentQueue;
var queueIndex = -1;
var queue = [];
var scheduled = false;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    nextTick();
  }
}

//named nextTick for less confusing stack traces
function nextTick() {
  if (draining) {
    return;
  }
  scheduled = false;
  draining = true;
  var len = queue.length;
  var timeout = setTimeout(cleanUpNextTick);
  while (len) {
    currentQueue = queue;
    queue = [];
    while (currentQueue && ++queueIndex < len) {
      currentQueue[queueIndex].run();
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  queueIndex = -1;
  draining = false;
  clearTimeout(timeout);
}
var scheduleDrain;
var i = -1;
var len = types.length;
while (++i < len) {
  if (types[i] && types[i].test && types[i].test()) {
    scheduleDrain = types[i].install(nextTick);
    break;
  }
}
// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  var fun = this.fun;
  var array = this.array;
  switch (array.length) {
  case 0:
    return fun();
  case 1:
    return fun(array[0]);
  case 2:
    return fun(array[0], array[1]);
  case 3:
    return fun(array[0], array[1], array[2]);
  default:
    return fun.apply(null, array);
  }

};
module.exports = immediate;
function immediate(task) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(task, args));
  if (!scheduled && !draining) {
    scheduled = true;
    scheduleDrain();
  }
}


/***/ }),

/***/ "./node_modules/immediate/lib/messageChannel.js":
/*!******************************************************!*\
  !*** ./node_modules/immediate/lib/messageChannel.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  if (global.setImmediate) {
    // we can only get here in IE10
    // which doesn't handel postMessage well
    return false;
  }
  return typeof global.MessageChannel !== 'undefined';
};

exports.install = function (func) {
  var channel = new global.MessageChannel();
  channel.port1.onmessage = func;
  return function () {
    channel.port2.postMessage(0);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/immediate/lib/mutation.js":
/*!************************************************!*\
  !*** ./node_modules/immediate/lib/mutation.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
//based off rsvp https://github.com/tildeio/rsvp.js
//license https://github.com/tildeio/rsvp.js/blob/master/LICENSE
//https://github.com/tildeio/rsvp.js/blob/master/lib/rsvp/asap.js

var Mutation = global.MutationObserver || global.WebKitMutationObserver;

exports.test = function () {
  return Mutation;
};

exports.install = function (handle) {
  var called = 0;
  var observer = new Mutation(handle);
  var element = global.document.createTextNode('');
  observer.observe(element, {
    characterData: true
  });
  return function () {
    element.data = (called = ++called % 2);
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/immediate/lib/queueMicrotask.js":
/*!******************************************************!*\
  !*** ./node_modules/immediate/lib/queueMicrotask.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
exports.test = function () {
  return typeof global.queueMicrotask === 'function';
};

exports.install = function (func) {
  return function () {
    global.queueMicrotask(func);
  };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/immediate/lib/stateChange.js":
/*!***************************************************!*\
  !*** ./node_modules/immediate/lib/stateChange.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

exports.test = function () {
  return 'document' in global && 'onreadystatechange' in global.document.createElement('script');
};

exports.install = function (handle) {
  return function () {

    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
    var scriptEl = global.document.createElement('script');
    scriptEl.onreadystatechange = function () {
      handle();

      scriptEl.onreadystatechange = null;
      scriptEl.parentNode.removeChild(scriptEl);
      scriptEl = null;
    };
    global.document.documentElement.appendChild(scriptEl);

    return handle;
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/immediate/lib/timeout.js":
/*!***********************************************!*\
  !*** ./node_modules/immediate/lib/timeout.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

exports.test = function () {
  return true;
};

exports.install = function (t) {
  return function () {
    setTimeout(t, 0);
  };
};

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/jsonschema/lib/attribute.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/attribute.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var helpers = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js");

/** @type ValidatorResult */
var ValidatorResult = helpers.ValidatorResult;
/** @type SchemaError */
var SchemaError = helpers.SchemaError;

var attribute = {};

attribute.ignoreProperties = {
  // informative properties
  'id': true,
  'default': true,
  'description': true,
  'title': true,
  // arguments to other properties
  'exclusiveMinimum': true,
  'exclusiveMaximum': true,
  'additionalItems': true,
  // special-handled properties
  '$schema': true,
  '$ref': true,
  'extends': true
};

/**
 * @name validators
 */
var validators = attribute.validators = {};

/**
 * Validates whether the instance if of a certain type
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */
validators.type = function validateType (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var types = Array.isArray(schema.type) ? schema.type : [schema.type];
  if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
    var list = types.map(function (v) {
      return v.id && ('<' + v.id + '>') || (v+'');
    });
    result.addError({
      name: 'type',
      argument: list,
      message: "is not of a type(s) " + list,
    });
  }
  return result;
};

function testSchemaNoThrow(instance, options, ctx, callback, schema){
  var throwError = options.throwError;
  options.throwError = false;
  var res = this.validateSchema(instance, schema, options, ctx);
  options.throwError = throwError;

  if (!res.valid && callback instanceof Function) {
    callback(res);
  }
  return res.valid;
}

/**
 * Validates whether the instance matches some of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */
validators.anyOf = function validateAnyOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);
  if (!Array.isArray(schema.anyOf)){
    throw new SchemaError("anyOf must be an array");
  }
  if (!schema.anyOf.some(
    testSchemaNoThrow.bind(
      this, instance, options, ctx, function(res){inner.importErrors(res);}
      ))) {
    var list = schema.anyOf.map(function (v, i) {
      return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
    });
    if (options.nestedErrors) {
      result.importErrors(inner);
    }
    result.addError({
      name: 'anyOf',
      argument: list,
      message: "is not any of " + list.join(','),
    });
  }
  return result;
};

/**
 * Validates whether the instance matches every given schema
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */
validators.allOf = function validateAllOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  if (!Array.isArray(schema.allOf)){
    throw new SchemaError("allOf must be an array");
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var self = this;
  schema.allOf.forEach(function(v, i){
    var valid = self.validateSchema(instance, v, options, ctx);
    if(!valid.valid){
      var msg = (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
      result.addError({
        name: 'allOf',
        argument: { id: msg, length: valid.errors.length, valid: valid },
        message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:',
      });
      result.importErrors(valid);
    }
  });
  return result;
};

/**
 * Validates whether the instance matches exactly one of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */
validators.oneOf = function validateOneOf (instance, schema, options, ctx) {
  // Ignore undefined instances
  if (instance === undefined) {
    return null;
  }
  if (!Array.isArray(schema.oneOf)){
    throw new SchemaError("oneOf must be an array");
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  var inner = new ValidatorResult(instance, schema, options, ctx);
  var count = schema.oneOf.filter(
    testSchemaNoThrow.bind(
      this, instance, options, ctx, function(res) {inner.importErrors(res);}
      ) ).length;
  var list = schema.oneOf.map(function (v, i) {
    return (v.id && ('<' + v.id + '>')) || (v.title && JSON.stringify(v.title)) || (v['$ref'] && ('<' + v['$ref'] + '>')) || '[subschema '+i+']';
  });
  if (count!==1) {
    if (options.nestedErrors) {
      result.importErrors(inner);
    }
    result.addError({
      name: 'oneOf',
      argument: list,
      message: "is not exactly one from " + list.join(','),
    });
  }
  return result;
};

/**
 * Validates properties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.properties = function validateProperties (instance, schema, options, ctx) {
  if(!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var properties = schema.properties || {};
  for (var property in properties) {
    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, properties[property], options, ctx);
    }

    var prop = Object.hasOwnProperty.call(instance, property) ? instance[property] : undefined;
    var res = this.validateSchema(prop, properties[property], options, ctx.makeChild(properties[property], property));
    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }
  return result;
};

/**
 * Test a specific property within in instance against the additionalProperties schema attribute
 * This ignores properties with definitions in the properties schema attribute, but no other attributes.
 * If too many more types of property-existance tests pop up they may need their own class of tests (like `type` has)
 * @private
 * @return {boolean}
 */
function testAdditionalProperty (instance, schema, options, ctx, property, result) {
  if(!this.types.object(instance)) return;
  if (schema.properties && schema.properties[property] !== undefined) {
    return;
  }
  if (schema.additionalProperties === false) {
    result.addError({
      name: 'additionalProperties',
      argument: property,
      message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed",
    });
  } else {
    var additionalProperties = schema.additionalProperties || {};

    if (typeof options.preValidateProperty == 'function') {
      options.preValidateProperty(instance, property, additionalProperties, options, ctx);
    }

    var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
    if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
    result.importErrors(res);
  }
}

/**
 * Validates patternProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.patternProperties = function validatePatternProperties (instance, schema, options, ctx) {
  if(!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var patternProperties = schema.patternProperties || {};

  for (var property in instance) {
    var test = true;
    for (var pattern in patternProperties) {
      var expr = new RegExp(pattern);
      if (!expr.test(property)) {
        continue;
      }
      test = false;

      if (typeof options.preValidateProperty == 'function') {
        options.preValidateProperty(instance, property, patternProperties[pattern], options, ctx);
      }

      var res = this.validateSchema(instance[property], patternProperties[pattern], options, ctx.makeChild(patternProperties[pattern], property));
      if(res.instance !== result.instance[property]) result.instance[property] = res.instance;
      result.importErrors(res);
    }
    if (test) {
      testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
    }
  }

  return result;
};

/**
 * Validates additionalProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.additionalProperties = function validateAdditionalProperties (instance, schema, options, ctx) {
  if(!this.types.object(instance)) return;
  // if patternProperties is defined then we'll test when that one is called instead
  if (schema.patternProperties) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  for (var property in instance) {
    testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
  }
  return result;
};

/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minProperties = function validateMinProperties (instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);
  if (!(keys.length >= schema.minProperties)) {
    result.addError({
      name: 'minProperties',
      argument: schema.minProperties,
      message: "does not meet minimum property length of " + schema.minProperties,
    })
  }
  return result;
};

/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxProperties = function validateMaxProperties (instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var keys = Object.keys(instance);
  if (!(keys.length <= schema.maxProperties)) {
    result.addError({
      name: 'maxProperties',
      argument: schema.maxProperties,
      message: "does not meet maximum property length of " + schema.maxProperties,
    });
  }
  return result;
};

/**
 * Validates items when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.items = function validateItems (instance, schema, options, ctx) {
  var self = this;
  if (!this.types.array(instance)) return;
  if (!schema.items) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  instance.every(function (value, i) {
    var items = Array.isArray(schema.items) ? (schema.items[i] || schema.additionalItems) : schema.items;
    if (items === undefined) {
      return true;
    }
    if (items === false) {
      result.addError({
        name: 'items',
        message: "additionalItems not permitted",
      });
      return false;
    }
    var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
    if(res.instance !== result.instance[i]) result.instance[i] = res.instance;
    result.importErrors(res);
    return true;
  });
  return result;
};

/**
 * Validates minimum and exclusiveMinimum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minimum = function validateMinimum (instance, schema, options, ctx) {
  if (!this.types.number(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid = true;
  if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
    valid = instance > schema.minimum;
  } else {
    valid = instance >= schema.minimum;
  }
  if (!valid) {
    result.addError({
      name: 'minimum',
      argument: schema.minimum,
      message: "must have a minimum value of " + schema.minimum,
    });
  }
  return result;
};

/**
 * Validates maximum and exclusiveMaximum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maximum = function validateMaximum (instance, schema, options, ctx) {
  if (!this.types.number(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var valid;
  if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
    valid = instance < schema.maximum;
  } else {
    valid = instance <= schema.maximum;
  }
  if (!valid) {
    result.addError({
      name: 'maximum',
      argument: schema.maximum,
      message: "must have a maximum value of " + schema.maximum,
    });
  }
  return result;
};

/**
 * Perform validation for multipleOf and divisibleBy, which are essentially the same.
 * @param instance
 * @param schema
 * @param validationType
 * @param errorMessage
 * @returns {String|null}
 */
var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy (instance, schema, options, ctx, validationType, errorMessage) {
  if (!this.types.number(instance)) return;

  var validationArgument = schema[validationType];
  if (validationArgument == 0) {
    throw new SchemaError(validationType + " cannot be zero");
  }

  var result = new ValidatorResult(instance, schema, options, ctx);

  var instanceDecimals = helpers.getDecimalPlaces(instance);
  var divisorDecimals = helpers.getDecimalPlaces(validationArgument);

  var maxDecimals = Math.max(instanceDecimals , divisorDecimals);
  var multiplier = Math.pow(10, maxDecimals);

  if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
    result.addError({
      name: validationType,
      argument:  validationArgument,
      message: errorMessage + JSON.stringify(validationArgument)
    });
  }

  return result;
};

/**
 * Validates divisibleBy when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.multipleOf = function validateMultipleOf (instance, schema, options, ctx) {
 return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
};

/**
 * Validates multipleOf when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.divisibleBy = function validateDivisibleBy (instance, schema, options, ctx) {
  return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
};

/**
 * Validates whether the instance value is present.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.required = function validateRequired (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (instance === undefined && schema.required === true) {
    // A boolean form is implemented for reverse-compatability with schemas written against older drafts
    result.addError({
      name: 'required',
      message: "is required"
    });
  } else if (this.types.object(instance) && Array.isArray(schema.required)) {
    schema.required.forEach(function(n){
      if(instance[n]===undefined){
        result.addError({
          name: 'required',
          argument: n,
          message: "requires property " + JSON.stringify(n),
        });
      }
    });
  }
  return result;
};

/**
 * Validates whether the instance value matches the regular expression, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.pattern = function validatePattern (instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!instance.match(schema.pattern)) {
    result.addError({
      name: 'pattern',
      argument: schema.pattern,
      message: "does not match pattern " + JSON.stringify(schema.pattern.toString()),
    });
  }
  return result;
};

/**
 * Validates whether the instance value is of a certain defined format or a custom
 * format.
 * The following formats are supported for string types:
 *   - date-time
 *   - date
 *   - time
 *   - ip-address
 *   - ipv6
 *   - uri
 *   - color
 *   - host-name
 *   - alpha
 *   - alpha-numeric
 *   - utc-millisec
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {String|null}
 */
validators.format = function validateFormat (instance, schema, options, ctx) {
  if (instance===undefined) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
    result.addError({
      name: 'format',
      argument: schema.format,
      message: "does not conform to the " + JSON.stringify(schema.format) + " format",
    });
  }
  return result;
};

/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minLength = function validateMinLength (instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var hsp = instance.match(/[\uDC00-\uDFFF]/g);
  var length = instance.length - (hsp ? hsp.length : 0);
  if (!(length >= schema.minLength)) {
    result.addError({
      name: 'minLength',
      argument: schema.minLength,
      message: "does not meet minimum length of " + schema.minLength,
    });
  }
  return result;
};

/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxLength = function validateMaxLength (instance, schema, options, ctx) {
  if (!this.types.string(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  // TODO if this was already computed in "minLength", use that value instead of re-computing
  var hsp = instance.match(/[\uDC00-\uDFFF]/g);
  var length = instance.length - (hsp ? hsp.length : 0);
  if (!(length <= schema.maxLength)) {
    result.addError({
      name: 'maxLength',
      argument: schema.maxLength,
      message: "does not meet maximum length of " + schema.maxLength,
    });
  }
  return result;
};

/**
 * Validates whether instance contains at least a minimum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.minItems = function validateMinItems (instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length >= schema.minItems)) {
    result.addError({
      name: 'minItems',
      argument: schema.minItems,
      message: "does not meet minimum length of " + schema.minItems,
    });
  }
  return result;
};

/**
 * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */
validators.maxItems = function validateMaxItems (instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!(instance.length <= schema.maxItems)) {
    result.addError({
      name: 'maxItems',
      argument: schema.maxItems,
      message: "does not meet maximum length of " + schema.maxItems,
    });
  }
  return result;
};

/**
 * Validates that every item in an instance array is unique, when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */
validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  function testArrays (v, i, a) {
    for (var j = i + 1; j < a.length; j++) if (helpers.deepCompareStrict(v, a[j])) {
      return false;
    }
    return true;
  }
  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item",
    });
  }
  return result;
};

/**
 * Deep compares arrays for duplicates
 * @param v
 * @param i
 * @param a
 * @private
 * @return {boolean}
 */
function testArrays (v, i, a) {
  var j, len = a.length;
  for (j = i + 1, len; j < len; j++) {
    if (helpers.deepCompareStrict(v, a[j])) {
      return false;
    }
  }
  return true;
}

/**
 * Validates whether there are no duplicates, when the instance is an Array.
 * @param instance
 * @return {String|null}
 */
validators.uniqueItems = function validateUniqueItems (instance, schema, options, ctx) {
  if (!this.types.array(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!instance.every(testArrays)) {
    result.addError({
      name: 'uniqueItems',
      message: "contains duplicate item",
    });
  }
  return result;
};

/**
 * Validate for the presence of dependency properties, if the instance is an object.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */
validators.dependencies = function validateDependencies (instance, schema, options, ctx) {
  if (!this.types.object(instance)) return;
  var result = new ValidatorResult(instance, schema, options, ctx);
  for (var property in schema.dependencies) {
    if (instance[property] === undefined) {
      continue;
    }
    var dep = schema.dependencies[property];
    var childContext = ctx.makeChild(dep, property);
    if (typeof dep == 'string') {
      dep = [dep];
    }
    if (Array.isArray(dep)) {
      dep.forEach(function (prop) {
        if (instance[prop] === undefined) {
          result.addError({
            // FIXME there's two different "dependencies" errors here with slightly different outputs
            // Can we make these the same? Or should we create different error types?
            name: 'dependencies',
            argument: childContext.propertyPath,
            message: "property " + prop + " not found, required by " + childContext.propertyPath,
          });
        }
      });
    } else {
      var res = this.validateSchema(instance, dep, options, childContext);
      if(result.instance !== res.instance) result.instance = res.instance;
      if (res && res.errors.length) {
        result.addError({
          name: 'dependencies',
          argument: childContext.propertyPath,
          message: "does not meet dependency required by " + childContext.propertyPath,
        });
        result.importErrors(res);
      }
    }
  }
  return result;
};

/**
 * Validates whether the instance value is one of the enumerated values.
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */
validators['enum'] = function validateEnum (instance, schema, options, ctx) {
  if (instance === undefined) {
    return null;
  }
  if (!Array.isArray(schema['enum'])) {
    throw new SchemaError("enum expects an array", schema);
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) {
    result.addError({
      name: 'enum',
      argument: schema['enum'],
      message: "is not one of enum values: " + schema['enum'].map(String).join(','),
    });
  }
  return result;
};

/**
 * Validates whether the instance exactly matches a given value
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */
validators['const'] = function validateEnum (instance, schema, options, ctx) {
  if (instance === undefined) {
    return null;
  }
  var result = new ValidatorResult(instance, schema, options, ctx);
  if (!helpers.deepCompareStrict(schema['const'], instance)) {
    result.addError({
      name: 'const',
      argument: schema['const'],
      message: "does not exactly match expected constant: " + schema['const'],
    });
  }
  return result;
};

/**
 * Validates whether the instance if of a prohibited type.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */
validators.not = validators.disallow = function validateNot (instance, schema, options, ctx) {
  var self = this;
  if(instance===undefined) return null;
  var result = new ValidatorResult(instance, schema, options, ctx);
  var notTypes = schema.not || schema.disallow;
  if(!notTypes) return null;
  if(!Array.isArray(notTypes)) notTypes=[notTypes];
  notTypes.forEach(function (type) {
    if (self.testType(instance, schema, options, ctx, type)) {
      var schemaId = type && type.id && ('<' + type.id + '>') || type;
      result.addError({
        name: 'not',
        argument: schemaId,
        message: "is of prohibited type " + schemaId,
      });
    }
  });
  return result;
};

module.exports = attribute;


/***/ }),

/***/ "./node_modules/jsonschema/lib/helpers.js":
/*!************************************************!*\
  !*** ./node_modules/jsonschema/lib/helpers.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var uri = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var ValidationError = exports.ValidationError = function ValidationError (message, instance, schema, propertyPath, name, argument) {
  if (propertyPath) {
    this.property = propertyPath;
  }
  if (message) {
    this.message = message;
  }
  if (schema) {
    if (schema.id) {
      this.schema = schema.id;
    } else {
      this.schema = schema;
    }
  }
  if (instance) {
    this.instance = instance;
  }
  this.name = name;
  this.argument = argument;
  this.stack = this.toString();
};

ValidationError.prototype.toString = function toString() {
  return this.property + ' ' + this.message;
};

var ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {
  this.instance = instance;
  this.schema = schema;
  this.propertyPath = ctx.propertyPath;
  this.errors = [];
  this.throwError = options && options.throwError;
  this.disableFormat = options && options.disableFormat === true;
};

ValidatorResult.prototype.addError = function addError(detail) {
  var err;
  if (typeof detail == 'string') {
    err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
  } else {
    if (!detail) throw new Error('Missing error detail');
    if (!detail.message) throw new Error('Missing error message');
    if (!detail.name) throw new Error('Missing validator type');
    err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
  }

  if (this.throwError) {
    throw err;
  }
  this.errors.push(err);
  return err;
};

ValidatorResult.prototype.importErrors = function importErrors(res) {
  if (typeof res == 'string' || (res && res.validatorType)) {
    this.addError(res);
  } else if (res && res.errors) {
    Array.prototype.push.apply(this.errors, res.errors);
  }
};

function stringizer (v,i){
  return i+': '+v.toString()+'\n';
}
ValidatorResult.prototype.toString = function toString(res) {
  return this.errors.map(stringizer).join('');
};

Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
  return !this.errors.length;
} });

/**
 * Describes a problem with a Schema which prevents validation of an instance
 * @name SchemaError
 * @constructor
 */
var SchemaError = exports.SchemaError = function SchemaError (msg, schema) {
  this.message = msg;
  this.schema = schema;
  Error.call(this, msg);
  Error.captureStackTrace(this, SchemaError);
};
SchemaError.prototype = Object.create(Error.prototype,
  { constructor: {value: SchemaError, enumerable: false}
  , name: {value: 'SchemaError', enumerable: false}
  });

var SchemaContext = exports.SchemaContext = function SchemaContext (schema, options, propertyPath, base, schemas) {
  this.schema = schema;
  this.options = options;
  this.propertyPath = propertyPath;
  this.base = base;
  this.schemas = schemas;
};

SchemaContext.prototype.resolve = function resolve (target) {
  return uri.resolve(this.base, target);
};

SchemaContext.prototype.makeChild = function makeChild(schema, propertyName){
  var propertyPath = (propertyName===undefined) ? this.propertyPath : this.propertyPath+makeSuffix(propertyName);
  var base = uri.resolve(this.base, schema.id||'');
  var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));
  if(schema.id && !ctx.schemas[base]){
    ctx.schemas[base] = schema;
  }
  return ctx;
}

var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
  'date-time': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
  'date': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
  'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,

  'email': /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
  'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
  'ipv6': /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
  'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,

  'color': /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,

  // hostname regex from: http://stackoverflow.com/a/1420225/5628
  'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
  'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,

  'alpha': /^[a-zA-Z]+$/,
  'alphanumeric': /^[a-zA-Z0-9]+$/,
  'utc-millisec': function (input) {
    return (typeof input === 'string') && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
  },
  'regex': function (input) {
    var result = true;
    try {
      new RegExp(input);
    } catch (e) {
      result = false;
    }
    return result;
  },
  'style': /\s*(.+?):\s*([^;]+);?/,
  'phone': /^\+(?:[0-9] ?){6,14}[0-9]$/
};

FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];

exports.isFormat = function isFormat (input, format, validator) {
  if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {
    if (FORMAT_REGEXPS[format] instanceof RegExp) {
      return FORMAT_REGEXPS[format].test(input);
    }
    if (typeof FORMAT_REGEXPS[format] === 'function') {
      return FORMAT_REGEXPS[format](input);
    }
  } else if (validator && validator.customFormats &&
      typeof validator.customFormats[format] === 'function') {
    return validator.customFormats[format](input);
  }
  return true;
};

var makeSuffix = exports.makeSuffix = function makeSuffix (key) {
  key = key.toString();
  // This function could be capable of outputting valid a ECMAScript string, but the
  // resulting code for testing which form to use would be tens of thousands of characters long
  // That means this will use the name form for some illegal forms
  if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
    return '.' + key;
  }
  if (key.match(/^\d+$/)) {
    return '[' + key + ']';
  }
  return '[' + JSON.stringify(key) + ']';
};

exports.deepCompareStrict = function deepCompareStrict (a, b) {
  if (typeof a !== typeof b) {
    return false;
  }
  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    return a.every(function (v, i) {
      return deepCompareStrict(a[i], b[i]);
    });
  }
  if (typeof a === 'object') {
    if (!a || !b) {
      return a === b;
    }
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    return aKeys.every(function (v) {
      return deepCompareStrict(a[v], b[v]);
    });
  }
  return a === b;
};

function deepMerger (target, dst, e, i) {
  if (typeof e === 'object') {
    dst[i] = deepMerge(target[i], e)
  } else {
    if (target.indexOf(e) === -1) {
      dst.push(e)
    }
  }
}

function copyist (src, dst, key) {
  dst[key] = src[key];
}

function copyistWithDeepMerge (target, src, dst, key) {
  if (typeof src[key] !== 'object' || !src[key]) {
    dst[key] = src[key];
  }
  else {
    if (!target[key]) {
      dst[key] = src[key];
    } else {
      dst[key] = deepMerge(target[key], src[key])
    }
  }
}

function deepMerge (target, src) {
  var array = Array.isArray(src);
  var dst = array && [] || {};

  if (array) {
    target = target || [];
    dst = dst.concat(target);
    src.forEach(deepMerger.bind(null, target, dst));
  } else {
    if (target && typeof target === 'object') {
      Object.keys(target).forEach(copyist.bind(null, target, dst));
    }
    Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
  }

  return dst;
};

module.exports.deepMerge = deepMerge;

/**
 * Validates instance against the provided schema
 * Implements URI+JSON Pointer encoding, e.g. "%7e"="~0"=>"~", "~1"="%2f"=>"/"
 * @param o
 * @param s The path to walk o along
 * @return any
 */
exports.objectGetPath = function objectGetPath(o, s) {
  var parts = s.split('/').slice(1);
  var k;
  while (typeof (k=parts.shift()) == 'string') {
    var n = decodeURIComponent(k.replace(/~0/,'~').replace(/~1/g,'/'));
    if (!(n in o)) return;
    o = o[n];
  }
  return o;
};

function pathEncoder (v) {
  return '/'+encodeURIComponent(v).replace(/~/g,'%7E');
}
/**
 * Accept an Array of property names and return a JSON Pointer URI fragment
 * @param Array a
 * @return {String}
 */
exports.encodePath = function encodePointer(a){
	// ~ must be encoded explicitly because hacks
	// the slash is encoded by encodeURIComponent
	return a.map(pathEncoder).join('');
};


/**
 * Calculate the number of decimal places a number uses
 * We need this to get correct results out of multipleOf and divisibleBy
 * when either figure is has decimal places, due to IEEE-754 float issues.
 * @param number
 * @returns {number}
 */
exports.getDecimalPlaces = function getDecimalPlaces(number) {

  var decimalPlaces = 0;
  if (isNaN(number)) return decimalPlaces;

  if (typeof number !== 'number') {
    number = Number(number);
  }

  var parts = number.toString().split('e');
  if (parts.length === 2) {
    if (parts[1][0] !== '-') {
      return decimalPlaces;
    } else {
      decimalPlaces = Number(parts[1].slice(1));
    }
  }

  var decimalParts = parts[0].split('.');
  if (decimalParts.length === 2) {
    decimalPlaces += decimalParts[1].length;
  }

  return decimalPlaces;
};



/***/ }),

/***/ "./node_modules/jsonschema/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/jsonschema/lib/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Validator = module.exports.Validator = __webpack_require__(/*! ./validator */ "./node_modules/jsonschema/lib/validator.js");

module.exports.ValidatorResult = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js").ValidatorResult;
module.exports.ValidationError = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js").ValidationError;
module.exports.SchemaError = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js").SchemaError;
module.exports.SchemaScanResult = __webpack_require__(/*! ./scan */ "./node_modules/jsonschema/lib/scan.js").SchemaScanResult;
module.exports.scan = __webpack_require__(/*! ./scan */ "./node_modules/jsonschema/lib/scan.js").scan;

module.exports.validate = function (instance, schema, options) {
  var v = new Validator();
  return v.validate(instance, schema, options);
};


/***/ }),

/***/ "./node_modules/jsonschema/lib/scan.js":
/*!*********************************************!*\
  !*** ./node_modules/jsonschema/lib/scan.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var urilib = __webpack_require__(/*! url */ "./node_modules/url/url.js");
var helpers = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js");

module.exports.SchemaScanResult = SchemaScanResult;
function SchemaScanResult(found, ref){
  this.id = found;
  this.ref = ref;
}

/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param string uri
 * @param object schema
 * @return {Object}
 */
module.exports.scan = function scan(base, schema){
  function scanSchema(baseuri, schema){
    if(!schema || typeof schema!='object') return;
    // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined
    if(schema.$ref){
      var resolvedUri = urilib.resolve(baseuri, schema.$ref);
      ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri]+1 : 0;
      return;
    }
    var ourBase = schema.id ? urilib.resolve(baseuri, schema.id) : baseuri;
    if (ourBase) {
      // If there's no fragment, append an empty one
      if(ourBase.indexOf('#')<0) ourBase += '#';
      if(found[ourBase]){
        if(!helpers.deepCompareStrict(found[ourBase], schema)){
          throw new Error('Schema <'+schema+'> already exists with different definition');
        }
        return found[ourBase];
      }
      found[ourBase] = schema;
      // strip trailing fragment
      if(ourBase[ourBase.length-1]=='#'){
        found[ourBase.substring(0, ourBase.length-1)] = schema;
      }
    }
    scanArray(ourBase+'/items', (Array.isArray(schema.items)?schema.items:[schema.items]));
    scanArray(ourBase+'/extends', (Array.isArray(schema.extends)?schema.extends:[schema.extends]));
    scanSchema(ourBase+'/additionalItems', schema.additionalItems);
    scanObject(ourBase+'/properties', schema.properties);
    scanSchema(ourBase+'/additionalProperties', schema.additionalProperties);
    scanObject(ourBase+'/definitions', schema.definitions);
    scanObject(ourBase+'/patternProperties', schema.patternProperties);
    scanObject(ourBase+'/dependencies', schema.dependencies);
    scanArray(ourBase+'/disallow', schema.disallow);
    scanArray(ourBase+'/allOf', schema.allOf);
    scanArray(ourBase+'/anyOf', schema.anyOf);
    scanArray(ourBase+'/oneOf', schema.oneOf);
    scanSchema(ourBase+'/not', schema.not);
  }
  function scanArray(baseuri, schemas){
    if(!Array.isArray(schemas)) return;
    for(var i=0; i<schemas.length; i++){
      scanSchema(baseuri+'/'+i, schemas[i]);
    }
  }
  function scanObject(baseuri, schemas){
    if(!schemas || typeof schemas!='object') return;
    for(var p in schemas){
      scanSchema(baseuri+'/'+p, schemas[p]);
    }
  }

  var found = {};
  var ref = {};
  var schemaUri = base;
  scanSchema(base, schema);
  return new SchemaScanResult(found, ref);
}


/***/ }),

/***/ "./node_modules/jsonschema/lib/validator.js":
/*!**************************************************!*\
  !*** ./node_modules/jsonschema/lib/validator.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urilib = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var attribute = __webpack_require__(/*! ./attribute */ "./node_modules/jsonschema/lib/attribute.js");
var helpers = __webpack_require__(/*! ./helpers */ "./node_modules/jsonschema/lib/helpers.js");
var scanSchema = __webpack_require__(/*! ./scan */ "./node_modules/jsonschema/lib/scan.js").scan;
var ValidatorResult = helpers.ValidatorResult;
var SchemaError = helpers.SchemaError;
var SchemaContext = helpers.SchemaContext;
//var anonymousBase = 'vnd.jsonschema:///';
var anonymousBase = '/';

/**
 * Creates a new Validator object
 * @name Validator
 * @constructor
 */
var Validator = function Validator () {
  // Allow a validator instance to override global custom formats or to have their
  // own custom formats.
  this.customFormats = Object.create(Validator.prototype.customFormats);
  this.schemas = {};
  this.unresolvedRefs = [];

  // Use Object.create to make this extensible without Validator instances stepping on each other's toes.
  this.types = Object.create(types);
  this.attributes = Object.create(attribute.validators);
};

// Allow formats to be registered globally.
Validator.prototype.customFormats = {};

// Hint at the presence of a property
Validator.prototype.schemas = null;
Validator.prototype.types = null;
Validator.prototype.attributes = null;
Validator.prototype.unresolvedRefs = null;

/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param schema
 * @param urn
 * @return {Object}
 */
Validator.prototype.addSchema = function addSchema (schema, base) {
  var self = this;
  if (!schema) {
    return null;
  }
  var scan = scanSchema(base||anonymousBase, schema);
  var ourUri = base || schema.id;
  for(var uri in scan.id){
    this.schemas[uri] = scan.id[uri];
  }
  for(var uri in scan.ref){
    this.unresolvedRefs.push(uri);
  }
  this.unresolvedRefs = this.unresolvedRefs.filter(function(uri){
    return typeof self.schemas[uri]==='undefined';
  });
  return this.schemas[ourUri];
};

Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
  if(!Array.isArray(schemas)) return;
  for(var i=0; i<schemas.length; i++){
    this.addSubSchema(baseuri, schemas[i]);
  }
};

Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
  if(!schemas || typeof schemas!='object') return;
  for(var p in schemas){
    this.addSubSchema(baseuri, schemas[p]);
  }
};



/**
 * Sets all the schemas of the Validator instance.
 * @param schemas
 */
Validator.prototype.setSchemas = function setSchemas (schemas) {
  this.schemas = schemas;
};

/**
 * Returns the schema of a certain urn
 * @param urn
 */
Validator.prototype.getSchema = function getSchema (urn) {
  return this.schemas[urn];
};

/**
 * Validates instance against the provided schema
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {Array}
 */
Validator.prototype.validate = function validate (instance, schema, options, ctx) {
  if (!options) {
    options = {};
  }
  var propertyName = options.propertyName || 'instance';
  // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI
  var base = urilib.resolve(options.base||anonymousBase, schema.id||'');
  if(!ctx){
    ctx = new SchemaContext(schema, options, propertyName, base, Object.create(this.schemas));
    if (!ctx.schemas[base]) {
      ctx.schemas[base] = schema;
    }
    var found = scanSchema(base, schema);
    for(var n in found.id){
      var sch = found.id[n];
      ctx.schemas[n] = sch;
    }
  }
  if (schema) {
    var result = this.validateSchema(instance, schema, options, ctx);
    if (!result) {
      throw new Error('Result undefined');
    }
    return result;
  }
  throw new SchemaError('no schema specified', schema);
};

/**
* @param Object schema
* @return mixed schema uri or false
*/
function shouldResolve(schema) {
  var ref = (typeof schema === 'string') ? schema : schema.$ref;
  if (typeof ref=='string') return ref;
  return false;
}

/**
 * Validates an instance against the schema (the actual work horse)
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @private
 * @return {ValidatorResult}
 */
Validator.prototype.validateSchema = function validateSchema (instance, schema, options, ctx) {
  var result = new ValidatorResult(instance, schema, options, ctx);

    // Support for the true/false schemas
  if(typeof schema==='boolean') {
    if(schema===true){
      // `true` is always valid
      schema = {};
    }else if(schema===false){
      // `false` is always invalid
      schema = {type: []};
    }
  }else if(!schema){
    // This might be a string
    throw new Error("schema is undefined");
  }

  if (schema['extends']) {
    if (Array.isArray(schema['extends'])) {
      var schemaobj = {schema: schema, ctx: ctx};
      schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));
      schema = schemaobj.schema;
      schemaobj.schema = null;
      schemaobj.ctx = null;
      schemaobj = null;
    } else {
      schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));
    }
  }

  // If passed a string argument, load that schema URI
  var switchSchema;
  if (switchSchema = shouldResolve(schema)) {
    var resolved = this.resolve(schema, switchSchema, ctx);
    var subctx = new SchemaContext(resolved.subschema, options, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
    return this.validateSchema(instance, resolved.subschema, options, subctx);
  }

  var skipAttributes = options && options.skipAttributes || [];
  // Validate each schema attribute against the instance
  for (var key in schema) {
    if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
      var validatorErr = null;
      var validator = this.attributes[key];
      if (validator) {
        validatorErr = validator.call(this, instance, schema, options, ctx);
      } else if (options.allowUnknownAttributes === false) {
        // This represents an error with the schema itself, not an invalid instance
        throw new SchemaError("Unsupported attribute: " + key, schema);
      }
      if (validatorErr) {
        result.importErrors(validatorErr);
      }
    }
  }

  if (typeof options.rewrite == 'function') {
    var value = options.rewrite.call(this, instance, schema, options, ctx);
    result.instance = value;
  }
  return result;
};

/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/
Validator.prototype.schemaTraverser = function schemaTraverser (schemaobj, s) {
  schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
}

/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/
Validator.prototype.superResolve = function superResolve (schema, ctx) {
  var ref;
  if(ref = shouldResolve(schema)) {
    return this.resolve(schema, ref, ctx).subschema;
  }
  return schema;
}

/**
* @private
* @param Object schema
* @param Object switchSchema
* @param SchemaContext ctx
* @return Object resolved schemas {subschema:String, switchSchema: String}
* @throws SchemaError
*/
Validator.prototype.resolve = function resolve (schema, switchSchema, ctx) {
  switchSchema = ctx.resolve(switchSchema);
  // First see if the schema exists under the provided URI
  if (ctx.schemas[switchSchema]) {
    return {subschema: ctx.schemas[switchSchema], switchSchema: switchSchema};
  }
  // Else try walking the property pointer
  var parsed = urilib.parse(switchSchema);
  var fragment = parsed && parsed.hash;
  var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
  if (!document || !ctx.schemas[document]) {
    throw new SchemaError("no such schema <" + switchSchema + ">", schema);
  }
  var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
  if(subschema===undefined){
    throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
  }
  return {subschema: subschema, switchSchema: switchSchema};
};

/**
 * Tests whether the instance if of a certain type.
 * @private
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @param type
 * @return {boolean}
 */
Validator.prototype.testType = function validateType (instance, schema, options, ctx, type) {
  if (typeof this.types[type] == 'function') {
    return this.types[type].call(this, instance);
  }
  if (type && typeof type == 'object') {
    var res = this.validateSchema(instance, type, options, ctx);
    return res === undefined || !(res && res.errors.length);
  }
  // Undefined or properties not on the list are acceptable, same as not being defined
  return true;
};

var types = Validator.prototype.types = {};
types.string = function testString (instance) {
  return typeof instance == 'string';
};
types.number = function testNumber (instance) {
  // isFinite returns false for NaN, Infinity, and -Infinity
  return typeof instance == 'number' && isFinite(instance);
};
types.integer = function testInteger (instance) {
  return (typeof instance == 'number') && instance % 1 === 0;
};
types.boolean = function testBoolean (instance) {
  return typeof instance == 'boolean';
};
types.array = function testArray (instance) {
  return Array.isArray(instance);
};
types['null'] = function testNull (instance) {
  return instance === null;
};
types.date = function testDate (instance) {
  return instance instanceof Date;
};
types.any = function testAny (instance) {
  return true;
};
types.object = function testObject (instance) {
  // TODO: fix this - see #15
  return instance && (typeof instance === 'object') && !(Array.isArray(instance)) && !(instance instanceof Date);
};

module.exports = Validator;


/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.20';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/pouchdb/lib/index-browser.es.js":
/*!******************************************************!*\
  !*** ./node_modules/pouchdb/lib/index-browser.es.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immediate */ "./node_modules/immediate/lib/index.js");
/* harmony import */ var immediate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(immediate__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! spark-md5 */ "./node_modules/spark-md5/spark-md5.js");
/* harmony import */ var spark_md5__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(spark_md5__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var vuvuzela__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vuvuzela */ "./node_modules/vuvuzela/index.js");
/* harmony import */ var vuvuzela__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(vuvuzela__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var argsarray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! argsarray */ "./node_modules/argsarray/index.js");
/* harmony import */ var argsarray__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(argsarray__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/* harmony import */ var inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_6__);








function mangle(key) {
  return '$' + key;
}
function unmangle(key) {
  return key.substring(1);
}
function Map$1() {
  this._store = {};
}
Map$1.prototype.get = function (key) {
  var mangled = mangle(key);
  return this._store[mangled];
};
Map$1.prototype.set = function (key, value) {
  var mangled = mangle(key);
  this._store[mangled] = value;
  return true;
};
Map$1.prototype.has = function (key) {
  var mangled = mangle(key);
  return mangled in this._store;
};
Map$1.prototype.delete = function (key) {
  var mangled = mangle(key);
  var res = mangled in this._store;
  delete this._store[mangled];
  return res;
};
Map$1.prototype.forEach = function (cb) {
  var keys = Object.keys(this._store);
  for (var i = 0, len = keys.length; i < len; i++) {
    var key = keys[i];
    var value = this._store[key];
    key = unmangle(key);
    cb(value, key);
  }
};
Object.defineProperty(Map$1.prototype, 'size', {
  get: function () {
    return Object.keys(this._store).length;
  }
});

function Set$1(array) {
  this._store = new Map$1();

  // init with an array
  if (array && Array.isArray(array)) {
    for (var i = 0, len = array.length; i < len; i++) {
      this.add(array[i]);
    }
  }
}
Set$1.prototype.add = function (key) {
  return this._store.set(key, true);
};
Set$1.prototype.has = function (key) {
  return this._store.has(key);
};
Set$1.prototype.forEach = function (cb) {
  this._store.forEach(function (value, key) {
    cb(key);
  });
};
Object.defineProperty(Set$1.prototype, 'size', {
  get: function () {
    return this._store.size;
  }
});

/* global Map,Set,Symbol */
// Based on https://kangax.github.io/compat-table/es6/ we can sniff out
// incomplete Map/Set implementations which would otherwise cause our tests to fail.
// Notably they fail in IE11 and iOS 8.4, which this prevents.
function supportsMapAndSet() {
  if (typeof Symbol === 'undefined' || typeof Map === 'undefined' || typeof Set === 'undefined') {
    return false;
  }
  var prop = Object.getOwnPropertyDescriptor(Map, Symbol.species);
  return prop && 'get' in prop && Map[Symbol.species] === Map;
}

// based on https://github.com/montagejs/collections

var ExportedSet;
var ExportedMap;

{
  if (supportsMapAndSet()) { // prefer built-in Map/Set
    ExportedSet = Set;
    ExportedMap = Map;
  } else { // fall back to our polyfill
    ExportedSet = Set$1;
    ExportedMap = Map$1;
  }
}

function isBinaryObject(object) {
  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||
    (typeof Blob !== 'undefined' && object instanceof Blob);
}

function cloneArrayBuffer(buff) {
  if (typeof buff.slice === 'function') {
    return buff.slice(0);
  }
  // IE10-11 slice() polyfill
  var target = new ArrayBuffer(buff.byteLength);
  var targetArray = new Uint8Array(target);
  var sourceArray = new Uint8Array(buff);
  targetArray.set(sourceArray);
  return target;
}

function cloneBinaryObject(object) {
  if (object instanceof ArrayBuffer) {
    return cloneArrayBuffer(object);
  }
  var size = object.size;
  var type = object.type;
  // Blob
  if (typeof object.slice === 'function') {
    return object.slice(0, size, type);
  }
  // PhantomJS slice() replacement
  return object.webkitSlice(0, size, type);
}

// most of this is borrowed from lodash.isPlainObject:
// https://github.com/fis-components/lodash.isplainobject/
// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js

var funcToString = Function.prototype.toString;
var objectCtorString = funcToString.call(Object);

function isPlainObject(value) {
  var proto = Object.getPrototypeOf(value);
  /* istanbul ignore if */
  if (proto === null) { // not sure when this happens, but I guess it can
    return true;
  }
  var Ctor = proto.constructor;
  return (typeof Ctor == 'function' &&
    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
}

function clone(object) {
  var newObject;
  var i;
  var len;

  if (!object || typeof object !== 'object') {
    return object;
  }

  if (Array.isArray(object)) {
    newObject = [];
    for (i = 0, len = object.length; i < len; i++) {
      newObject[i] = clone(object[i]);
    }
    return newObject;
  }

  // special case: to avoid inconsistencies between IndexedDB
  // and other backends, we automatically stringify Dates
  if (object instanceof Date) {
    return object.toISOString();
  }

  if (isBinaryObject(object)) {
    return cloneBinaryObject(object);
  }

  if (!isPlainObject(object)) {
    return object; // don't clone objects like Workers
  }

  newObject = {};
  for (i in object) {
    /* istanbul ignore else */
    if (Object.prototype.hasOwnProperty.call(object, i)) {
      var value = clone(object[i]);
      if (typeof value !== 'undefined') {
        newObject[i] = value;
      }
    }
  }
  return newObject;
}

function once(fun) {
  var called = false;
  return argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
    /* istanbul ignore if */
    if (called) {
      // this is a smoke test and should never actually happen
      throw new Error('once called more than once');
    } else {
      called = true;
      fun.apply(this, args);
    }
  });
}

function toPromise(func) {
  //create the function we will be returning
  return argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
    // Clone arguments
    args = clone(args);
    var self = this;
    // if the last argument is a function, assume its a callback
    var usedCB = (typeof args[args.length - 1] === 'function') ? args.pop() : false;
    var promise = new Promise(function (fulfill, reject) {
      var resp;
      try {
        var callback = once(function (err, mesg) {
          if (err) {
            reject(err);
          } else {
            fulfill(mesg);
          }
        });
        // create a callback for this invocation
        // apply the function in the orig context
        args.push(callback);
        resp = func.apply(self, args);
        if (resp && typeof resp.then === 'function') {
          fulfill(resp);
        }
      } catch (e) {
        reject(e);
      }
    });
    // if there is a callback, call it back
    if (usedCB) {
      promise.then(function (result) {
        usedCB(null, result);
      }, usedCB);
    }
    return promise;
  });
}

function logApiCall(self, name, args) {
  /* istanbul ignore if */
  if (self.constructor.listeners('debug').length) {
    var logArgs = ['api', self.name, name];
    for (var i = 0; i < args.length - 1; i++) {
      logArgs.push(args[i]);
    }
    self.constructor.emit('debug', logArgs);

    // override the callback itself to log the response
    var origCallback = args[args.length - 1];
    args[args.length - 1] = function (err, res) {
      var responseArgs = ['api', self.name, name];
      responseArgs = responseArgs.concat(
        err ? ['error', err] : ['success', res]
      );
      self.constructor.emit('debug', responseArgs);
      origCallback(err, res);
    };
  }
}

function adapterFun(name, callback) {
  return toPromise(argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
    if (this._closed) {
      return Promise.reject(new Error('database is closed'));
    }
    if (this._destroyed) {
      return Promise.reject(new Error('database is destroyed'));
    }
    var self = this;
    logApiCall(self, name, args);
    if (!this.taskqueue.isReady) {
      return new Promise(function (fulfill, reject) {
        self.taskqueue.addTask(function (failed) {
          if (failed) {
            reject(failed);
          } else {
            fulfill(self[name].apply(self, args));
          }
        });
      });
    }
    return callback.apply(this, args);
  }));
}

// like underscore/lodash _.pick()
function pick(obj, arr) {
  var res = {};
  for (var i = 0, len = arr.length; i < len; i++) {
    var prop = arr[i];
    if (prop in obj) {
      res[prop] = obj[prop];
    }
  }
  return res;
}

// Most browsers throttle concurrent requests at 6, so it's silly
// to shim _bulk_get by trying to launch potentially hundreds of requests
// and then letting the majority time out. We can handle this ourselves.
var MAX_NUM_CONCURRENT_REQUESTS = 6;

function identityFunction(x) {
  return x;
}

function formatResultForOpenRevsGet(result) {
  return [{
    ok: result
  }];
}

// shim for P/CouchDB adapters that don't directly implement _bulk_get
function bulkGet(db, opts, callback) {
  var requests = opts.docs;

  // consolidate into one request per doc if possible
  var requestsById = new ExportedMap();
  requests.forEach(function (request) {
    if (requestsById.has(request.id)) {
      requestsById.get(request.id).push(request);
    } else {
      requestsById.set(request.id, [request]);
    }
  });

  var numDocs = requestsById.size;
  var numDone = 0;
  var perDocResults = new Array(numDocs);

  function collapseResultsAndFinish() {
    var results = [];
    perDocResults.forEach(function (res) {
      res.docs.forEach(function (info) {
        results.push({
          id: res.id,
          docs: [info]
        });
      });
    });
    callback(null, {results: results});
  }

  function checkDone() {
    if (++numDone === numDocs) {
      collapseResultsAndFinish();
    }
  }

  function gotResult(docIndex, id, docs) {
    perDocResults[docIndex] = {id: id, docs: docs};
    checkDone();
  }

  var allRequests = [];
  requestsById.forEach(function (value, key) {
    allRequests.push(key);
  });

  var i = 0;

  function nextBatch() {

    if (i >= allRequests.length) {
      return;
    }

    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);
    var batch = allRequests.slice(i, upTo);
    processBatch(batch, i);
    i += batch.length;
  }

  function processBatch(batch, offset) {
    batch.forEach(function (docId, j) {
      var docIdx = offset + j;
      var docRequests = requestsById.get(docId);

      // just use the first request as the "template"
      // TODO: The _bulk_get API allows for more subtle use cases than this,
      // but for now it is unlikely that there will be a mix of different
      // "atts_since" or "attachments" in the same request, since it's just
      // replicate.js that is using this for the moment.
      // Also, atts_since is aspirational, since we don't support it yet.
      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);
      docOpts.open_revs = docRequests.map(function (request) {
        // rev is optional, open_revs disallowed
        return request.rev;
      });

      // remove falsey / undefined revisions
      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);

      var formatResult = identityFunction;

      if (docOpts.open_revs.length === 0) {
        delete docOpts.open_revs;

        // when fetching only the "winning" leaf,
        // transform the result so it looks like an open_revs
        // request
        formatResult = formatResultForOpenRevsGet;
      }

      // globally-supplied options
      ['revs', 'attachments', 'binary', 'ajax', 'latest'].forEach(function (param) {
        if (param in opts) {
          docOpts[param] = opts[param];
        }
      });
      db.get(docId, docOpts, function (err, res) {
        var result;
        /* istanbul ignore if */
        if (err) {
          result = [{error: err}];
        } else {
          result = formatResult(res);
        }
        gotResult(docIdx, docId, result);
        nextBatch();
      });
    });
  }

  nextBatch();

}

var hasLocal;

try {
  localStorage.setItem('_pouch_check_localstorage', 1);
  hasLocal = !!localStorage.getItem('_pouch_check_localstorage');
} catch (e) {
  hasLocal = false;
}

function hasLocalStorage() {
  return hasLocal;
}

// Custom nextTick() shim for browsers. In node, this will just be process.nextTick(). We

inherits__WEBPACK_IMPORTED_MODULE_5___default()(Changes, events__WEBPACK_IMPORTED_MODULE_6___default.a);

/* istanbul ignore next */
function attachBrowserEvents(self) {
  if (hasLocalStorage()) {
    addEventListener("storage", function (e) {
      self.emit(e.key);
    });
  }
}

function Changes() {
  events__WEBPACK_IMPORTED_MODULE_6___default.a.call(this);
  this._listeners = {};

  attachBrowserEvents(this);
}
Changes.prototype.addListener = function (dbName, id, db, opts) {
  /* istanbul ignore if */
  if (this._listeners[id]) {
    return;
  }
  var self = this;
  var inprogress = false;
  function eventFunction() {
    /* istanbul ignore if */
    if (!self._listeners[id]) {
      return;
    }
    if (inprogress) {
      inprogress = 'waiting';
      return;
    }
    inprogress = true;
    var changesOpts = pick(opts, [
      'style', 'include_docs', 'attachments', 'conflicts', 'filter',
      'doc_ids', 'view', 'since', 'query_params', 'binary', 'return_docs'
    ]);

    /* istanbul ignore next */
    function onError() {
      inprogress = false;
    }

    db.changes(changesOpts).on('change', function (c) {
      if (c.seq > opts.since && !opts.cancelled) {
        opts.since = c.seq;
        opts.onChange(c);
      }
    }).on('complete', function () {
      if (inprogress === 'waiting') {
        immediate__WEBPACK_IMPORTED_MODULE_0___default()(eventFunction);
      }
      inprogress = false;
    }).on('error', onError);
  }
  this._listeners[id] = eventFunction;
  this.on(dbName, eventFunction);
};

Changes.prototype.removeListener = function (dbName, id) {
  /* istanbul ignore if */
  if (!(id in this._listeners)) {
    return;
  }
  events__WEBPACK_IMPORTED_MODULE_6___default.a.prototype.removeListener.call(this, dbName,
    this._listeners[id]);
  delete this._listeners[id];
};


/* istanbul ignore next */
Changes.prototype.notifyLocalWindows = function (dbName) {
  //do a useless change on a storage thing
  //in order to get other windows's listeners to activate
  if (hasLocalStorage()) {
    localStorage[dbName] = (localStorage[dbName] === "a") ? "b" : "a";
  }
};

Changes.prototype.notify = function (dbName) {
  this.emit(dbName);
  this.notifyLocalWindows(dbName);
};

function guardedConsole(method) {
  /* istanbul ignore else */
  if (typeof console !== 'undefined' && typeof console[method] === 'function') {
    var args = Array.prototype.slice.call(arguments, 1);
    console[method].apply(console, args);
  }
}

function randomNumber(min, max) {
  var maxTimeout = 600000; // Hard-coded default of 10 minutes
  min = parseInt(min, 10) || 0;
  max = parseInt(max, 10);
  if (max !== max || max <= min) {
    max = (min || 1) << 1; //doubling
  } else {
    max = max + 1;
  }
  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout
  if (max > maxTimeout) {
    min = maxTimeout >> 1; // divide by two
    max = maxTimeout;
  }
  var ratio = Math.random();
  var range = max - min;

  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.
}

function defaultBackOff(min) {
  var max = 0;
  if (!min) {
    max = 2000;
  }
  return randomNumber(min, max);
}

// designed to give info to browser users, who are disturbed
// when they see http errors in the console
function explainError(status, str) {
  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);
}

var assign;
{
  if (typeof Object.assign === 'function') {
    assign = Object.assign;
  } else {
    // lite Object.assign polyfill based on
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
    assign = function (target) {
      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) { // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    };
  }
}

var $inject_Object_assign = assign;

inherits__WEBPACK_IMPORTED_MODULE_5___default()(PouchError, Error);

function PouchError(status, error, reason) {
  Error.call(this, reason);
  this.status = status;
  this.name = error;
  this.message = reason;
  this.error = true;
}

PouchError.prototype.toString = function () {
  return JSON.stringify({
    status: this.status,
    name: this.name,
    message: this.message,
    reason: this.reason
  });
};

var UNAUTHORIZED = new PouchError(401, 'unauthorized', "Name or password is incorrect.");
var MISSING_BULK_DOCS = new PouchError(400, 'bad_request', "Missing JSON list of 'docs'");
var MISSING_DOC = new PouchError(404, 'not_found', 'missing');
var REV_CONFLICT = new PouchError(409, 'conflict', 'Document update conflict');
var INVALID_ID = new PouchError(400, 'bad_request', '_id field must contain a string');
var MISSING_ID = new PouchError(412, 'missing_id', '_id is required for puts');
var RESERVED_ID = new PouchError(400, 'bad_request', 'Only reserved document ids may start with underscore.');
var NOT_OPEN = new PouchError(412, 'precondition_failed', 'Database not open');
var UNKNOWN_ERROR = new PouchError(500, 'unknown_error', 'Database encountered an unknown error');
var BAD_ARG = new PouchError(500, 'badarg', 'Some query argument is invalid');
var INVALID_REQUEST = new PouchError(400, 'invalid_request', 'Request was invalid');
var QUERY_PARSE_ERROR = new PouchError(400, 'query_parse_error', 'Some query parameter is invalid');
var DOC_VALIDATION = new PouchError(500, 'doc_validation', 'Bad special document member');
var BAD_REQUEST = new PouchError(400, 'bad_request', 'Something wrong with the request');
var NOT_AN_OBJECT = new PouchError(400, 'bad_request', 'Document must be a JSON object');
var DB_MISSING = new PouchError(404, 'not_found', 'Database not found');
var IDB_ERROR = new PouchError(500, 'indexed_db_went_bad', 'unknown');
var WSQ_ERROR = new PouchError(500, 'web_sql_went_bad', 'unknown');
var LDB_ERROR = new PouchError(500, 'levelDB_went_went_bad', 'unknown');
var FORBIDDEN = new PouchError(403, 'forbidden', 'Forbidden by design doc validate_doc_update function');
var INVALID_REV = new PouchError(400, 'bad_request', 'Invalid rev format');
var FILE_EXISTS = new PouchError(412, 'file_exists', 'The database could not be created, the file already exists.');
var MISSING_STUB = new PouchError(412, 'missing_stub', 'A pre-existing attachment stub wasn\'t found');
var INVALID_URL = new PouchError(413, 'invalid_url', 'Provided URL is invalid');

function createError(error, reason) {
  function CustomPouchError(reason) {
    // inherit error properties from our parent error manually
    // so as to allow proper JSON parsing.
    /* jshint ignore:start */
    var names = Object.getOwnPropertyNames(error);
    for (var i = 0, len = names.length; i < len; i++) {
      if (typeof error[names[i]] !== 'function') {
        this[names[i]] = error[names[i]];
      }
    }
    /* jshint ignore:end */
    if (reason !== undefined) {
      this.reason = reason;
    }
  }
  CustomPouchError.prototype = PouchError.prototype;
  return new CustomPouchError(reason);
}

function generateErrorFromResponse(err) {

  if (typeof err !== 'object') {
    var data = err;
    err = UNKNOWN_ERROR;
    err.data = data;
  }

  if ('error' in err && err.error === 'conflict') {
    err.name = 'conflict';
    err.status = 409;
  }

  if (!('name' in err)) {
    err.name = err.error || 'unknown';
  }

  if (!('status' in err)) {
    err.status = 500;
  }

  if (!('message' in err)) {
    err.message = err.message || err.reason;
  }

  return err;
}

function tryFilter(filter, doc, req) {
  try {
    return !filter(doc, req);
  } catch (err) {
    var msg = 'Filter function threw: ' + err.toString();
    return createError(BAD_REQUEST, msg);
  }
}

function filterChange(opts) {
  var req = {};
  var hasFilter = opts.filter && typeof opts.filter === 'function';
  req.query = opts.query_params;

  return function filter(change) {
    if (!change.doc) {
      // CSG sends events on the changes feed that don't have documents,
      // this hack makes a whole lot of existing code robust.
      change.doc = {};
    }

    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);

    if (typeof filterReturn === 'object') {
      return filterReturn;
    }

    if (filterReturn) {
      return false;
    }

    if (!opts.include_docs) {
      delete change.doc;
    } else if (!opts.attachments) {
      for (var att in change.doc._attachments) {
        /* istanbul ignore else */
        if (change.doc._attachments.hasOwnProperty(att)) {
          change.doc._attachments[att].stub = true;
        }
      }
    }
    return true;
  };
}

function flatten(arrs) {
  var res = [];
  for (var i = 0, len = arrs.length; i < len; i++) {
    res = res.concat(arrs[i]);
  }
  return res;
}

// shim for Function.prototype.name,

// Determine id an ID is valid
//   - invalid IDs begin with an underescore that does not begin '_design' or
//     '_local'
//   - any other string value is a valid id
// Returns the specific error object for each case
function invalidIdError(id) {
  var err;
  if (!id) {
    err = createError(MISSING_ID);
  } else if (typeof id !== 'string') {
    err = createError(INVALID_ID);
  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {
    err = createError(RESERVED_ID);
  }
  if (err) {
    throw err;
  }
}

// Checks if a PouchDB object is "remote" or not. This is

function isRemote(db) {
  if (typeof db._remote === 'boolean') {
    return db._remote;
  }
  /* istanbul ignore next */
  if (typeof db.type === 'function') {
    guardedConsole('warn',
      'db.type() is deprecated and will be removed in ' +
      'a future version of PouchDB');
    return db.type() === 'http';
  }
  /* istanbul ignore next */
  return false;
}

function listenerCount(ee, type) {
  return 'listenerCount' in ee ? ee.listenerCount(type) :
                                 events__WEBPACK_IMPORTED_MODULE_6___default.a.listenerCount(ee, type);
}

function parseDesignDocFunctionName(s) {
  if (!s) {
    return null;
  }
  var parts = s.split('/');
  if (parts.length === 2) {
    return parts;
  }
  if (parts.length === 1) {
    return [s, s];
  }
  return null;
}

function normalizeDesignDocFunctionName(s) {
  var normalized = parseDesignDocFunctionName(s);
  return normalized ? normalized.join('/') : null;
}

// originally parseUri 1.2.2, now patched by us
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
var keys = ["source", "protocol", "authority", "userInfo", "user", "password",
    "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
var qName ="queryKey";
var qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;

// use the "loose" parser
/* eslint maxlen: 0, no-useless-escape: 0 */
var parser = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

function parseUri(str) {
  var m = parser.exec(str);
  var uri = {};
  var i = 14;

  while (i--) {
    var key = keys[i];
    var value = m[i] || "";
    var encoded = ['user', 'password'].indexOf(key) !== -1;
    uri[key] = encoded ? decodeURIComponent(value) : value;
  }

  uri[qName] = {};
  uri[keys[12]].replace(qParser, function ($0, $1, $2) {
    if ($1) {
      uri[qName][$1] = $2;
    }
  });

  return uri;
}

// Based on https://github.com/alexdavid/scope-eval v0.0.3
// (source: https://unpkg.com/scope-eval@0.0.3/scope_eval.js)
// This is basically just a wrapper around new Function()

function scopeEval(source, scope) {
  var keys = [];
  var values = [];
  for (var key in scope) {
    if (scope.hasOwnProperty(key)) {
      keys.push(key);
      values.push(scope[key]);
    }
  }
  keys.push(source);
  return Function.apply(null, keys).apply(null, values);
}

// this is essentially the "update sugar" function from daleharvey/pouchdb#1388
// the diffFun tells us what delta to apply to the doc.  it either returns
// the doc, or false if it doesn't need to do an update after all
function upsert(db, docId, diffFun) {
  return new Promise(function (fulfill, reject) {
    db.get(docId, function (err, doc) {
      if (err) {
        /* istanbul ignore next */
        if (err.status !== 404) {
          return reject(err);
        }
        doc = {};
      }

      // the user might change the _rev, so save it for posterity
      var docRev = doc._rev;
      var newDoc = diffFun(doc);

      if (!newDoc) {
        // if the diffFun returns falsy, we short-circuit as
        // an optimization
        return fulfill({updated: false, rev: docRev});
      }

      // users aren't allowed to modify these values,
      // so reset them here
      newDoc._id = docId;
      newDoc._rev = docRev;
      fulfill(tryAndPut(db, newDoc, diffFun));
    });
  });
}

function tryAndPut(db, doc, diffFun) {
  return db.put(doc).then(function (res) {
    return {
      updated: true,
      rev: res.rev
    };
  }, function (err) {
    /* istanbul ignore next */
    if (err.status !== 409) {
      throw err;
    }
    return upsert(db, doc._id, diffFun);
  });
}

var thisAtob = function (str) {
  return atob(str);
};

var thisBtoa = function (str) {
  return btoa(str);
};

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor (e.g.
// old QtWebKit versions, Android < 4.4).
function createBlob(parts, properties) {
  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
  parts = parts || [];
  properties = properties || {};
  try {
    return new Blob(parts, properties);
  } catch (e) {
    if (e.name !== "TypeError") {
      throw e;
    }
    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :
                  WebKitBlobBuilder;
    var builder = new Builder();
    for (var i = 0; i < parts.length; i += 1) {
      builder.append(parts[i]);
    }
    return builder.getBlob(properties.type);
  }
}

// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function binaryStringToArrayBuffer(bin) {
  var length = bin.length;
  var buf = new ArrayBuffer(length);
  var arr = new Uint8Array(buf);
  for (var i = 0; i < length; i++) {
    arr[i] = bin.charCodeAt(i);
  }
  return buf;
}

function binStringToBluffer(binString, type) {
  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});
}

function b64ToBluffer(b64, type) {
  return binStringToBluffer(thisAtob(b64), type);
}

//Can't find original post, but this is close
//http://stackoverflow.com/questions/6965107/ (continues on next line)
//converting-between-strings-and-arraybuffers
function arrayBufferToBinaryString(buffer) {
  var binary = '';
  var bytes = new Uint8Array(buffer);
  var length = bytes.byteLength;
  for (var i = 0; i < length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return binary;
}

// shim for browsers that don't support it
function readAsBinaryString(blob, callback) {
  var reader = new FileReader();
  var hasBinaryString = typeof reader.readAsBinaryString === 'function';
  reader.onloadend = function (e) {
    var result = e.target.result || '';
    if (hasBinaryString) {
      return callback(result);
    }
    callback(arrayBufferToBinaryString(result));
  };
  if (hasBinaryString) {
    reader.readAsBinaryString(blob);
  } else {
    reader.readAsArrayBuffer(blob);
  }
}

function blobToBinaryString(blobOrBuffer, callback) {
  readAsBinaryString(blobOrBuffer, function (bin) {
    callback(bin);
  });
}

function blobToBase64(blobOrBuffer, callback) {
  blobToBinaryString(blobOrBuffer, function (base64) {
    callback(thisBtoa(base64));
  });
}

// simplified API. universal browser support is assumed
function readAsArrayBuffer(blob, callback) {
  var reader = new FileReader();
  reader.onloadend = function (e) {
    var result = e.target.result || new ArrayBuffer(0);
    callback(result);
  };
  reader.readAsArrayBuffer(blob);
}

// this is not used in the browser

var setImmediateShim = self.setImmediate || self.setTimeout;
var MD5_CHUNK_SIZE = 32768;

function rawToBase64(raw) {
  return thisBtoa(raw);
}

function sliceBlob(blob, start, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start, end);
  }
  return blob.slice(start, end);
}

function appendBlob(buffer, blob, start, end, callback) {
  if (start > 0 || end < blob.size) {
    // only slice blob if we really need to
    blob = sliceBlob(blob, start, end);
  }
  readAsArrayBuffer(blob, function (arrayBuffer) {
    buffer.append(arrayBuffer);
    callback();
  });
}

function appendString(buffer, string, start, end, callback) {
  if (start > 0 || end < string.length) {
    // only create a substring if we really need to
    string = string.substring(start, end);
  }
  buffer.appendBinary(string);
  callback();
}

function binaryMd5(data, callback) {
  var inputIsString = typeof data === 'string';
  var len = inputIsString ? data.length : data.size;
  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);
  var chunks = Math.ceil(len / chunkSize);
  var currentChunk = 0;
  var buffer = inputIsString ? new spark_md5__WEBPACK_IMPORTED_MODULE_2___default.a() : new spark_md5__WEBPACK_IMPORTED_MODULE_2___default.a.ArrayBuffer();

  var append = inputIsString ? appendString : appendBlob;

  function next() {
    setImmediateShim(loadNextChunk);
  }

  function done() {
    var raw = buffer.end(true);
    var base64 = rawToBase64(raw);
    callback(base64);
    buffer.destroy();
  }

  function loadNextChunk() {
    var start = currentChunk * chunkSize;
    var end = start + chunkSize;
    currentChunk++;
    if (currentChunk < chunks) {
      append(buffer, data, start, end, next);
    } else {
      append(buffer, data, start, end, done);
    }
  }
  loadNextChunk();
}

function stringMd5(string) {
  return spark_md5__WEBPACK_IMPORTED_MODULE_2___default.a.hash(string);
}

function rev(doc, deterministic_revs) {
  var clonedDoc = clone(doc);
  if (!deterministic_revs) {
    return Object(uuid__WEBPACK_IMPORTED_MODULE_1__["v4"])().replace(/-/g, '').toLowerCase();
  }

  delete clonedDoc._rev_tree;
  return stringMd5(JSON.stringify(clonedDoc));
}

var uuid = uuid__WEBPACK_IMPORTED_MODULE_1__["v4"]; // mimic old import, only v4 is ever used elsewhere

// We fetch all leafs of the revision tree, and sort them based on tree length
// and whether they were deleted, undeleted documents with the longest revision
// tree (most edits) win
// The final sort algorithm is slightly documented in a sidebar here:
// http://guide.couchdb.org/draft/conflicts.html
function winningRev(metadata) {
  var winningId;
  var winningPos;
  var winningDeleted;
  var toVisit = metadata.rev_tree.slice();
  var node;
  while ((node = toVisit.pop())) {
    var tree = node.ids;
    var branches = tree[2];
    var pos = node.pos;
    if (branches.length) { // non-leaf
      for (var i = 0, len = branches.length; i < len; i++) {
        toVisit.push({pos: pos + 1, ids: branches[i]});
      }
      continue;
    }
    var deleted = !!tree[1].deleted;
    var id = tree[0];
    // sort by deleted, then pos, then id
    if (!winningId || (winningDeleted !== deleted ? winningDeleted :
        winningPos !== pos ? winningPos < pos : winningId < id)) {
      winningId = id;
      winningPos = pos;
      winningDeleted = deleted;
    }
  }

  return winningPos + '-' + winningId;
}

// Pretty much all below can be combined into a higher order function to
// traverse revisions
// The return value from the callback will be passed as context to all
// children of that node
function traverseRevTree(revs, callback) {
  var toVisit = revs.slice();

  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var branches = tree[2];
    var newCtx =
      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});
    }
  }
}

function sortByPos(a, b) {
  return a.pos - b.pos;
}

function collectLeaves(revs) {
  var leaves = [];
  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {
    if (isLeaf) {
      leaves.push({rev: pos + "-" + id, pos: pos, opts: opts});
    }
  });
  leaves.sort(sortByPos).reverse();
  for (var i = 0, len = leaves.length; i < len; i++) {
    delete leaves[i].pos;
  }
  return leaves;
}

// returns revs of all conflicts that is leaves such that
// 1. are not deleted and
// 2. are different than winning revision
function collectConflicts(metadata) {
  var win = winningRev(metadata);
  var leaves = collectLeaves(metadata.rev_tree);
  var conflicts = [];
  for (var i = 0, len = leaves.length; i < len; i++) {
    var leaf = leaves[i];
    if (leaf.rev !== win && !leaf.opts.deleted) {
      conflicts.push(leaf.rev);
    }
  }
  return conflicts;
}

// compact a tree by marking its non-leafs as missing,
// and return a list of revs to delete
function compactTree(metadata) {
  var revs = [];
  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                               revHash, ctx, opts) {
    if (opts.status === 'available' && !isLeaf) {
      revs.push(pos + '-' + revHash);
      opts.status = 'missing';
    }
  });
  return revs;
}

// build up a list of all the paths to the leafs in this revision tree
function rootToLeaf(revs) {
  var paths = [];
  var toVisit = revs.slice();
  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var id = tree[0];
    var opts = tree[1];
    var branches = tree[2];
    var isLeaf = branches.length === 0;

    var history = node.history ? node.history.slice() : [];
    history.push({id: id, opts: opts});
    if (isLeaf) {
      paths.push({pos: (pos + 1 - history.length), ids: history});
    }
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: pos + 1, ids: branches[i], history: history});
    }
  }
  return paths.reverse();
}

// for a better overview of what this is doing, read:

function sortByPos$1(a, b) {
  return a.pos - b.pos;
}

// classic binary search
function binarySearch(arr, item, comparator) {
  var low = 0;
  var high = arr.length;
  var mid;
  while (low < high) {
    mid = (low + high) >>> 1;
    if (comparator(arr[mid], item) < 0) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return low;
}

// assuming the arr is sorted, insert the item in the proper place
function insertSorted(arr, item, comparator) {
  var idx = binarySearch(arr, item, comparator);
  arr.splice(idx, 0, item);
}

// Turn a path as a flat array into a tree with a single branch.
// If any should be stemmed from the beginning of the array, that's passed
// in as the second argument
function pathToTree(path, numStemmed) {
  var root;
  var leaf;
  for (var i = numStemmed, len = path.length; i < len; i++) {
    var node = path[i];
    var currentLeaf = [node.id, node.opts, []];
    if (leaf) {
      leaf[2].push(currentLeaf);
      leaf = currentLeaf;
    } else {
      root = leaf = currentLeaf;
    }
  }
  return root;
}

// compare the IDs of two trees
function compareTree(a, b) {
  return a[0] < b[0] ? -1 : 1;
}

// Merge two trees together
// The roots of tree1 and tree2 must be the same revision
function mergeTree(in_tree1, in_tree2) {
  var queue = [{tree1: in_tree1, tree2: in_tree2}];
  var conflicts = false;
  while (queue.length > 0) {
    var item = queue.pop();
    var tree1 = item.tree1;
    var tree2 = item.tree2;

    if (tree1[1].status || tree2[1].status) {
      tree1[1].status =
        (tree1[1].status ===  'available' ||
        tree2[1].status === 'available') ? 'available' : 'missing';
    }

    for (var i = 0; i < tree2[2].length; i++) {
      if (!tree1[2][0]) {
        conflicts = 'new_leaf';
        tree1[2][0] = tree2[2][i];
        continue;
      }

      var merged = false;
      for (var j = 0; j < tree1[2].length; j++) {
        if (tree1[2][j][0] === tree2[2][i][0]) {
          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});
          merged = true;
        }
      }
      if (!merged) {
        conflicts = 'new_branch';
        insertSorted(tree1[2], tree2[2][i], compareTree);
      }
    }
  }
  return {conflicts: conflicts, tree: in_tree1};
}

function doMerge(tree, path, dontExpand) {
  var restree = [];
  var conflicts = false;
  var merged = false;
  var res;

  if (!tree.length) {
    return {tree: [path], conflicts: 'new_leaf'};
  }

  for (var i = 0, len = tree.length; i < len; i++) {
    var branch = tree[i];
    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {
      // Paths start at the same position and have the same root, so they need
      // merged
      res = mergeTree(branch.ids, path.ids);
      restree.push({pos: branch.pos, ids: res.tree});
      conflicts = conflicts || res.conflicts;
      merged = true;
    } else if (dontExpand !== true) {
      // The paths start at a different position, take the earliest path and
      // traverse up until it as at the same point from root as the path we
      // want to merge.  If the keys match we return the longer path with the
      // other merged After stemming we dont want to expand the trees

      var t1 = branch.pos < path.pos ? branch : path;
      var t2 = branch.pos < path.pos ? path : branch;
      var diff = t2.pos - t1.pos;

      var candidateParents = [];

      var trees = [];
      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});
      while (trees.length > 0) {
        var item = trees.pop();
        if (item.diff === 0) {
          if (item.ids[0] === t2.ids[0]) {
            candidateParents.push(item);
          }
          continue;
        }
        var elements = item.ids[2];
        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {
          trees.push({
            ids: elements[j],
            diff: item.diff - 1,
            parent: item.ids,
            parentIdx: j
          });
        }
      }

      var el = candidateParents[0];

      if (!el) {
        restree.push(branch);
      } else {
        res = mergeTree(el.ids, t2.ids);
        el.parent[2][el.parentIdx] = res.tree;
        restree.push({pos: t1.pos, ids: t1.ids});
        conflicts = conflicts || res.conflicts;
        merged = true;
      }
    } else {
      restree.push(branch);
    }
  }

  // We didnt find
  if (!merged) {
    restree.push(path);
  }

  restree.sort(sortByPos$1);

  return {
    tree: restree,
    conflicts: conflicts || 'internal_node'
  };
}

// To ensure we dont grow the revision tree infinitely, we stem old revisions
function stem(tree, depth) {
  // First we break out the tree into a complete list of root to leaf paths
  var paths = rootToLeaf(tree);
  var stemmedRevs;

  var result;
  for (var i = 0, len = paths.length; i < len; i++) {
    // Then for each path, we cut off the start of the path based on the
    // `depth` to stem to, and generate a new set of flat trees
    var path = paths[i];
    var stemmed = path.ids;
    var node;
    if (stemmed.length > depth) {
      // only do the stemming work if we actually need to stem
      if (!stemmedRevs) {
        stemmedRevs = {}; // avoid allocating this object unnecessarily
      }
      var numStemmed = stemmed.length - depth;
      node = {
        pos: path.pos + numStemmed,
        ids: pathToTree(stemmed, numStemmed)
      };

      for (var s = 0; s < numStemmed; s++) {
        var rev = (path.pos + s) + '-' + stemmed[s].id;
        stemmedRevs[rev] = true;
      }
    } else { // no need to actually stem
      node = {
        pos: path.pos,
        ids: pathToTree(stemmed, 0)
      };
    }

    // Then we remerge all those flat trees together, ensuring that we dont
    // connect trees that would go beyond the depth limit
    if (result) {
      result = doMerge(result, node, true).tree;
    } else {
      result = [node];
    }
  }

  // this is memory-heavy per Chrome profiler, avoid unless we actually stemmed
  if (stemmedRevs) {
    traverseRevTree(result, function (isLeaf, pos, revHash) {
      // some revisions may have been removed in a branch but not in another
      delete stemmedRevs[pos + '-' + revHash];
    });
  }

  return {
    tree: result,
    revs: stemmedRevs ? Object.keys(stemmedRevs) : []
  };
}

function merge(tree, path, depth) {
  var newTree = doMerge(tree, path);
  var stemmed = stem(newTree.tree, depth);
  return {
    tree: stemmed.tree,
    stemmedRevs: stemmed.revs,
    conflicts: newTree.conflicts
  };
}

// return true if a rev exists in the rev tree, false otherwise
function revExists(revs, rev) {
  var toVisit = revs.slice();
  var splitRev = rev.split('-');
  var targetPos = parseInt(splitRev[0], 10);
  var targetId = splitRev[1];

  var node;
  while ((node = toVisit.pop())) {
    if (node.pos === targetPos && node.ids[0] === targetId) {
      return true;
    }
    var branches = node.ids[2];
    for (var i = 0, len = branches.length; i < len; i++) {
      toVisit.push({pos: node.pos + 1, ids: branches[i]});
    }
  }
  return false;
}

function getTrees(node) {
  return node.ids;
}

// check if a specific revision of a doc has been deleted
//  - metadata: the metadata object from the doc store
//  - rev: (optional) the revision to check. defaults to winning revision
function isDeleted(metadata, rev) {
  if (!rev) {
    rev = winningRev(metadata);
  }
  var id = rev.substring(rev.indexOf('-') + 1);
  var toVisit = metadata.rev_tree.map(getTrees);

  var tree;
  while ((tree = toVisit.pop())) {
    if (tree[0] === id) {
      return !!tree[1].deleted;
    }
    toVisit = toVisit.concat(tree[2]);
  }
}

function isLocalId(id) {
  return (/^_local/).test(id);
}

// returns the current leaf node for a given revision
function latest(rev, metadata) {
  var toVisit = metadata.rev_tree.slice();
  var node;
  while ((node = toVisit.pop())) {
    var pos = node.pos;
    var tree = node.ids;
    var id = tree[0];
    var opts = tree[1];
    var branches = tree[2];
    var isLeaf = branches.length === 0;

    var history = node.history ? node.history.slice() : [];
    history.push({id: id, pos: pos, opts: opts});

    if (isLeaf) {
      for (var i = 0, len = history.length; i < len; i++) {
        var historyNode = history[i];
        var historyRev = historyNode.pos + '-' + historyNode.id;

        if (historyRev === rev) {
          // return the rev of this leaf
          return pos + '-' + id;
        }
      }
    }

    for (var j = 0, l = branches.length; j < l; j++) {
      toVisit.push({pos: pos + 1, ids: branches[j], history: history});
    }
  }

  /* istanbul ignore next */
  throw new Error('Unable to resolve latest revision for id ' + metadata.id + ', rev ' + rev);
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(Changes$1, events__WEBPACK_IMPORTED_MODULE_6___default.a);

function tryCatchInChangeListener(self, change, pending, lastSeq) {
  // isolate try/catches to avoid V8 deoptimizations
  try {
    self.emit('change', change, pending, lastSeq);
  } catch (e) {
    guardedConsole('error', 'Error in .on("change", function):', e);
  }
}

function Changes$1(db, opts, callback) {
  events__WEBPACK_IMPORTED_MODULE_6___default.a.call(this);
  var self = this;
  this.db = db;
  opts = opts ? clone(opts) : {};
  var complete = opts.complete = once(function (err, resp) {
    if (err) {
      if (listenerCount(self, 'error') > 0) {
        self.emit('error', err);
      }
    } else {
      self.emit('complete', resp);
    }
    self.removeAllListeners();
    db.removeListener('destroyed', onDestroy);
  });
  if (callback) {
    self.on('complete', function (resp) {
      callback(null, resp);
    });
    self.on('error', callback);
  }
  function onDestroy() {
    self.cancel();
  }
  db.once('destroyed', onDestroy);

  opts.onChange = function (change, pending, lastSeq) {
    /* istanbul ignore if */
    if (self.isCancelled) {
      return;
    }
    tryCatchInChangeListener(self, change, pending, lastSeq);
  };

  var promise = new Promise(function (fulfill, reject) {
    opts.complete = function (err, res) {
      if (err) {
        reject(err);
      } else {
        fulfill(res);
      }
    };
  });
  self.once('cancel', function () {
    db.removeListener('destroyed', onDestroy);
    opts.complete(null, {status: 'cancelled'});
  });
  this.then = promise.then.bind(promise);
  this['catch'] = promise['catch'].bind(promise);
  this.then(function (result) {
    complete(null, result);
  }, complete);



  if (!db.taskqueue.isReady) {
    db.taskqueue.addTask(function (failed) {
      if (failed) {
        opts.complete(failed);
      } else if (self.isCancelled) {
        self.emit('cancel');
      } else {
        self.validateChanges(opts);
      }
    });
  } else {
    self.validateChanges(opts);
  }
}
Changes$1.prototype.cancel = function () {
  this.isCancelled = true;
  if (this.db.taskqueue.isReady) {
    this.emit('cancel');
  }
};
function processChange(doc, metadata, opts) {
  var changeList = [{rev: doc._rev}];
  if (opts.style === 'all_docs') {
    changeList = collectLeaves(metadata.rev_tree)
    .map(function (x) { return {rev: x.rev}; });
  }
  var change = {
    id: metadata.id,
    changes: changeList,
    doc: doc
  };

  if (isDeleted(metadata, doc._rev)) {
    change.deleted = true;
  }
  if (opts.conflicts) {
    change.doc._conflicts = collectConflicts(metadata);
    if (!change.doc._conflicts.length) {
      delete change.doc._conflicts;
    }
  }
  return change;
}

Changes$1.prototype.validateChanges = function (opts) {
  var callback = opts.complete;
  var self = this;

  /* istanbul ignore else */
  if (PouchDB._changesFilterPlugin) {
    PouchDB._changesFilterPlugin.validate(opts, function (err) {
      if (err) {
        return callback(err);
      }
      self.doChanges(opts);
    });
  } else {
    self.doChanges(opts);
  }
};

Changes$1.prototype.doChanges = function (opts) {
  var self = this;
  var callback = opts.complete;

  opts = clone(opts);
  if ('live' in opts && !('continuous' in opts)) {
    opts.continuous = opts.live;
  }
  opts.processChange = processChange;

  if (opts.since === 'latest') {
    opts.since = 'now';
  }
  if (!opts.since) {
    opts.since = 0;
  }
  if (opts.since === 'now') {
    this.db.info().then(function (info) {
      /* istanbul ignore if */
      if (self.isCancelled) {
        callback(null, {status: 'cancelled'});
        return;
      }
      opts.since = info.update_seq;
      self.doChanges(opts);
    }, callback);
    return;
  }

  /* istanbul ignore else */
  if (PouchDB._changesFilterPlugin) {
    PouchDB._changesFilterPlugin.normalize(opts);
    if (PouchDB._changesFilterPlugin.shouldFilter(this, opts)) {
      return PouchDB._changesFilterPlugin.filter(this, opts);
    }
  } else {
    ['doc_ids', 'filter', 'selector', 'view'].forEach(function (key) {
      if (key in opts) {
        guardedConsole('warn',
          'The "' + key + '" option was passed in to changes/replicate, ' +
          'but pouchdb-changes-filter plugin is not installed, so it ' +
          'was ignored. Please install the plugin to enable filtering.'
        );
      }
    });
  }

  if (!('descending' in opts)) {
    opts.descending = false;
  }

  // 0 and 1 should return 1 document
  opts.limit = opts.limit === 0 ? 1 : opts.limit;
  opts.complete = callback;
  var newPromise = this.db._changes(opts);
  /* istanbul ignore else */
  if (newPromise && typeof newPromise.cancel === 'function') {
    var cancel = self.cancel;
    self.cancel = argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
      newPromise.cancel();
      cancel.apply(this, args);
    });
  }
};

/*
 * A generic pouch adapter
 */

function compare(left, right) {
  return left < right ? -1 : left > right ? 1 : 0;
}

// Wrapper for functions that call the bulkdocs api with a single doc,
// if the first result is an error, return an error
function yankError(callback, docId) {
  return function (err, results) {
    if (err || (results[0] && results[0].error)) {
      err = err || results[0];
      err.docId = docId;
      callback(err);
    } else {
      callback(null, results.length ? results[0]  : results);
    }
  };
}

// clean docs given to us by the user
function cleanDocs(docs) {
  for (var i = 0; i < docs.length; i++) {
    var doc = docs[i];
    if (doc._deleted) {
      delete doc._attachments; // ignore atts for deleted docs
    } else if (doc._attachments) {
      // filter out extraneous keys from _attachments
      var atts = Object.keys(doc._attachments);
      for (var j = 0; j < atts.length; j++) {
        var att = atts[j];
        doc._attachments[att] = pick(doc._attachments[att],
          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);
      }
    }
  }
}

// compare two docs, first by _id then by _rev
function compareByIdThenRev(a, b) {
  var idCompare = compare(a._id, b._id);
  if (idCompare !== 0) {
    return idCompare;
  }
  var aStart = a._revisions ? a._revisions.start : 0;
  var bStart = b._revisions ? b._revisions.start : 0;
  return compare(aStart, bStart);
}

// for every node in a revision tree computes its distance from the closest
// leaf
function computeHeight(revs) {
  var height = {};
  var edges = [];
  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {
    var rev$$1 = pos + "-" + id;
    if (isLeaf) {
      height[rev$$1] = 0;
    }
    if (prnt !== undefined) {
      edges.push({from: prnt, to: rev$$1});
    }
    return rev$$1;
  });

  edges.reverse();
  edges.forEach(function (edge) {
    if (height[edge.from] === undefined) {
      height[edge.from] = 1 + height[edge.to];
    } else {
      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);
    }
  });
  return height;
}

function allDocsKeysParse(opts) {
  var keys =  ('limit' in opts) ?
    opts.keys.slice(opts.skip, opts.limit + opts.skip) :
    (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;
  opts.keys = keys;
  opts.skip = 0;
  delete opts.limit;
  if (opts.descending) {
    keys.reverse();
    opts.descending = false;
  }
}

// all compaction is done in a queue, to avoid attaching
// too many listeners at once
function doNextCompaction(self) {
  var task = self._compactionQueue[0];
  var opts = task.opts;
  var callback = task.callback;
  self.get('_local/compaction').catch(function () {
    return false;
  }).then(function (doc) {
    if (doc && doc.last_seq) {
      opts.last_seq = doc.last_seq;
    }
    self._compact(opts, function (err, res) {
      /* istanbul ignore if */
      if (err) {
        callback(err);
      } else {
        callback(null, res);
      }
      immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
        self._compactionQueue.shift();
        if (self._compactionQueue.length) {
          doNextCompaction(self);
        }
      });
    });
  });
}

function attachmentNameError(name) {
  if (name.charAt(0) === '_') {
    return name + ' is not a valid attachment name, attachment ' +
      'names cannot start with \'_\'';
  }
  return false;
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(AbstractPouchDB, events__WEBPACK_IMPORTED_MODULE_6___default.a);

function AbstractPouchDB() {
  events__WEBPACK_IMPORTED_MODULE_6___default.a.call(this);

  // re-bind prototyped methods
  for (var p in AbstractPouchDB.prototype) {
    if (typeof this[p] === 'function') {
      this[p] = this[p].bind(this);
    }
  }
}

AbstractPouchDB.prototype.post =
  adapterFun('post', function (doc, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  if (typeof doc !== 'object' || Array.isArray(doc)) {
    return callback(createError(NOT_AN_OBJECT));
  }
  this.bulkDocs({docs: [doc]}, opts, yankError(callback, doc._id));
});

AbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = {};
  }
  if (typeof doc !== 'object' || Array.isArray(doc)) {
    return cb(createError(NOT_AN_OBJECT));
  }
  invalidIdError(doc._id);
  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {
    if (doc._deleted) {
      return this._removeLocal(doc, cb);
    } else {
      return this._putLocal(doc, cb);
    }
  }
  var self = this;
  if (opts.force && doc._rev) {
    transformForceOptionToNewEditsOption();
    putDoc(function (err) {
      var result = err ? null : {ok: true, id: doc._id, rev: doc._rev};
      cb(err, result);
    });
  } else {
    putDoc(cb);
  }

  function transformForceOptionToNewEditsOption() {
    var parts = doc._rev.split('-');
    var oldRevId = parts[1];
    var oldRevNum = parseInt(parts[0], 10);

    var newRevNum = oldRevNum + 1;
    var newRevId = rev();

    doc._revisions = {
      start: newRevNum,
      ids: [newRevId, oldRevId]
    };
    doc._rev = newRevNum + '-' + newRevId;
    opts.new_edits = false;
  }
  function putDoc(next) {
    if (typeof self._put === 'function' && opts.new_edits !== false) {
      self._put(doc, opts, next);
    } else {
      self.bulkDocs({docs: [doc]}, opts, yankError(next, doc._id));
    }
  }
});

AbstractPouchDB.prototype.putAttachment =
  adapterFun('putAttachment', function (docId, attachmentId, rev$$1,
                                              blob, type) {
  var api = this;
  if (typeof type === 'function') {
    type = blob;
    blob = rev$$1;
    rev$$1 = null;
  }
  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267
  /* istanbul ignore if */
  if (typeof type === 'undefined') {
    type = blob;
    blob = rev$$1;
    rev$$1 = null;
  }
  if (!type) {
    guardedConsole('warn', 'Attachment', attachmentId, 'on document', docId, 'is missing content_type');
  }

  function createAttachment(doc) {
    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;
    doc._attachments = doc._attachments || {};
    doc._attachments[attachmentId] = {
      content_type: type,
      data: blob,
      revpos: ++prevrevpos
    };
    return api.put(doc);
  }

  return api.get(docId).then(function (doc) {
    if (doc._rev !== rev$$1) {
      throw createError(REV_CONFLICT);
    }

    return createAttachment(doc);
  }, function (err) {
     // create new doc
    /* istanbul ignore else */
    if (err.reason === MISSING_DOC.message) {
      return createAttachment({_id: docId});
    } else {
      throw err;
    }
  });
});

AbstractPouchDB.prototype.removeAttachment =
  adapterFun('removeAttachment', function (docId, attachmentId, rev$$1,
                                                 callback) {
  var self = this;
  self.get(docId, function (err, obj) {
    /* istanbul ignore if */
    if (err) {
      callback(err);
      return;
    }
    if (obj._rev !== rev$$1) {
      callback(createError(REV_CONFLICT));
      return;
    }
    /* istanbul ignore if */
    if (!obj._attachments) {
      return callback();
    }
    delete obj._attachments[attachmentId];
    if (Object.keys(obj._attachments).length === 0) {
      delete obj._attachments;
    }
    self.put(obj, callback);
  });
});

AbstractPouchDB.prototype.remove =
  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {
  var doc;
  if (typeof optsOrRev === 'string') {
    // id, rev, opts, callback style
    doc = {
      _id: docOrId,
      _rev: optsOrRev
    };
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
  } else {
    // doc, opts, callback style
    doc = docOrId;
    if (typeof optsOrRev === 'function') {
      callback = optsOrRev;
      opts = {};
    } else {
      callback = opts;
      opts = optsOrRev;
    }
  }
  opts = opts || {};
  opts.was_delete = true;
  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};
  newDoc._deleted = true;
  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {
    return this._removeLocal(doc, callback);
  }
  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback, newDoc._id));
});

AbstractPouchDB.prototype.revsDiff =
  adapterFun('revsDiff', function (req, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  var ids = Object.keys(req);

  if (!ids.length) {
    return callback(null, {});
  }

  var count = 0;
  var missing = new ExportedMap();

  function addToMissing(id, revId) {
    if (!missing.has(id)) {
      missing.set(id, {missing: []});
    }
    missing.get(id).missing.push(revId);
  }

  function processDoc(id, rev_tree) {
    // Is this fast enough? Maybe we should switch to a set simulated by a map
    var missingForId = req[id].slice(0);
    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,
      opts) {
        var rev$$1 = pos + '-' + revHash;
        var idx = missingForId.indexOf(rev$$1);
        if (idx === -1) {
          return;
        }

        missingForId.splice(idx, 1);
        /* istanbul ignore if */
        if (opts.status !== 'available') {
          addToMissing(id, rev$$1);
        }
      });

    // Traversing the tree is synchronous, so now `missingForId` contains
    // revisions that were not found in the tree
    missingForId.forEach(function (rev$$1) {
      addToMissing(id, rev$$1);
    });
  }

  ids.map(function (id) {
    this._getRevisionTree(id, function (err, rev_tree) {
      if (err && err.status === 404 && err.message === 'missing') {
        missing.set(id, {missing: req[id]});
      } else if (err) {
        /* istanbul ignore next */
        return callback(err);
      } else {
        processDoc(id, rev_tree);
      }

      if (++count === ids.length) {
        // convert LazyMap to object
        var missingObj = {};
        missing.forEach(function (value, key) {
          missingObj[key] = value;
        });
        return callback(null, missingObj);
      }
    });
  }, this);
});

// _bulk_get API for faster replication, as described in
// https://github.com/apache/couchdb-chttpd/pull/33
// At the "abstract" level, it will just run multiple get()s in
// parallel, because this isn't much of a performance cost
// for local databases (except the cost of multiple transactions, which is
// small). The http adapter overrides this in order
// to do a more efficient single HTTP request.
AbstractPouchDB.prototype.bulkGet =
  adapterFun('bulkGet', function (opts, callback) {
  bulkGet(this, opts, callback);
});

// compact one document and fire callback
// by compacting we mean removing all revisions which
// are further from the leaf in revision tree than max_height
AbstractPouchDB.prototype.compactDocument =
  adapterFun('compactDocument', function (docId, maxHeight, callback) {
  var self = this;
  this._getRevisionTree(docId, function (err, revTree) {
    /* istanbul ignore if */
    if (err) {
      return callback(err);
    }
    var height = computeHeight(revTree);
    var candidates = [];
    var revs = [];
    Object.keys(height).forEach(function (rev$$1) {
      if (height[rev$$1] > maxHeight) {
        candidates.push(rev$$1);
      }
    });

    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {
      var rev$$1 = pos + '-' + revHash;
      if (opts.status === 'available' && candidates.indexOf(rev$$1) !== -1) {
        revs.push(rev$$1);
      }
    });
    self._doCompaction(docId, revs, callback);
  });
});

// compact the whole database using single document
// compaction
AbstractPouchDB.prototype.compact =
  adapterFun('compact', function (opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  var self = this;
  opts = opts || {};

  self._compactionQueue = self._compactionQueue || [];
  self._compactionQueue.push({opts: opts, callback: callback});
  if (self._compactionQueue.length === 1) {
    doNextCompaction(self);
  }
});
AbstractPouchDB.prototype._compact = function (opts, callback) {
  var self = this;
  var changesOpts = {
    return_docs: false,
    last_seq: opts.last_seq || 0
  };
  var promises = [];

  function onChange(row) {
    promises.push(self.compactDocument(row.id, 0));
  }
  function onComplete(resp) {
    var lastSeq = resp.last_seq;
    Promise.all(promises).then(function () {
      return upsert(self, '_local/compaction', function deltaFunc(doc) {
        if (!doc.last_seq || doc.last_seq < lastSeq) {
          doc.last_seq = lastSeq;
          return doc;
        }
        return false; // somebody else got here first, don't update
      });
    }).then(function () {
      callback(null, {ok: true});
    }).catch(callback);
  }
  self.changes(changesOpts)
    .on('change', onChange)
    .on('complete', onComplete)
    .on('error', callback);
};

/* Begin api wrappers. Specific functionality to storage belongs in the
   _[method] */
AbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {
  if (typeof opts === 'function') {
    cb = opts;
    opts = {};
  }
  if (typeof id !== 'string') {
    return cb(createError(INVALID_ID));
  }
  if (isLocalId(id) && typeof this._getLocal === 'function') {
    return this._getLocal(id, cb);
  }
  var leaves = [], self = this;

  function finishOpenRevs() {
    var result = [];
    var count = leaves.length;
    /* istanbul ignore if */
    if (!count) {
      return cb(null, result);
    }

    // order with open_revs is unspecified
    leaves.forEach(function (leaf) {
      self.get(id, {
        rev: leaf,
        revs: opts.revs,
        latest: opts.latest,
        attachments: opts.attachments,
        binary: opts.binary
      }, function (err, doc) {
        if (!err) {
          // using latest=true can produce duplicates
          var existing;
          for (var i = 0, l = result.length; i < l; i++) {
            if (result[i].ok && result[i].ok._rev === doc._rev) {
              existing = true;
              break;
            }
          }
          if (!existing) {
            result.push({ok: doc});
          }
        } else {
          result.push({missing: leaf});
        }
        count--;
        if (!count) {
          cb(null, result);
        }
      });
    });
  }

  if (opts.open_revs) {
    if (opts.open_revs === "all") {
      this._getRevisionTree(id, function (err, rev_tree) {
        /* istanbul ignore if */
        if (err) {
          return cb(err);
        }
        leaves = collectLeaves(rev_tree).map(function (leaf) {
          return leaf.rev;
        });
        finishOpenRevs();
      });
    } else {
      if (Array.isArray(opts.open_revs)) {
        leaves = opts.open_revs;
        for (var i = 0; i < leaves.length; i++) {
          var l = leaves[i];
          // looks like it's the only thing couchdb checks
          if (!(typeof (l) === "string" && /^\d+-/.test(l))) {
            return cb(createError(INVALID_REV));
          }
        }
        finishOpenRevs();
      } else {
        return cb(createError(UNKNOWN_ERROR, 'function_clause'));
      }
    }
    return; // open_revs does not like other options
  }

  return this._get(id, opts, function (err, result) {
    if (err) {
      err.docId = id;
      return cb(err);
    }

    var doc = result.doc;
    var metadata = result.metadata;
    var ctx = result.ctx;

    if (opts.conflicts) {
      var conflicts = collectConflicts(metadata);
      if (conflicts.length) {
        doc._conflicts = conflicts;
      }
    }

    if (isDeleted(metadata, doc._rev)) {
      doc._deleted = true;
    }

    if (opts.revs || opts.revs_info) {
      var splittedRev = doc._rev.split('-');
      var revNo       = parseInt(splittedRev[0], 10);
      var revHash     = splittedRev[1];

      var paths = rootToLeaf(metadata.rev_tree);
      var path = null;

      for (var i = 0; i < paths.length; i++) {
        var currentPath = paths[i];
        var hashIndex = currentPath.ids.map(function (x) { return x.id; })
          .indexOf(revHash);
        var hashFoundAtRevPos = hashIndex === (revNo - 1);

        if (hashFoundAtRevPos || (!path && hashIndex !== -1)) {
          path = currentPath;
        }
      }

      /* istanbul ignore if */
      if (!path) {
        err = new Error('invalid rev tree');
        err.docId = id;
        return cb(err);
      }

      var indexOfRev = path.ids.map(function (x) { return x.id; })
        .indexOf(doc._rev.split('-')[1]) + 1;
      var howMany = path.ids.length - indexOfRev;
      path.ids.splice(indexOfRev, howMany);
      path.ids.reverse();

      if (opts.revs) {
        doc._revisions = {
          start: (path.pos + path.ids.length) - 1,
          ids: path.ids.map(function (rev$$1) {
            return rev$$1.id;
          })
        };
      }
      if (opts.revs_info) {
        var pos =  path.pos + path.ids.length;
        doc._revs_info = path.ids.map(function (rev$$1) {
          pos--;
          return {
            rev: pos + '-' + rev$$1.id,
            status: rev$$1.opts.status
          };
        });
      }
    }

    if (opts.attachments && doc._attachments) {
      var attachments = doc._attachments;
      var count = Object.keys(attachments).length;
      if (count === 0) {
        return cb(null, doc);
      }
      Object.keys(attachments).forEach(function (key) {
        this._getAttachment(doc._id, key, attachments[key], {
          // Previously the revision handling was done in adapter.js
          // getAttachment, however since idb-next doesnt we need to
          // pass the rev through
          rev: doc._rev,
          binary: opts.binary,
          ctx: ctx
        }, function (err, data) {
          var att = doc._attachments[key];
          att.data = data;
          delete att.stub;
          delete att.length;
          if (!--count) {
            cb(null, doc);
          }
        });
      }, self);
    } else {
      if (doc._attachments) {
        for (var key in doc._attachments) {
          /* istanbul ignore else */
          if (doc._attachments.hasOwnProperty(key)) {
            doc._attachments[key].stub = true;
          }
        }
      }
      cb(null, doc);
    }
  });
});

// TODO: I dont like this, it forces an extra read for every
// attachment read and enforces a confusing api between
// adapter.js and the adapter implementation
AbstractPouchDB.prototype.getAttachment =
  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {
  var self = this;
  if (opts instanceof Function) {
    callback = opts;
    opts = {};
  }
  this._get(docId, opts, function (err, res) {
    if (err) {
      return callback(err);
    }
    if (res.doc._attachments && res.doc._attachments[attachmentId]) {
      opts.ctx = res.ctx;
      opts.binary = true;
      self._getAttachment(docId, attachmentId,
                          res.doc._attachments[attachmentId], opts, callback);
    } else {
      return callback(createError(MISSING_DOC));
    }
  });
});

AbstractPouchDB.prototype.allDocs =
  adapterFun('allDocs', function (opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;
  if (opts.start_key) {
    opts.startkey = opts.start_key;
  }
  if (opts.end_key) {
    opts.endkey = opts.end_key;
  }
  if ('keys' in opts) {
    if (!Array.isArray(opts.keys)) {
      return callback(new TypeError('options.keys must be an array'));
    }
    var incompatibleOpt =
      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {
      return incompatibleOpt in opts;
    })[0];
    if (incompatibleOpt) {
      callback(createError(QUERY_PARSE_ERROR,
        'Query parameter `' + incompatibleOpt +
        '` is not compatible with multi-get'
      ));
      return;
    }
    if (!isRemote(this)) {
      allDocsKeysParse(opts);
      if (opts.keys.length === 0) {
        return this._allDocs({limit: 0}, callback);
      }
    }
  }

  return this._allDocs(opts, callback);
});

AbstractPouchDB.prototype.changes = function (opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  opts = opts || {};

  // By default set return_docs to false if the caller has opts.live = true,
  // this will prevent us from collecting the set of changes indefinitely
  // resulting in growing memory
  opts.return_docs = ('return_docs' in opts) ? opts.return_docs : !opts.live;

  return new Changes$1(this, opts, callback);
};

AbstractPouchDB.prototype.close = adapterFun('close', function (callback) {
  this._closed = true;
  this.emit('closed');
  return this._close(callback);
});

AbstractPouchDB.prototype.info = adapterFun('info', function (callback) {
  var self = this;
  this._info(function (err, info) {
    if (err) {
      return callback(err);
    }
    // assume we know better than the adapter, unless it informs us
    info.db_name = info.db_name || self.name;
    info.auto_compaction = !!(self.auto_compaction && !isRemote(self));
    info.adapter = self.adapter;
    callback(null, info);
  });
});

AbstractPouchDB.prototype.id = adapterFun('id', function (callback) {
  return this._id(callback);
});

/* istanbul ignore next */
AbstractPouchDB.prototype.type = function () {
  return (typeof this._type === 'function') ? this._type() : this.adapter;
};

AbstractPouchDB.prototype.bulkDocs =
  adapterFun('bulkDocs', function (req, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  opts = opts || {};

  if (Array.isArray(req)) {
    req = {
      docs: req
    };
  }

  if (!req || !req.docs || !Array.isArray(req.docs)) {
    return callback(createError(MISSING_BULK_DOCS));
  }

  for (var i = 0; i < req.docs.length; ++i) {
    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {
      return callback(createError(NOT_AN_OBJECT));
    }
  }

  var attachmentError;
  req.docs.forEach(function (doc) {
    if (doc._attachments) {
      Object.keys(doc._attachments).forEach(function (name) {
        attachmentError = attachmentError || attachmentNameError(name);
        if (!doc._attachments[name].content_type) {
          guardedConsole('warn', 'Attachment', name, 'on document', doc._id, 'is missing content_type');
        }
      });
    }
  });

  if (attachmentError) {
    return callback(createError(BAD_REQUEST, attachmentError));
  }

  if (!('new_edits' in opts)) {
    if ('new_edits' in req) {
      opts.new_edits = req.new_edits;
    } else {
      opts.new_edits = true;
    }
  }

  var adapter = this;
  if (!opts.new_edits && !isRemote(adapter)) {
    // ensure revisions of the same doc are sorted, so that
    // the local adapter processes them correctly (#2935)
    req.docs.sort(compareByIdThenRev);
  }

  cleanDocs(req.docs);

  // in the case of conflicts, we want to return the _ids to the user
  // however, the underlying adapter may destroy the docs array, so
  // create a copy here
  var ids = req.docs.map(function (doc) {
    return doc._id;
  });

  return this._bulkDocs(req, opts, function (err, res) {
    if (err) {
      return callback(err);
    }
    if (!opts.new_edits) {
      // this is what couch does when new_edits is false
      res = res.filter(function (x) {
        return x.error;
      });
    }
    // add ids for error/conflict responses (not required for CouchDB)
    if (!isRemote(adapter)) {
      for (var i = 0, l = res.length; i < l; i++) {
        res[i].id = res[i].id || ids[i];
      }
    }

    callback(null, res);
  });
});

AbstractPouchDB.prototype.registerDependentDatabase =
  adapterFun('registerDependentDatabase', function (dependentDb,
                                                          callback) {
  var depDB = new this.constructor(dependentDb, this.__opts);

  function diffFun(doc) {
    doc.dependentDbs = doc.dependentDbs || {};
    if (doc.dependentDbs[dependentDb]) {
      return false; // no update required
    }
    doc.dependentDbs[dependentDb] = true;
    return doc;
  }
  upsert(this, '_local/_pouch_dependentDbs', diffFun)
    .then(function () {
      callback(null, {db: depDB});
    }).catch(callback);
});

AbstractPouchDB.prototype.destroy =
  adapterFun('destroy', function (opts, callback) {

  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }

  var self = this;
  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;

  function destroyDb() {
    // call destroy method of the particular adaptor
    self._destroy(opts, function (err, resp) {
      if (err) {
        return callback(err);
      }
      self._destroyed = true;
      self.emit('destroyed');
      callback(null, resp || { 'ok': true });
    });
  }

  if (isRemote(self)) {
    // no need to check for dependent DBs if it's a remote DB
    return destroyDb();
  }

  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {
    if (err) {
      /* istanbul ignore if */
      if (err.status !== 404) {
        return callback(err);
      } else { // no dependencies
        return destroyDb();
      }
    }
    var dependentDbs = localDoc.dependentDbs;
    var PouchDB = self.constructor;
    var deletedMap = Object.keys(dependentDbs).map(function (name) {
      // use_prefix is only false in the browser
      /* istanbul ignore next */
      var trueName = usePrefix ?
        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;
      return new PouchDB(trueName, self.__opts).destroy();
    });
    Promise.all(deletedMap).then(destroyDb, callback);
  });
});

function TaskQueue() {
  this.isReady = false;
  this.failed = false;
  this.queue = [];
}

TaskQueue.prototype.execute = function () {
  var fun;
  if (this.failed) {
    while ((fun = this.queue.shift())) {
      fun(this.failed);
    }
  } else {
    while ((fun = this.queue.shift())) {
      fun();
    }
  }
};

TaskQueue.prototype.fail = function (err) {
  this.failed = err;
  this.execute();
};

TaskQueue.prototype.ready = function (db) {
  this.isReady = true;
  this.db = db;
  this.execute();
};

TaskQueue.prototype.addTask = function (fun) {
  this.queue.push(fun);
  if (this.failed) {
    this.execute();
  }
};

function parseAdapter(name, opts) {
  var match = name.match(/([a-z-]*):\/\/(.*)/);
  if (match) {
    // the http adapter expects the fully qualified name
    return {
      name: /https?/.test(match[1]) ? match[1] + '://' + match[2] : match[2],
      adapter: match[1]
    };
  }

  var adapters = PouchDB.adapters;
  var preferredAdapters = PouchDB.preferredAdapters;
  var prefix = PouchDB.prefix;
  var adapterName = opts.adapter;

  if (!adapterName) { // automatically determine adapter
    for (var i = 0; i < preferredAdapters.length; ++i) {
      adapterName = preferredAdapters[i];
      // check for browsers that have been upgraded from websql-only to websql+idb
      /* istanbul ignore if */
      if (adapterName === 'idb' && 'websql' in adapters &&
          hasLocalStorage() && localStorage['_pouch__websqldb_' + prefix + name]) {
        // log it, because this can be confusing during development
        guardedConsole('log', 'PouchDB is downgrading "' + name + '" to WebSQL to' +
          ' avoid data loss, because it was already opened with WebSQL.');
        continue; // keep using websql to avoid user data loss
      }
      break;
    }
  }

  var adapter = adapters[adapterName];

  // if adapter is invalid, then an error will be thrown later
  var usePrefix = (adapter && 'use_prefix' in adapter) ?
    adapter.use_prefix : true;

  return {
    name: usePrefix ? (prefix + name) : name,
    adapter: adapterName
  };
}

// OK, so here's the deal. Consider this code:
//     var db1 = new PouchDB('foo');
//     var db2 = new PouchDB('foo');
//     db1.destroy();
// ^ these two both need to emit 'destroyed' events,
// as well as the PouchDB constructor itself.
// So we have one db object (whichever one got destroy() called on it)
// responsible for emitting the initial event, which then gets emitted
// by the constructor, which then broadcasts it to any other dbs
// that may have been created with the same name.
function prepareForDestruction(self) {

  function onDestroyed(from_constructor) {
    self.removeListener('closed', onClosed);
    if (!from_constructor) {
      self.constructor.emit('destroyed', self.name);
    }
  }

  function onClosed() {
    self.removeListener('destroyed', onDestroyed);
    self.constructor.emit('unref', self);
  }

  self.once('destroyed', onDestroyed);
  self.once('closed', onClosed);
  self.constructor.emit('ref', self);
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(PouchDB, AbstractPouchDB);
function PouchDB(name, opts) {
  // In Node our test suite only tests this for PouchAlt unfortunately
  /* istanbul ignore if */
  if (!(this instanceof PouchDB)) {
    return new PouchDB(name, opts);
  }

  var self = this;
  opts = opts || {};

  if (name && typeof name === 'object') {
    opts = name;
    name = opts.name;
    delete opts.name;
  }

  if (opts.deterministic_revs === undefined) {
    opts.deterministic_revs = true;
  }

  this.__opts = opts = clone(opts);

  self.auto_compaction = opts.auto_compaction;
  self.prefix = PouchDB.prefix;

  if (typeof name !== 'string') {
    throw new Error('Missing/invalid DB name');
  }

  var prefixedName = (opts.prefix || '') + name;
  var backend = parseAdapter(prefixedName, opts);

  opts.name = backend.name;
  opts.adapter = opts.adapter || backend.adapter;

  self.name = name;
  self._adapter = opts.adapter;
  PouchDB.emit('debug', ['adapter', 'Picked adapter: ', opts.adapter]);

  if (!PouchDB.adapters[opts.adapter] ||
      !PouchDB.adapters[opts.adapter].valid()) {
    throw new Error('Invalid Adapter: ' + opts.adapter);
  }

  AbstractPouchDB.call(self);
  self.taskqueue = new TaskQueue();

  self.adapter = opts.adapter;

  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {
    if (err) {
      return self.taskqueue.fail(err);
    }
    prepareForDestruction(self);

    self.emit('created', self);
    PouchDB.emit('created', self.name);
    self.taskqueue.ready(self);
  });

}

// AbortController was introduced quite a while after fetch and
// isnt required for PouchDB to function so polyfill if needed
var a = (typeof AbortController !== 'undefined')
    ? AbortController
    : function () { return {abort: function () {}}; };

var f$1 = fetch;
var h = Headers;

PouchDB.adapters = {};
PouchDB.preferredAdapters = [];

PouchDB.prefix = '_pouch_';

var eventEmitter = new events__WEBPACK_IMPORTED_MODULE_6___default.a();

function setUpEventEmitter(Pouch) {
  Object.keys(events__WEBPACK_IMPORTED_MODULE_6___default.a.prototype).forEach(function (key) {
    if (typeof events__WEBPACK_IMPORTED_MODULE_6___default.a.prototype[key] === 'function') {
      Pouch[key] = eventEmitter[key].bind(eventEmitter);
    }
  });

  // these are created in constructor.js, and allow us to notify each DB with
  // the same name that it was destroyed, via the constructor object
  var destructListeners = Pouch._destructionListeners = new ExportedMap();

  Pouch.on('ref', function onConstructorRef(db) {
    if (!destructListeners.has(db.name)) {
      destructListeners.set(db.name, []);
    }
    destructListeners.get(db.name).push(db);
  });

  Pouch.on('unref', function onConstructorUnref(db) {
    if (!destructListeners.has(db.name)) {
      return;
    }
    var dbList = destructListeners.get(db.name);
    var pos = dbList.indexOf(db);
    if (pos < 0) {
      /* istanbul ignore next */
      return;
    }
    dbList.splice(pos, 1);
    if (dbList.length > 1) {
      /* istanbul ignore next */
      destructListeners.set(db.name, dbList);
    } else {
      destructListeners.delete(db.name);
    }
  });

  Pouch.on('destroyed', function onConstructorDestroyed(name) {
    if (!destructListeners.has(name)) {
      return;
    }
    var dbList = destructListeners.get(name);
    destructListeners.delete(name);
    dbList.forEach(function (db) {
      db.emit('destroyed',true);
    });
  });
}

setUpEventEmitter(PouchDB);

PouchDB.adapter = function (id, obj, addToPreferredAdapters) {
  /* istanbul ignore else */
  if (obj.valid()) {
    PouchDB.adapters[id] = obj;
    if (addToPreferredAdapters) {
      PouchDB.preferredAdapters.push(id);
    }
  }
};

PouchDB.plugin = function (obj) {
  if (typeof obj === 'function') { // function style for plugins
    obj(PouchDB);
  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0) {
    throw new Error('Invalid plugin: got "' + obj + '", expected an object or a function');
  } else {
    Object.keys(obj).forEach(function (id) { // object style for plugins
      PouchDB.prototype[id] = obj[id];
    });
  }
  if (this.__defaults) {
    PouchDB.__defaults = $inject_Object_assign({}, this.__defaults);
  }
  return PouchDB;
};

PouchDB.defaults = function (defaultOpts) {
  function PouchAlt(name, opts) {
    if (!(this instanceof PouchAlt)) {
      return new PouchAlt(name, opts);
    }

    opts = opts || {};

    if (name && typeof name === 'object') {
      opts = name;
      name = opts.name;
      delete opts.name;
    }

    opts = $inject_Object_assign({}, PouchAlt.__defaults, opts);
    PouchDB.call(this, name, opts);
  }

  inherits__WEBPACK_IMPORTED_MODULE_5___default()(PouchAlt, PouchDB);

  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();
  Object.keys(PouchDB).forEach(function (key) {
    if (!(key in PouchAlt)) {
      PouchAlt[key] = PouchDB[key];
    }
  });

  // make default options transitive
  // https://github.com/pouchdb/pouchdb/issues/5922
  PouchAlt.__defaults = $inject_Object_assign({}, this.__defaults, defaultOpts);

  return PouchAlt;
};

PouchDB.fetch = function (url, opts) {
  return f$1(url, opts);
};

// managed automatically by set-version.js
var version = "7.2.2";

// this would just be "return doc[field]", but fields
// can be "deep" due to dot notation
function getFieldFromDoc(doc, parsedField) {
  var value = doc;
  for (var i = 0, len = parsedField.length; i < len; i++) {
    var key = parsedField[i];
    value = value[key];
    if (!value) {
      break;
    }
  }
  return value;
}

function compare$1(left, right) {
  return left < right ? -1 : left > right ? 1 : 0;
}

// Converts a string in dot notation to an array of its components, with backslash escaping
function parseField(fieldName) {
  // fields may be deep (e.g. "foo.bar.baz"), so parse
  var fields = [];
  var current = '';
  for (var i = 0, len = fieldName.length; i < len; i++) {
    var ch = fieldName[i];
    if (ch === '.') {
      if (i > 0 && fieldName[i - 1] === '\\') { // escaped delimiter
        current = current.substring(0, current.length - 1) + '.';
      } else { // not escaped, so delimiter
        fields.push(current);
        current = '';
      }
    } else { // normal character
      current += ch;
    }
  }
  fields.push(current);
  return fields;
}

var combinationFields = ['$or', '$nor', '$not'];
function isCombinationalField(field) {
  return combinationFields.indexOf(field) > -1;
}

function getKey(obj) {
  return Object.keys(obj)[0];
}

function getValue(obj) {
  return obj[getKey(obj)];
}


// flatten an array of selectors joined by an $and operator
function mergeAndedSelectors(selectors) {

  // sort to ensure that e.g. if the user specified
  // $and: [{$gt: 'a'}, {$gt: 'b'}], then it's collapsed into
  // just {$gt: 'b'}
  var res = {};

  selectors.forEach(function (selector) {
    Object.keys(selector).forEach(function (field) {
      var matcher = selector[field];
      if (typeof matcher !== 'object') {
        matcher = {$eq: matcher};
      }

      if (isCombinationalField(field)) {
        if (matcher instanceof Array) {
          res[field] = matcher.map(function (m) {
            return mergeAndedSelectors([m]);
          });
        } else {
          res[field] = mergeAndedSelectors([matcher]);
        }
      } else {
        var fieldMatchers = res[field] = res[field] || {};
        Object.keys(matcher).forEach(function (operator) {
          var value = matcher[operator];

          if (operator === '$gt' || operator === '$gte') {
            return mergeGtGte(operator, value, fieldMatchers);
          } else if (operator === '$lt' || operator === '$lte') {
            return mergeLtLte(operator, value, fieldMatchers);
          } else if (operator === '$ne') {
            return mergeNe(value, fieldMatchers);
          } else if (operator === '$eq') {
            return mergeEq(value, fieldMatchers);
          }
          fieldMatchers[operator] = value;
        });
      }
    });
  });

  return res;
}



// collapse logically equivalent gt/gte values
function mergeGtGte(operator, value, fieldMatchers) {
  if (typeof fieldMatchers.$eq !== 'undefined') {
    return; // do nothing
  }
  if (typeof fieldMatchers.$gte !== 'undefined') {
    if (operator === '$gte') {
      if (value > fieldMatchers.$gte) { // more specificity
        fieldMatchers.$gte = value;
      }
    } else { // operator === '$gt'
      if (value >= fieldMatchers.$gte) { // more specificity
        delete fieldMatchers.$gte;
        fieldMatchers.$gt = value;
      }
    }
  } else if (typeof fieldMatchers.$gt !== 'undefined') {
    if (operator === '$gte') {
      if (value > fieldMatchers.$gt) { // more specificity
        delete fieldMatchers.$gt;
        fieldMatchers.$gte = value;
      }
    } else { // operator === '$gt'
      if (value > fieldMatchers.$gt) { // more specificity
        fieldMatchers.$gt = value;
      }
    }
  } else {
    fieldMatchers[operator] = value;
  }
}

// collapse logically equivalent lt/lte values
function mergeLtLte(operator, value, fieldMatchers) {
  if (typeof fieldMatchers.$eq !== 'undefined') {
    return; // do nothing
  }
  if (typeof fieldMatchers.$lte !== 'undefined') {
    if (operator === '$lte') {
      if (value < fieldMatchers.$lte) { // more specificity
        fieldMatchers.$lte = value;
      }
    } else { // operator === '$gt'
      if (value <= fieldMatchers.$lte) { // more specificity
        delete fieldMatchers.$lte;
        fieldMatchers.$lt = value;
      }
    }
  } else if (typeof fieldMatchers.$lt !== 'undefined') {
    if (operator === '$lte') {
      if (value < fieldMatchers.$lt) { // more specificity
        delete fieldMatchers.$lt;
        fieldMatchers.$lte = value;
      }
    } else { // operator === '$gt'
      if (value < fieldMatchers.$lt) { // more specificity
        fieldMatchers.$lt = value;
      }
    }
  } else {
    fieldMatchers[operator] = value;
  }
}

// combine $ne values into one array
function mergeNe(value, fieldMatchers) {
  if ('$ne' in fieldMatchers) {
    // there are many things this could "not" be
    fieldMatchers.$ne.push(value);
  } else { // doesn't exist yet
    fieldMatchers.$ne = [value];
  }
}

// add $eq into the mix
function mergeEq(value, fieldMatchers) {
  // these all have less specificity than the $eq
  // TODO: check for user errors here
  delete fieldMatchers.$gt;
  delete fieldMatchers.$gte;
  delete fieldMatchers.$lt;
  delete fieldMatchers.$lte;
  delete fieldMatchers.$ne;
  fieldMatchers.$eq = value;
}

//#7458: execute function mergeAndedSelectors on nested $and
function mergeAndedSelectorsNested(obj) {
    for (var prop in obj) {
        if (Array.isArray(obj)) {
            for (var i in obj) {
                if (obj[i]['$and']) {
                    obj[i] = mergeAndedSelectors(obj[i]['$and']);
                }
            }
        }
        var value = obj[prop];
        if (typeof value === 'object') {
            mergeAndedSelectorsNested(value); // <- recursive call
        }
    }
    return obj;
}

//#7458: determine id $and is present in selector (at any level)
function isAndInSelector(obj, isAnd) {
    for (var prop in obj) {
        if (prop === '$and') {
            isAnd = true;
        }
        var value = obj[prop];
        if (typeof value === 'object') {
            isAnd = isAndInSelector(value, isAnd); // <- recursive call
        }
    }
    return isAnd;
}

//
// normalize the selector
//
function massageSelector(input) {
  var result = clone(input);
  var wasAnded = false;
    //#7458: if $and is present in selector (at any level) merge nested $and
    if (isAndInSelector(result, false)) {
        result = mergeAndedSelectorsNested(result);
        if ('$and' in result) {
            result = mergeAndedSelectors(result['$and']);
        }
        wasAnded = true;
    }

  ['$or', '$nor'].forEach(function (orOrNor) {
    if (orOrNor in result) {
      // message each individual selector
      // e.g. {foo: 'bar'} becomes {foo: {$eq: 'bar'}}
      result[orOrNor].forEach(function (subSelector) {
        var fields = Object.keys(subSelector);
        for (var i = 0; i < fields.length; i++) {
          var field = fields[i];
          var matcher = subSelector[field];
          if (typeof matcher !== 'object' || matcher === null) {
            subSelector[field] = {$eq: matcher};
          }
        }
      });
    }
  });

  if ('$not' in result) {
    //This feels a little like forcing, but it will work for now,
    //I would like to come back to this and make the merging of selectors a little more generic
    result['$not'] = mergeAndedSelectors([result['$not']]);
  }

  var fields = Object.keys(result);

  for (var i = 0; i < fields.length; i++) {
    var field = fields[i];
    var matcher = result[field];

    if (typeof matcher !== 'object' || matcher === null) {
      matcher = {$eq: matcher};
    } else if ('$ne' in matcher && !wasAnded) {
      // I put these in an array, since there may be more than one
      // but in the "mergeAnded" operation, I already take care of that
      matcher.$ne = [matcher.$ne];
    }
    result[field] = matcher;
  }

  return result;
}

function pad(str, padWith, upToLength) {
  var padding = '';
  var targetLength = upToLength - str.length;
  /* istanbul ignore next */
  while (padding.length < targetLength) {
    padding += padWith;
  }
  return padding;
}

function padLeft(str, padWith, upToLength) {
  var padding = pad(str, padWith, upToLength);
  return padding + str;
}

var MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE
var MAGNITUDE_DIGITS = 3; // ditto
var SEP = ''; // set to '_' for easier debugging 

function collate(a, b) {

  if (a === b) {
    return 0;
  }

  a = normalizeKey(a);
  b = normalizeKey(b);

  var ai = collationIndex(a);
  var bi = collationIndex(b);
  if ((ai - bi) !== 0) {
    return ai - bi;
  }
  switch (typeof a) {
    case 'number':
      return a - b;
    case 'boolean':
      return a < b ? -1 : 1;
    case 'string':
      return stringCollate(a, b);
  }
  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);
}

// couch considers null/NaN/Infinity/-Infinity === undefined,
// for the purposes of mapreduce indexes. also, dates get stringified.
function normalizeKey(key) {
  switch (typeof key) {
    case 'undefined':
      return null;
    case 'number':
      if (key === Infinity || key === -Infinity || isNaN(key)) {
        return null;
      }
      return key;
    case 'object':
      var origKey = key;
      if (Array.isArray(key)) {
        var len = key.length;
        key = new Array(len);
        for (var i = 0; i < len; i++) {
          key[i] = normalizeKey(origKey[i]);
        }
      /* istanbul ignore next */
      } else if (key instanceof Date) {
        return key.toJSON();
      } else if (key !== null) { // generic object
        key = {};
        for (var k in origKey) {
          if (origKey.hasOwnProperty(k)) {
            var val = origKey[k];
            if (typeof val !== 'undefined') {
              key[k] = normalizeKey(val);
            }
          }
        }
      }
  }
  return key;
}

function indexify(key) {
  if (key !== null) {
    switch (typeof key) {
      case 'boolean':
        return key ? 1 : 0;
      case 'number':
        return numToIndexableString(key);
      case 'string':
        // We've to be sure that key does not contain \u0000
        // Do order-preserving replacements:
        // 0 -> 1, 1
        // 1 -> 1, 2
        // 2 -> 2, 2
        /* eslint-disable no-control-regex */
        return key
          .replace(/\u0002/g, '\u0002\u0002')
          .replace(/\u0001/g, '\u0001\u0002')
          .replace(/\u0000/g, '\u0001\u0001');
        /* eslint-enable no-control-regex */
      case 'object':
        var isArray = Array.isArray(key);
        var arr = isArray ? key : Object.keys(key);
        var i = -1;
        var len = arr.length;
        var result = '';
        if (isArray) {
          while (++i < len) {
            result += toIndexableString(arr[i]);
          }
        } else {
          while (++i < len) {
            var objKey = arr[i];
            result += toIndexableString(objKey) +
                toIndexableString(key[objKey]);
          }
        }
        return result;
    }
  }
  return '';
}

// convert the given key to a string that would be appropriate
// for lexical sorting, e.g. within a database, where the
// sorting is the same given by the collate() function.
function toIndexableString(key) {
  var zero = '\u0000';
  key = normalizeKey(key);
  return collationIndex(key) + SEP + indexify(key) + zero;
}

function parseNumber(str, i) {
  var originalIdx = i;
  var num;
  var zero = str[i] === '1';
  if (zero) {
    num = 0;
    i++;
  } else {
    var neg = str[i] === '0';
    i++;
    var numAsString = '';
    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);
    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;
    /* istanbul ignore next */
    if (neg) {
      magnitude = -magnitude;
    }
    i += MAGNITUDE_DIGITS;
    while (true) {
      var ch = str[i];
      if (ch === '\u0000') {
        break;
      } else {
        numAsString += ch;
      }
      i++;
    }
    numAsString = numAsString.split('.');
    if (numAsString.length === 1) {
      num = parseInt(numAsString, 10);
    } else {
      /* istanbul ignore next */
      num = parseFloat(numAsString[0] + '.' + numAsString[1]);
    }
    /* istanbul ignore next */
    if (neg) {
      num = num - 10;
    }
    /* istanbul ignore next */
    if (magnitude !== 0) {
      // parseFloat is more reliable than pow due to rounding errors
      // e.g. Number.MAX_VALUE would return Infinity if we did
      // num * Math.pow(10, magnitude);
      num = parseFloat(num + 'e' + magnitude);
    }
  }
  return {num: num, length : i - originalIdx};
}

// move up the stack while parsing
// this function moved outside of parseIndexableString for performance
function pop(stack, metaStack) {
  var obj = stack.pop();

  if (metaStack.length) {
    var lastMetaElement = metaStack[metaStack.length - 1];
    if (obj === lastMetaElement.element) {
      // popping a meta-element, e.g. an object whose value is another object
      metaStack.pop();
      lastMetaElement = metaStack[metaStack.length - 1];
    }
    var element = lastMetaElement.element;
    var lastElementIndex = lastMetaElement.index;
    if (Array.isArray(element)) {
      element.push(obj);
    } else if (lastElementIndex === stack.length - 2) { // obj with key+value
      var key = stack.pop();
      element[key] = obj;
    } else {
      stack.push(obj); // obj with key only
    }
  }
}

function parseIndexableString(str) {
  var stack = [];
  var metaStack = []; // stack for arrays and objects
  var i = 0;

  /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
  while (true) {
    var collationIndex = str[i++];
    if (collationIndex === '\u0000') {
      if (stack.length === 1) {
        return stack.pop();
      } else {
        pop(stack, metaStack);
        continue;
      }
    }
    switch (collationIndex) {
      case '1':
        stack.push(null);
        break;
      case '2':
        stack.push(str[i] === '1');
        i++;
        break;
      case '3':
        var parsedNum = parseNumber(str, i);
        stack.push(parsedNum.num);
        i += parsedNum.length;
        break;
      case '4':
        var parsedStr = '';
        /*eslint no-constant-condition: ["error", { "checkLoops": false }]*/
        while (true) {
          var ch = str[i];
          if (ch === '\u0000') {
            break;
          }
          parsedStr += ch;
          i++;
        }
        // perform the reverse of the order-preserving replacement
        // algorithm (see above)
        /* eslint-disable no-control-regex */
        parsedStr = parsedStr.replace(/\u0001\u0001/g, '\u0000')
          .replace(/\u0001\u0002/g, '\u0001')
          .replace(/\u0002\u0002/g, '\u0002');
        /* eslint-enable no-control-regex */
        stack.push(parsedStr);
        break;
      case '5':
        var arrayElement = { element: [], index: stack.length };
        stack.push(arrayElement.element);
        metaStack.push(arrayElement);
        break;
      case '6':
        var objElement = { element: {}, index: stack.length };
        stack.push(objElement.element);
        metaStack.push(objElement);
        break;
      /* istanbul ignore next */
      default:
        throw new Error(
          'bad collationIndex or unexpectedly reached end of input: ' +
            collationIndex);
    }
  }
}

function arrayCollate(a, b) {
  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; i++) {
    var sort = collate(a[i], b[i]);
    if (sort !== 0) {
      return sort;
    }
  }
  return (a.length === b.length) ? 0 :
    (a.length > b.length) ? 1 : -1;
}
function stringCollate(a, b) {
  // See: https://github.com/daleharvey/pouchdb/issues/40
  // This is incompatible with the CouchDB implementation, but its the
  // best we can do for now
  return (a === b) ? 0 : ((a > b) ? 1 : -1);
}
function objectCollate(a, b) {
  var ak = Object.keys(a), bk = Object.keys(b);
  var len = Math.min(ak.length, bk.length);
  for (var i = 0; i < len; i++) {
    // First sort the keys
    var sort = collate(ak[i], bk[i]);
    if (sort !== 0) {
      return sort;
    }
    // if the keys are equal sort the values
    sort = collate(a[ak[i]], b[bk[i]]);
    if (sort !== 0) {
      return sort;
    }

  }
  return (ak.length === bk.length) ? 0 :
    (ak.length > bk.length) ? 1 : -1;
}
// The collation is defined by erlangs ordered terms
// the atoms null, true, false come first, then numbers, strings,
// arrays, then objects
// null/undefined/NaN/Infinity/-Infinity are all considered null
function collationIndex(x) {
  var id = ['boolean', 'number', 'string', 'object'];
  var idx = id.indexOf(typeof x);
  //false if -1 otherwise true, but fast!!!!1
  if (~idx) {
    if (x === null) {
      return 1;
    }
    if (Array.isArray(x)) {
      return 5;
    }
    return idx < 3 ? (idx + 2) : (idx + 3);
  }
  /* istanbul ignore next */
  if (Array.isArray(x)) {
    return 5;
  }
}

// conversion:
// x yyy zz...zz
// x = 0 for negative, 1 for 0, 2 for positive
// y = exponent (for negative numbers negated) moved so that it's >= 0
// z = mantisse
function numToIndexableString(num) {

  if (num === 0) {
    return '1';
  }

  // convert number to exponential format for easier and
  // more succinct string sorting
  var expFormat = num.toExponential().split(/e\+?/);
  var magnitude = parseInt(expFormat[1], 10);

  var neg = num < 0;

  var result = neg ? '0' : '2';

  // first sort by magnitude
  // it's easier if all magnitudes are positive
  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);
  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);

  result += SEP + magString;

  // then sort by the factor
  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)
  /* istanbul ignore next */
  if (neg) { // for negative reverse ordering
    factor = 10 - factor;
  }

  var factorStr = factor.toFixed(20);

  // strip zeros from the end
  factorStr = factorStr.replace(/\.?0+$/, '');

  result += SEP + factorStr;

  return result;
}

// create a comparator based on the sort object
function createFieldSorter(sort) {

  function getFieldValuesAsArray(doc) {
    return sort.map(function (sorting) {
      var fieldName = getKey(sorting);
      var parsedField = parseField(fieldName);
      var docFieldValue = getFieldFromDoc(doc, parsedField);
      return docFieldValue;
    });
  }

  return function (aRow, bRow) {
    var aFieldValues = getFieldValuesAsArray(aRow.doc);
    var bFieldValues = getFieldValuesAsArray(bRow.doc);
    var collation = collate(aFieldValues, bFieldValues);
    if (collation !== 0) {
      return collation;
    }
    // this is what mango seems to do
    return compare$1(aRow.doc._id, bRow.doc._id);
  };
}

function filterInMemoryFields(rows, requestDef, inMemoryFields) {
  rows = rows.filter(function (row) {
    return rowFilter(row.doc, requestDef.selector, inMemoryFields);
  });

  if (requestDef.sort) {
    // in-memory sort
    var fieldSorter = createFieldSorter(requestDef.sort);
    rows = rows.sort(fieldSorter);
    if (typeof requestDef.sort[0] !== 'string' &&
        getValue(requestDef.sort[0]) === 'desc') {
      rows = rows.reverse();
    }
  }

  if ('limit' in requestDef || 'skip' in requestDef) {
    // have to do the limit in-memory
    var skip = requestDef.skip || 0;
    var limit = ('limit' in requestDef ? requestDef.limit : rows.length) + skip;
    rows = rows.slice(skip, limit);
  }
  return rows;
}

function rowFilter(doc, selector, inMemoryFields) {
  return inMemoryFields.every(function (field) {
    var matcher = selector[field];
    var parsedField = parseField(field);
    var docFieldValue = getFieldFromDoc(doc, parsedField);
    if (isCombinationalField(field)) {
      return matchCominationalSelector(field, matcher, doc);
    }

    return matchSelector(matcher, doc, parsedField, docFieldValue);
  });
}

function matchSelector(matcher, doc, parsedField, docFieldValue) {
  if (!matcher) {
    // no filtering necessary; this field is just needed for sorting
    return true;
  }

  // is matcher an object, if so continue recursion
  if (typeof matcher === 'object') {
    return Object.keys(matcher).every(function (userOperator) {
      var userValue = matcher[userOperator];
      return match(userOperator, doc, userValue, parsedField, docFieldValue);
    });
  }

  // no more depth, No need to recurse further
  return matcher === docFieldValue;
}

function matchCominationalSelector(field, matcher, doc) {

  if (field === '$or') {
    return matcher.some(function (orMatchers) {
      return rowFilter(doc, orMatchers, Object.keys(orMatchers));
    });
  }

  if (field === '$not') {
    return !rowFilter(doc, matcher, Object.keys(matcher));
  }

  //`$nor`
  return !matcher.find(function (orMatchers) {
    return rowFilter(doc, orMatchers, Object.keys(orMatchers));
  });

}

function match(userOperator, doc, userValue, parsedField, docFieldValue) {
  if (!matchers[userOperator]) {
    throw new Error('unknown operator "' + userOperator +
      '" - should be one of $eq, $lte, $lt, $gt, $gte, $exists, $ne, $in, ' +
      '$nin, $size, $mod, $regex, $elemMatch, $type, $allMatch or $all');
  }
  return matchers[userOperator](doc, userValue, parsedField, docFieldValue);
}

function fieldExists(docFieldValue) {
  return typeof docFieldValue !== 'undefined' && docFieldValue !== null;
}

function fieldIsNotUndefined(docFieldValue) {
  return typeof docFieldValue !== 'undefined';
}

function modField(docFieldValue, userValue) {
  var divisor = userValue[0];
  var mod = userValue[1];
  if (divisor === 0) {
    throw new Error('Bad divisor, cannot divide by zero');
  }

  if (parseInt(divisor, 10) !== divisor ) {
    throw new Error('Divisor is not an integer');
  }

  if (parseInt(mod, 10) !== mod ) {
    throw new Error('Modulus is not an integer');
  }

  if (parseInt(docFieldValue, 10) !== docFieldValue) {
    return false;
  }

  return docFieldValue % divisor === mod;
}

function arrayContainsValue(docFieldValue, userValue) {
  return userValue.some(function (val) {
    if (docFieldValue instanceof Array) {
      return docFieldValue.indexOf(val) > -1;
    }

    return docFieldValue === val;
  });
}

function arrayContainsAllValues(docFieldValue, userValue) {
  return userValue.every(function (val) {
    return docFieldValue.indexOf(val) > -1;
  });
}

function arraySize(docFieldValue, userValue) {
  return docFieldValue.length === userValue;
}

function regexMatch(docFieldValue, userValue) {
  var re = new RegExp(userValue);

  return re.test(docFieldValue);
}

function typeMatch(docFieldValue, userValue) {

  switch (userValue) {
    case 'null':
      return docFieldValue === null;
    case 'boolean':
      return typeof (docFieldValue) === 'boolean';
    case 'number':
      return typeof (docFieldValue) === 'number';
    case 'string':
      return typeof (docFieldValue) === 'string';
    case 'array':
      return docFieldValue instanceof Array;
    case 'object':
      return ({}).toString.call(docFieldValue) === '[object Object]';
  }

  throw new Error(userValue + ' not supported as a type.' +
                  'Please use one of object, string, array, number, boolean or null.');

}

var matchers = {

  '$elemMatch': function (doc, userValue, parsedField, docFieldValue) {
    if (!Array.isArray(docFieldValue)) {
      return false;
    }

    if (docFieldValue.length === 0) {
      return false;
    }

    if (typeof docFieldValue[0] === 'object') {
      return docFieldValue.some(function (val) {
        return rowFilter(val, userValue, Object.keys(userValue));
      });
    }

    return docFieldValue.some(function (val) {
      return matchSelector(userValue, doc, parsedField, val);
    });
  },

  '$allMatch': function (doc, userValue, parsedField, docFieldValue) {
    if (!Array.isArray(docFieldValue)) {
      return false;
    }

    /* istanbul ignore next */
    if (docFieldValue.length === 0) {
      return false;
    }

    if (typeof docFieldValue[0] === 'object') {
      return docFieldValue.every(function (val) {
        return rowFilter(val, userValue, Object.keys(userValue));
      });
    }

    return docFieldValue.every(function (val) {
      return matchSelector(userValue, doc, parsedField, val);
    });
  },

  '$eq': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) === 0;
  },

  '$gte': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) >= 0;
  },

  '$gt': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) > 0;
  },

  '$lte': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) <= 0;
  },

  '$lt': function (doc, userValue, parsedField, docFieldValue) {
    return fieldIsNotUndefined(docFieldValue) && collate(docFieldValue, userValue) < 0;
  },

  '$exists': function (doc, userValue, parsedField, docFieldValue) {
    //a field that is null is still considered to exist
    if (userValue) {
      return fieldIsNotUndefined(docFieldValue);
    }

    return !fieldIsNotUndefined(docFieldValue);
  },

  '$mod': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && modField(docFieldValue, userValue);
  },

  '$ne': function (doc, userValue, parsedField, docFieldValue) {
    return userValue.every(function (neValue) {
      return collate(docFieldValue, neValue) !== 0;
    });
  },
  '$in': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && arrayContainsValue(docFieldValue, userValue);
  },

  '$nin': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && !arrayContainsValue(docFieldValue, userValue);
  },

  '$size': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && arraySize(docFieldValue, userValue);
  },

  '$all': function (doc, userValue, parsedField, docFieldValue) {
    return Array.isArray(docFieldValue) && arrayContainsAllValues(docFieldValue, userValue);
  },

  '$regex': function (doc, userValue, parsedField, docFieldValue) {
    return fieldExists(docFieldValue) && regexMatch(docFieldValue, userValue);
  },

  '$type': function (doc, userValue, parsedField, docFieldValue) {
    return typeMatch(docFieldValue, userValue);
  }
};

// return true if the given doc matches the supplied selector
function matchesSelector(doc, selector) {
  /* istanbul ignore if */
  if (typeof selector !== 'object') {
    // match the CouchDB error message
    throw new Error('Selector error: expected a JSON object');
  }

  selector = massageSelector(selector);
  var row = {
    'doc': doc
  };

  var rowsMatched = filterInMemoryFields([row], { 'selector': selector }, Object.keys(selector));
  return rowsMatched && rowsMatched.length === 1;
}

function evalFilter(input) {
  return scopeEval('"use strict";\nreturn ' + input + ';', {});
}

function evalView(input) {
  var code = [
    'return function(doc) {',
    '  "use strict";',
    '  var emitted = false;',
    '  var emit = function (a, b) {',
    '    emitted = true;',
    '  };',
    '  var view = ' + input + ';',
    '  view(doc);',
    '  if (emitted) {',
    '    return true;',
    '  }',
    '};'
  ].join('\n');

  return scopeEval(code, {});
}

function validate(opts, callback) {
  if (opts.selector) {
    if (opts.filter && opts.filter !== '_selector') {
      var filterName = typeof opts.filter === 'string' ?
        opts.filter : 'function';
      return callback(new Error('selector invalid for filter "' + filterName + '"'));
    }
  }
  callback();
}

function normalize(opts) {
  if (opts.view && !opts.filter) {
    opts.filter = '_view';
  }

  if (opts.selector && !opts.filter) {
    opts.filter = '_selector';
  }

  if (opts.filter && typeof opts.filter === 'string') {
    if (opts.filter === '_view') {
      opts.view = normalizeDesignDocFunctionName(opts.view);
    } else {
      opts.filter = normalizeDesignDocFunctionName(opts.filter);
    }
  }
}

function shouldFilter(changesHandler, opts) {
  return opts.filter && typeof opts.filter === 'string' &&
    !opts.doc_ids && !isRemote(changesHandler.db);
}

function filter(changesHandler, opts) {
  var callback = opts.complete;
  if (opts.filter === '_view') {
    if (!opts.view || typeof opts.view !== 'string') {
      var err = createError(BAD_REQUEST,
        '`view` filter parameter not found or invalid.');
      return callback(err);
    }
    // fetch a view from a design doc, make it behave like a filter
    var viewName = parseDesignDocFunctionName(opts.view);
    changesHandler.db.get('_design/' + viewName[0], function (err, ddoc) {
      /* istanbul ignore if */
      if (changesHandler.isCancelled) {
        return callback(null, {status: 'cancelled'});
      }
      /* istanbul ignore next */
      if (err) {
        return callback(generateErrorFromResponse(err));
      }
      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&
        ddoc.views[viewName[1]].map;
      if (!mapFun) {
        return callback(createError(MISSING_DOC,
          (ddoc.views ? 'missing json key: ' + viewName[1] :
            'missing json key: views')));
      }
      opts.filter = evalView(mapFun);
      changesHandler.doChanges(opts);
    });
  } else if (opts.selector) {
    opts.filter = function (doc) {
      return matchesSelector(doc, opts.selector);
    };
    changesHandler.doChanges(opts);
  } else {
    // fetch a filter from a design doc
    var filterName = parseDesignDocFunctionName(opts.filter);
    changesHandler.db.get('_design/' + filterName[0], function (err, ddoc) {
      /* istanbul ignore if */
      if (changesHandler.isCancelled) {
        return callback(null, {status: 'cancelled'});
      }
      /* istanbul ignore next */
      if (err) {
        return callback(generateErrorFromResponse(err));
      }
      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];
      if (!filterFun) {
        return callback(createError(MISSING_DOC,
          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]
            : 'missing json key: filters')));
      }
      opts.filter = evalFilter(filterFun);
      changesHandler.doChanges(opts);
    });
  }
}

function applyChangesFilterPlugin(PouchDB) {
  PouchDB._changesFilterPlugin = {
    validate: validate,
    normalize: normalize,
    shouldFilter: shouldFilter,
    filter: filter
  };
}

// TODO: remove from pouchdb-core (breaking)
PouchDB.plugin(applyChangesFilterPlugin);

PouchDB.version = version;

function toObject(array) {
  return array.reduce(function (obj, item) {
    obj[item] = true;
    return obj;
  }, {});
}
// List of top level reserved words for doc
var reservedWords = toObject([
  '_id',
  '_rev',
  '_attachments',
  '_deleted',
  '_revisions',
  '_revs_info',
  '_conflicts',
  '_deleted_conflicts',
  '_local_seq',
  '_rev_tree',
  //replication documents
  '_replication_id',
  '_replication_state',
  '_replication_state_time',
  '_replication_state_reason',
  '_replication_stats',
  // Specific to Couchbase Sync Gateway
  '_removed'
]);

// List of reserved words that should end up the document
var dataWords = toObject([
  '_attachments',
  //replication documents
  '_replication_id',
  '_replication_state',
  '_replication_state_time',
  '_replication_state_reason',
  '_replication_stats'
]);

function parseRevisionInfo(rev$$1) {
  if (!/^\d+-/.test(rev$$1)) {
    return createError(INVALID_REV);
  }
  var idx = rev$$1.indexOf('-');
  var left = rev$$1.substring(0, idx);
  var right = rev$$1.substring(idx + 1);
  return {
    prefix: parseInt(left, 10),
    id: right
  };
}

function makeRevTreeFromRevisions(revisions, opts) {
  var pos = revisions.start - revisions.ids.length + 1;

  var revisionIds = revisions.ids;
  var ids = [revisionIds[0], opts, []];

  for (var i = 1, len = revisionIds.length; i < len; i++) {
    ids = [revisionIds[i], {status: 'missing'}, [ids]];
  }

  return [{
    pos: pos,
    ids: ids
  }];
}

// Preprocess documents, parse their revisions, assign an id and a
// revision for new writes that are missing them, etc
function parseDoc(doc, newEdits, dbOpts) {
  if (!dbOpts) {
    dbOpts = {
      deterministic_revs: true
    };
  }

  var nRevNum;
  var newRevId;
  var revInfo;
  var opts = {status: 'available'};
  if (doc._deleted) {
    opts.deleted = true;
  }

  if (newEdits) {
    if (!doc._id) {
      doc._id = uuid();
    }
    newRevId = rev(doc, dbOpts.deterministic_revs);
    if (doc._rev) {
      revInfo = parseRevisionInfo(doc._rev);
      if (revInfo.error) {
        return revInfo;
      }
      doc._rev_tree = [{
        pos: revInfo.prefix,
        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]
      }];
      nRevNum = revInfo.prefix + 1;
    } else {
      doc._rev_tree = [{
        pos: 1,
        ids : [newRevId, opts, []]
      }];
      nRevNum = 1;
    }
  } else {
    if (doc._revisions) {
      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);
      nRevNum = doc._revisions.start;
      newRevId = doc._revisions.ids[0];
    }
    if (!doc._rev_tree) {
      revInfo = parseRevisionInfo(doc._rev);
      if (revInfo.error) {
        return revInfo;
      }
      nRevNum = revInfo.prefix;
      newRevId = revInfo.id;
      doc._rev_tree = [{
        pos: nRevNum,
        ids: [newRevId, opts, []]
      }];
    }
  }

  invalidIdError(doc._id);

  doc._rev = nRevNum + '-' + newRevId;

  var result = {metadata : {}, data : {}};
  for (var key in doc) {
    /* istanbul ignore else */
    if (Object.prototype.hasOwnProperty.call(doc, key)) {
      var specialKey = key[0] === '_';
      if (specialKey && !reservedWords[key]) {
        var error = createError(DOC_VALIDATION, key);
        error.message = DOC_VALIDATION.message + ': ' + key;
        throw error;
      } else if (specialKey && !dataWords[key]) {
        result.metadata[key.slice(1)] = doc[key];
      } else {
        result.data[key] = doc[key];
      }
    }
  }
  return result;
}

function parseBase64(data) {
  try {
    return thisAtob(data);
  } catch (e) {
    var err = createError(BAD_ARG,
      'Attachment is not a valid base64 string');
    return {error: err};
  }
}

function preprocessString(att, blobType, callback) {
  var asBinary = parseBase64(att.data);
  if (asBinary.error) {
    return callback(asBinary.error);
  }

  att.length = asBinary.length;
  if (blobType === 'blob') {
    att.data = binStringToBluffer(asBinary, att.content_type);
  } else if (blobType === 'base64') {
    att.data = thisBtoa(asBinary);
  } else { // binary
    att.data = asBinary;
  }
  binaryMd5(asBinary, function (result) {
    att.digest = 'md5-' + result;
    callback();
  });
}

function preprocessBlob(att, blobType, callback) {
  binaryMd5(att.data, function (md5) {
    att.digest = 'md5-' + md5;
    // size is for blobs (browser), length is for buffers (node)
    att.length = att.data.size || att.data.length || 0;
    if (blobType === 'binary') {
      blobToBinaryString(att.data, function (binString) {
        att.data = binString;
        callback();
      });
    } else if (blobType === 'base64') {
      blobToBase64(att.data, function (b64) {
        att.data = b64;
        callback();
      });
    } else {
      callback();
    }
  });
}

function preprocessAttachment(att, blobType, callback) {
  if (att.stub) {
    return callback();
  }
  if (typeof att.data === 'string') { // input is a base64 string
    preprocessString(att, blobType, callback);
  } else { // input is a blob
    preprocessBlob(att, blobType, callback);
  }
}

function preprocessAttachments(docInfos, blobType, callback) {

  if (!docInfos.length) {
    return callback();
  }

  var docv = 0;
  var overallErr;

  docInfos.forEach(function (docInfo) {
    var attachments = docInfo.data && docInfo.data._attachments ?
      Object.keys(docInfo.data._attachments) : [];
    var recv = 0;

    if (!attachments.length) {
      return done();
    }

    function processedAttachment(err) {
      overallErr = err;
      recv++;
      if (recv === attachments.length) {
        done();
      }
    }

    for (var key in docInfo.data._attachments) {
      if (docInfo.data._attachments.hasOwnProperty(key)) {
        preprocessAttachment(docInfo.data._attachments[key],
          blobType, processedAttachment);
      }
    }
  });

  function done() {
    docv++;
    if (docInfos.length === docv) {
      if (overallErr) {
        callback(overallErr);
      } else {
        callback();
      }
    }
  }
}

function updateDoc(revLimit, prev, docInfo, results,
                   i, cb, writeDoc, newEdits) {

  if (revExists(prev.rev_tree, docInfo.metadata.rev) && !newEdits) {
    results[i] = docInfo;
    return cb();
  }

  // sometimes this is pre-calculated. historically not always
  var previousWinningRev = prev.winningRev || winningRev(prev);
  var previouslyDeleted = 'deleted' in prev ? prev.deleted :
    isDeleted(prev, previousWinningRev);
  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :
    isDeleted(docInfo.metadata);
  var isRoot = /^1-/.test(docInfo.metadata.rev);

  if (previouslyDeleted && !deleted && newEdits && isRoot) {
    var newDoc = docInfo.data;
    newDoc._rev = previousWinningRev;
    newDoc._id = docInfo.metadata.id;
    docInfo = parseDoc(newDoc, newEdits);
  }

  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);

  var inConflict = newEdits && ((
    (previouslyDeleted && deleted && merged.conflicts !== 'new_leaf') ||
    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||
    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));

  if (inConflict) {
    var err = createError(REV_CONFLICT);
    results[i] = err;
    return cb();
  }

  var newRev = docInfo.metadata.rev;
  docInfo.metadata.rev_tree = merged.tree;
  docInfo.stemmedRevs = merged.stemmedRevs || [];
  /* istanbul ignore else */
  if (prev.rev_map) {
    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb
  }

  // recalculate
  var winningRev$$1 = winningRev(docInfo.metadata);
  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$1);

  // calculate the total number of documents that were added/removed,
  // from the perspective of total_rows/doc_count
  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :
    previouslyDeleted < winningRevIsDeleted ? -1 : 1;

  var newRevIsDeleted;
  if (newRev === winningRev$$1) {
    // if the new rev is the same as the winning rev, we can reuse that value
    newRevIsDeleted = winningRevIsDeleted;
  } else {
    // if they're not the same, then we need to recalculate
    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);
  }

  writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
    true, delta, i, cb);
}

function rootIsMissing(docInfo) {
  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';
}

function processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,
                     writeDoc, opts, overallCallback) {

  // Default to 1000 locally
  revLimit = revLimit || 1000;

  function insertDoc(docInfo, resultsIdx, callback) {
    // Cant insert new deleted documents
    var winningRev$$1 = winningRev(docInfo.metadata);
    var deleted = isDeleted(docInfo.metadata, winningRev$$1);
    if ('was_delete' in opts && deleted) {
      results[resultsIdx] = createError(MISSING_DOC, 'deleted');
      return callback();
    }

    // 4712 - detect whether a new document was inserted with a _rev
    var inConflict = newEdits && rootIsMissing(docInfo);

    if (inConflict) {
      var err = createError(REV_CONFLICT);
      results[resultsIdx] = err;
      return callback();
    }

    var delta = deleted ? 0 : 1;

    writeDoc(docInfo, winningRev$$1, deleted, deleted, false,
      delta, resultsIdx, callback);
  }

  var newEdits = opts.new_edits;
  var idsToDocs = new ExportedMap();

  var docsDone = 0;
  var docsToDo = docInfos.length;

  function checkAllDocsDone() {
    if (++docsDone === docsToDo && overallCallback) {
      overallCallback();
    }
  }

  docInfos.forEach(function (currentDoc, resultsIdx) {

    if (currentDoc._id && isLocalId(currentDoc._id)) {
      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';
      api[fun](currentDoc, {ctx: tx}, function (err, res) {
        results[resultsIdx] = err || res;
        checkAllDocsDone();
      });
      return;
    }

    var id = currentDoc.metadata.id;
    if (idsToDocs.has(id)) {
      docsToDo--; // duplicate
      idsToDocs.get(id).push([currentDoc, resultsIdx]);
    } else {
      idsToDocs.set(id, [[currentDoc, resultsIdx]]);
    }
  });

  // in the case of new_edits, the user can provide multiple docs
  // with the same id. these need to be processed sequentially
  idsToDocs.forEach(function (docs, id) {
    var numDone = 0;

    function docWritten() {
      if (++numDone < docs.length) {
        nextDoc();
      } else {
        checkAllDocsDone();
      }
    }
    function nextDoc() {
      var value = docs[numDone];
      var currentDoc = value[0];
      var resultsIdx = value[1];

      if (fetchedDocs.has(id)) {
        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,
          resultsIdx, docWritten, writeDoc, newEdits);
      } else {
        // Ensure stemming applies to new writes as well
        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);
        currentDoc.metadata.rev_tree = merged.tree;
        currentDoc.stemmedRevs = merged.stemmedRevs || [];
        insertDoc(currentDoc, resultsIdx, docWritten);
      }
    }
    nextDoc();
  });
}

// IndexedDB requires a versioned database structure, so we use the
// version here to manage migrations.
var ADAPTER_VERSION = 5;

// The object stores created for each database
// DOC_STORE stores the document meta data, its revision history and state
// Keyed by document id
var DOC_STORE = 'document-store';
// BY_SEQ_STORE stores a particular version of a document, keyed by its
// sequence id
var BY_SEQ_STORE = 'by-sequence';
// Where we store attachments
var ATTACH_STORE = 'attach-store';
// Where we store many-to-many relations
// between attachment digests and seqs
var ATTACH_AND_SEQ_STORE = 'attach-seq-store';

// Where we store database-wide meta data in a single record
// keyed by id: META_STORE
var META_STORE = 'meta-store';
// Where we store local documents
var LOCAL_STORE = 'local-store';
// Where we detect blob support
var DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';

function safeJsonParse(str) {
  // This try/catch guards against stack overflow errors.
  // JSON.parse() is faster than vuvuzela.parse() but vuvuzela
  // cannot overflow.
  try {
    return JSON.parse(str);
  } catch (e) {
    /* istanbul ignore next */
    return vuvuzela__WEBPACK_IMPORTED_MODULE_3___default.a.parse(str);
  }
}

function safeJsonStringify(json) {
  try {
    return JSON.stringify(json);
  } catch (e) {
    /* istanbul ignore next */
    return vuvuzela__WEBPACK_IMPORTED_MODULE_3___default.a.stringify(json);
  }
}

function idbError(callback) {
  return function (evt) {
    var message = 'unknown_error';
    if (evt.target && evt.target.error) {
      message = evt.target.error.name || evt.target.error.message;
    }
    callback(createError(IDB_ERROR, message, evt.type));
  };
}

// Unfortunately, the metadata has to be stringified
// when it is put into the database, because otherwise
// IndexedDB can throw errors for deeply-nested objects.
// Originally we just used JSON.parse/JSON.stringify; now
// we use this custom vuvuzela library that avoids recursion.
// If we could do it all over again, we'd probably use a
// format for the revision trees other than JSON.
function encodeMetadata(metadata, winningRev, deleted) {
  return {
    data: safeJsonStringify(metadata),
    winningRev: winningRev,
    deletedOrLocal: deleted ? '1' : '0',
    seq: metadata.seq, // highest seq for this doc
    id: metadata.id
  };
}

function decodeMetadata(storedObject) {
  if (!storedObject) {
    return null;
  }
  var metadata = safeJsonParse(storedObject.data);
  metadata.winningRev = storedObject.winningRev;
  metadata.deleted = storedObject.deletedOrLocal === '1';
  metadata.seq = storedObject.seq;
  return metadata;
}

// read the doc back out from the database. we don't store the
// _id or _rev because we already have _doc_id_rev.
function decodeDoc(doc) {
  if (!doc) {
    return doc;
  }
  var idx = doc._doc_id_rev.lastIndexOf(':');
  doc._id = doc._doc_id_rev.substring(0, idx - 1);
  doc._rev = doc._doc_id_rev.substring(idx + 1);
  delete doc._doc_id_rev;
  return doc;
}

// Read a blob from the database, encoding as necessary
// and translating from base64 if the IDB doesn't support
// native Blobs
function readBlobData(body, type, asBlob, callback) {
  if (asBlob) {
    if (!body) {
      callback(createBlob([''], {type: type}));
    } else if (typeof body !== 'string') { // we have blob support
      callback(body);
    } else { // no blob support
      callback(b64ToBluffer(body, type));
    }
  } else { // as base64 string
    if (!body) {
      callback('');
    } else if (typeof body !== 'string') { // we have blob support
      readAsBinaryString(body, function (binary) {
        callback(thisBtoa(binary));
      });
    } else { // no blob support
      callback(body);
    }
  }
}

function fetchAttachmentsIfNecessary(doc, opts, txn, cb) {
  var attachments = Object.keys(doc._attachments || {});
  if (!attachments.length) {
    return cb && cb();
  }
  var numDone = 0;

  function checkDone() {
    if (++numDone === attachments.length && cb) {
      cb();
    }
  }

  function fetchAttachment(doc, att) {
    var attObj = doc._attachments[att];
    var digest = attObj.digest;
    var req = txn.objectStore(ATTACH_STORE).get(digest);
    req.onsuccess = function (e) {
      attObj.body = e.target.result.body;
      checkDone();
    };
  }

  attachments.forEach(function (att) {
    if (opts.attachments && opts.include_docs) {
      fetchAttachment(doc, att);
    } else {
      doc._attachments[att].stub = true;
      checkDone();
    }
  });
}

// IDB-specific postprocessing necessary because
// we don't know whether we stored a true Blob or
// a base64-encoded string, and if it's a Blob it
// needs to be read outside of the transaction context
function postProcessAttachments(results, asBlob) {
  return Promise.all(results.map(function (row) {
    if (row.doc && row.doc._attachments) {
      var attNames = Object.keys(row.doc._attachments);
      return Promise.all(attNames.map(function (att) {
        var attObj = row.doc._attachments[att];
        if (!('body' in attObj)) { // already processed
          return;
        }
        var body = attObj.body;
        var type = attObj.content_type;
        return new Promise(function (resolve) {
          readBlobData(body, type, asBlob, function (data) {
            row.doc._attachments[att] = $inject_Object_assign(
              pick(attObj, ['digest', 'content_type']),
              {data: data}
            );
            resolve();
          });
        });
      }));
    }
  }));
}

function compactRevs(revs, docId, txn) {

  var possiblyOrphanedDigests = [];
  var seqStore = txn.objectStore(BY_SEQ_STORE);
  var attStore = txn.objectStore(ATTACH_STORE);
  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
  var count = revs.length;

  function checkDone() {
    count--;
    if (!count) { // done processing all revs
      deleteOrphanedAttachments();
    }
  }

  function deleteOrphanedAttachments() {
    if (!possiblyOrphanedDigests.length) {
      return;
    }
    possiblyOrphanedDigests.forEach(function (digest) {
      var countReq = attAndSeqStore.index('digestSeq').count(
        IDBKeyRange.bound(
          digest + '::', digest + '::\uffff', false, false));
      countReq.onsuccess = function (e) {
        var count = e.target.result;
        if (!count) {
          // orphaned
          attStore.delete(digest);
        }
      };
    });
  }

  revs.forEach(function (rev$$1) {
    var index = seqStore.index('_doc_id_rev');
    var key = docId + "::" + rev$$1;
    index.getKey(key).onsuccess = function (e) {
      var seq = e.target.result;
      if (typeof seq !== 'number') {
        return checkDone();
      }
      seqStore.delete(seq);

      var cursor = attAndSeqStore.index('seq')
        .openCursor(IDBKeyRange.only(seq));

      cursor.onsuccess = function (event) {
        var cursor = event.target.result;
        if (cursor) {
          var digest = cursor.value.digestSeq.split('::')[0];
          possiblyOrphanedDigests.push(digest);
          attAndSeqStore.delete(cursor.primaryKey);
          cursor.continue();
        } else { // done
          checkDone();
        }
      };
    };
  });
}

function openTransactionSafely(idb, stores, mode) {
  try {
    return {
      txn: idb.transaction(stores, mode)
    };
  } catch (err) {
    return {
      error: err
    };
  }
}

var changesHandler = new Changes();

function idbBulkDocs(dbOpts, req, opts, api, idb, callback) {
  var docInfos = req.docs;
  var txn;
  var docStore;
  var bySeqStore;
  var attachStore;
  var attachAndSeqStore;
  var metaStore;
  var docInfoError;
  var metaDoc;

  for (var i = 0, len = docInfos.length; i < len; i++) {
    var doc = docInfos[i];
    if (doc._id && isLocalId(doc._id)) {
      continue;
    }
    doc = docInfos[i] = parseDoc(doc, opts.new_edits, dbOpts);
    if (doc.error && !docInfoError) {
      docInfoError = doc;
    }
  }

  if (docInfoError) {
    return callback(docInfoError);
  }

  var allDocsProcessed = false;
  var docCountDelta = 0;
  var results = new Array(docInfos.length);
  var fetchedDocs = new ExportedMap();
  var preconditionErrored = false;
  var blobType = api._meta.blobSupport ? 'blob' : 'base64';

  preprocessAttachments(docInfos, blobType, function (err) {
    if (err) {
      return callback(err);
    }
    startTransaction();
  });

  function startTransaction() {

    var stores = [
      DOC_STORE, BY_SEQ_STORE,
      ATTACH_STORE,
      LOCAL_STORE, ATTACH_AND_SEQ_STORE,
      META_STORE
    ];
    var txnResult = openTransactionSafely(idb, stores, 'readwrite');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    txn = txnResult.txn;
    txn.onabort = idbError(callback);
    txn.ontimeout = idbError(callback);
    txn.oncomplete = complete;
    docStore = txn.objectStore(DOC_STORE);
    bySeqStore = txn.objectStore(BY_SEQ_STORE);
    attachStore = txn.objectStore(ATTACH_STORE);
    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);
    metaStore = txn.objectStore(META_STORE);

    metaStore.get(META_STORE).onsuccess = function (e) {
      metaDoc = e.target.result;
      updateDocCountIfReady();
    };

    verifyAttachments(function (err) {
      if (err) {
        preconditionErrored = true;
        return callback(err);
      }
      fetchExistingDocs();
    });
  }

  function onAllDocsProcessed() {
    allDocsProcessed = true;
    updateDocCountIfReady();
  }

  function idbProcessDocs() {
    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,
                txn, results, writeDoc, opts, onAllDocsProcessed);
  }

  function updateDocCountIfReady() {
    if (!metaDoc || !allDocsProcessed) {
      return;
    }
    // caching the docCount saves a lot of time in allDocs() and
    // info(), which is why we go to all the trouble of doing this
    metaDoc.docCount += docCountDelta;
    metaStore.put(metaDoc);
  }

  function fetchExistingDocs() {

    if (!docInfos.length) {
      return;
    }

    var numFetched = 0;

    function checkDone() {
      if (++numFetched === docInfos.length) {
        idbProcessDocs();
      }
    }

    function readMetadata(event) {
      var metadata = decodeMetadata(event.target.result);

      if (metadata) {
        fetchedDocs.set(metadata.id, metadata);
      }
      checkDone();
    }

    for (var i = 0, len = docInfos.length; i < len; i++) {
      var docInfo = docInfos[i];
      if (docInfo._id && isLocalId(docInfo._id)) {
        checkDone(); // skip local docs
        continue;
      }
      var req = docStore.get(docInfo.metadata.id);
      req.onsuccess = readMetadata;
    }
  }

  function complete() {
    if (preconditionErrored) {
      return;
    }

    changesHandler.notify(api._meta.name);
    callback(null, results);
  }

  function verifyAttachment(digest, callback) {

    var req = attachStore.get(digest);
    req.onsuccess = function (e) {
      if (!e.target.result) {
        var err = createError(MISSING_STUB,
          'unknown stub attachment with digest ' +
          digest);
        err.status = 412;
        callback(err);
      } else {
        callback();
      }
    };
  }

  function verifyAttachments(finish) {


    var digests = [];
    docInfos.forEach(function (docInfo) {
      if (docInfo.data && docInfo.data._attachments) {
        Object.keys(docInfo.data._attachments).forEach(function (filename) {
          var att = docInfo.data._attachments[filename];
          if (att.stub) {
            digests.push(att.digest);
          }
        });
      }
    });
    if (!digests.length) {
      return finish();
    }
    var numDone = 0;
    var err;

    function checkDone() {
      if (++numDone === digests.length) {
        finish(err);
      }
    }
    digests.forEach(function (digest) {
      verifyAttachment(digest, function (attErr) {
        if (attErr && !err) {
          err = attErr;
        }
        checkDone();
      });
    });
  }

  function writeDoc(docInfo, winningRev$$1, winningRevIsDeleted, newRevIsDeleted,
                    isUpdate, delta, resultsIdx, callback) {

    docInfo.metadata.winningRev = winningRev$$1;
    docInfo.metadata.deleted = winningRevIsDeleted;

    var doc = docInfo.data;
    doc._id = docInfo.metadata.id;
    doc._rev = docInfo.metadata.rev;

    if (newRevIsDeleted) {
      doc._deleted = true;
    }

    var hasAttachments = doc._attachments &&
      Object.keys(doc._attachments).length;
    if (hasAttachments) {
      return writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
        isUpdate, resultsIdx, callback);
    }

    docCountDelta += delta;
    updateDocCountIfReady();

    finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
      isUpdate, resultsIdx, callback);
  }

  function finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
                     isUpdate, resultsIdx, callback) {

    var doc = docInfo.data;
    var metadata = docInfo.metadata;

    doc._doc_id_rev = metadata.id + '::' + metadata.rev;
    delete doc._id;
    delete doc._rev;

    function afterPutDoc(e) {
      var revsToDelete = docInfo.stemmedRevs || [];

      if (isUpdate && api.auto_compaction) {
        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));
      }

      if (revsToDelete && revsToDelete.length) {
        compactRevs(revsToDelete, docInfo.metadata.id, txn);
      }

      metadata.seq = e.target.result;
      // Current _rev is calculated from _rev_tree on read
      // delete metadata.rev;
      var metadataToStore = encodeMetadata(metadata, winningRev$$1,
        winningRevIsDeleted);
      var metaDataReq = docStore.put(metadataToStore);
      metaDataReq.onsuccess = afterPutMetadata;
    }

    function afterPutDocError(e) {
      // ConstraintError, need to update, not put (see #1638 for details)
      e.preventDefault(); // avoid transaction abort
      e.stopPropagation(); // avoid transaction onerror
      var index = bySeqStore.index('_doc_id_rev');
      var getKeyReq = index.getKey(doc._doc_id_rev);
      getKeyReq.onsuccess = function (e) {
        var putReq = bySeqStore.put(doc, e.target.result);
        putReq.onsuccess = afterPutDoc;
      };
    }

    function afterPutMetadata() {
      results[resultsIdx] = {
        ok: true,
        id: metadata.id,
        rev: metadata.rev
      };
      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);
      insertAttachmentMappings(docInfo, metadata.seq, callback);
    }

    var putReq = bySeqStore.put(doc);

    putReq.onsuccess = afterPutDoc;
    putReq.onerror = afterPutDocError;
  }

  function writeAttachments(docInfo, winningRev$$1, winningRevIsDeleted,
                            isUpdate, resultsIdx, callback) {


    var doc = docInfo.data;

    var numDone = 0;
    var attachments = Object.keys(doc._attachments);

    function collectResults() {
      if (numDone === attachments.length) {
        finishDoc(docInfo, winningRev$$1, winningRevIsDeleted,
          isUpdate, resultsIdx, callback);
      }
    }

    function attachmentSaved() {
      numDone++;
      collectResults();
    }

    attachments.forEach(function (key) {
      var att = docInfo.data._attachments[key];
      if (!att.stub) {
        var data = att.data;
        delete att.data;
        att.revpos = parseInt(winningRev$$1, 10);
        var digest = att.digest;
        saveAttachment(digest, data, attachmentSaved);
      } else {
        numDone++;
        collectResults();
      }
    });
  }

  // map seqs to attachment digests, which
  // we will need later during compaction
  function insertAttachmentMappings(docInfo, seq, callback) {

    var attsAdded = 0;
    var attsToAdd = Object.keys(docInfo.data._attachments || {});

    if (!attsToAdd.length) {
      return callback();
    }

    function checkDone() {
      if (++attsAdded === attsToAdd.length) {
        callback();
      }
    }

    function add(att) {
      var digest = docInfo.data._attachments[att].digest;
      var req = attachAndSeqStore.put({
        seq: seq,
        digestSeq: digest + '::' + seq
      });

      req.onsuccess = checkDone;
      req.onerror = function (e) {
        // this callback is for a constaint error, which we ignore
        // because this docid/rev has already been associated with
        // the digest (e.g. when new_edits == false)
        e.preventDefault(); // avoid transaction abort
        e.stopPropagation(); // avoid transaction onerror
        checkDone();
      };
    }
    for (var i = 0; i < attsToAdd.length; i++) {
      add(attsToAdd[i]); // do in parallel
    }
  }

  function saveAttachment(digest, data, callback) {


    var getKeyReq = attachStore.count(digest);
    getKeyReq.onsuccess = function (e) {
      var count = e.target.result;
      if (count) {
        return callback(); // already exists
      }
      var newAtt = {
        digest: digest,
        body: data
      };
      var putReq = attachStore.put(newAtt);
      putReq.onsuccess = callback;
    };
  }
}

// Abstraction over IDBCursor and getAll()/getAllKeys() that allows us to batch our operations
// while falling back to a normal IDBCursor operation on browsers that don't support getAll() or
// getAllKeys(). This allows for a much faster implementation than just straight-up cursors, because
// we're not processing each document one-at-a-time.
function runBatchedCursor(objectStore, keyRange, descending, batchSize, onBatch) {

  if (batchSize === -1) {
    batchSize = 1000;
  }

  // Bail out of getAll()/getAllKeys() in the following cases:
  // 1) either method is unsupported - we need both
  // 2) batchSize is 1 (might as well use IDBCursor)
  // 3) descending – no real way to do this via getAll()/getAllKeys()

  var useGetAll = typeof objectStore.getAll === 'function' &&
    typeof objectStore.getAllKeys === 'function' &&
    batchSize > 1 && !descending;

  var keysBatch;
  var valuesBatch;
  var pseudoCursor;

  function onGetAll(e) {
    valuesBatch = e.target.result;
    if (keysBatch) {
      onBatch(keysBatch, valuesBatch, pseudoCursor);
    }
  }

  function onGetAllKeys(e) {
    keysBatch = e.target.result;
    if (valuesBatch) {
      onBatch(keysBatch, valuesBatch, pseudoCursor);
    }
  }

  function continuePseudoCursor() {
    if (!keysBatch.length) { // no more results
      return onBatch();
    }
    // fetch next batch, exclusive start
    var lastKey = keysBatch[keysBatch.length - 1];
    var newKeyRange;
    if (keyRange && keyRange.upper) {
      try {
        newKeyRange = IDBKeyRange.bound(lastKey, keyRange.upper,
          true, keyRange.upperOpen);
      } catch (e) {
        if (e.name === "DataError" && e.code === 0) {
          return onBatch(); // we're done, startkey and endkey are equal
        }
      }
    } else {
      newKeyRange = IDBKeyRange.lowerBound(lastKey, true);
    }
    keyRange = newKeyRange;
    keysBatch = null;
    valuesBatch = null;
    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
  }

  function onCursor(e) {
    var cursor = e.target.result;
    if (!cursor) { // done
      return onBatch();
    }
    // regular IDBCursor acts like a batch where batch size is always 1
    onBatch([cursor.key], [cursor.value], cursor);
  }

  if (useGetAll) {
    pseudoCursor = {"continue": continuePseudoCursor};
    objectStore.getAll(keyRange, batchSize).onsuccess = onGetAll;
    objectStore.getAllKeys(keyRange, batchSize).onsuccess = onGetAllKeys;
  } else if (descending) {
    objectStore.openCursor(keyRange, 'prev').onsuccess = onCursor;
  } else {
    objectStore.openCursor(keyRange).onsuccess = onCursor;
  }
}

// simple shim for objectStore.getAll(), falling back to IDBCursor
function getAll(objectStore, keyRange, onSuccess) {
  if (typeof objectStore.getAll === 'function') {
    // use native getAll
    objectStore.getAll(keyRange).onsuccess = onSuccess;
    return;
  }
  // fall back to cursors
  var values = [];

  function onCursor(e) {
    var cursor = e.target.result;
    if (cursor) {
      values.push(cursor.value);
      cursor.continue();
    } else {
      onSuccess({
        target: {
          result: values
        }
      });
    }
  }

  objectStore.openCursor(keyRange).onsuccess = onCursor;
}

function allDocsKeys(keys, docStore, onBatch) {
  // It's not guaranted to be returned in right order  
  var valuesBatch = new Array(keys.length);
  var count = 0;
  keys.forEach(function (key, index) {
    docStore.get(key).onsuccess = function (event) {
      if (event.target.result) {
        valuesBatch[index] = event.target.result;
      } else {
        valuesBatch[index] = {key: key, error: 'not_found'};
      }
      count++;
      if (count === keys.length) {
        onBatch(keys, valuesBatch, {});
      }
    };
  });
}

function createKeyRange(start, end, inclusiveEnd, key, descending) {
  try {
    if (start && end) {
      if (descending) {
        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);
      } else {
        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);
      }
    } else if (start) {
      if (descending) {
        return IDBKeyRange.upperBound(start);
      } else {
        return IDBKeyRange.lowerBound(start);
      }
    } else if (end) {
      if (descending) {
        return IDBKeyRange.lowerBound(end, !inclusiveEnd);
      } else {
        return IDBKeyRange.upperBound(end, !inclusiveEnd);
      }
    } else if (key) {
      return IDBKeyRange.only(key);
    }
  } catch (e) {
    return {error: e};
  }
  return null;
}

function idbAllDocs(opts, idb, callback) {
  var start = 'startkey' in opts ? opts.startkey : false;
  var end = 'endkey' in opts ? opts.endkey : false;
  var key = 'key' in opts ? opts.key : false;
  var keys = 'keys' in opts ? opts.keys : false; 
  var skip = opts.skip || 0;
  var limit = typeof opts.limit === 'number' ? opts.limit : -1;
  var inclusiveEnd = opts.inclusive_end !== false;

  var keyRange ; 
  var keyRangeError;
  if (!keys) {
    keyRange = createKeyRange(start, end, inclusiveEnd, key, opts.descending);
    keyRangeError = keyRange && keyRange.error;
    if (keyRangeError && 
      !(keyRangeError.name === "DataError" && keyRangeError.code === 0)) {
      // DataError with error code 0 indicates start is less than end, so
      // can just do an empty query. Else need to throw
      return callback(createError(IDB_ERROR,
        keyRangeError.name, keyRangeError.message));
    }
  }

  var stores = [DOC_STORE, BY_SEQ_STORE, META_STORE];

  if (opts.attachments) {
    stores.push(ATTACH_STORE);
  }
  var txnResult = openTransactionSafely(idb, stores, 'readonly');
  if (txnResult.error) {
    return callback(txnResult.error);
  }
  var txn = txnResult.txn;
  txn.oncomplete = onTxnComplete;
  txn.onabort = idbError(callback);
  var docStore = txn.objectStore(DOC_STORE);
  var seqStore = txn.objectStore(BY_SEQ_STORE);
  var metaStore = txn.objectStore(META_STORE);
  var docIdRevIndex = seqStore.index('_doc_id_rev');
  var results = [];
  var docCount;
  var updateSeq;

  metaStore.get(META_STORE).onsuccess = function (e) {
    docCount = e.target.result.docCount;
  };

  /* istanbul ignore if */
  if (opts.update_seq) {
    getMaxUpdateSeq(seqStore, function (e) { 
      if (e.target.result && e.target.result.length > 0) {
        updateSeq = e.target.result[0];
      }
    });
  }

  function getMaxUpdateSeq(objectStore, onSuccess) {
    function onCursor(e) {
      var cursor = e.target.result;
      var maxKey = undefined;
      if (cursor && cursor.key) {
        maxKey = cursor.key;
      } 
      return onSuccess({
        target: {
          result: [maxKey]
        }
      });
    }
    objectStore.openCursor(null, 'prev').onsuccess = onCursor;
  }

  // if the user specifies include_docs=true, then we don't
  // want to block the main cursor while we're fetching the doc
  function fetchDocAsynchronously(metadata, row, winningRev$$1) {
    var key = metadata.id + "::" + winningRev$$1;
    docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {
      row.doc = decodeDoc(e.target.result) || {};
      if (opts.conflicts) {
        var conflicts = collectConflicts(metadata);
        if (conflicts.length) {
          row.doc._conflicts = conflicts;
        }
      }
      fetchAttachmentsIfNecessary(row.doc, opts, txn);
    };
  }

  function allDocsInner(winningRev$$1, metadata) {
    var row = {
      id: metadata.id,
      key: metadata.id,
      value: {
        rev: winningRev$$1
      }
    };
    var deleted = metadata.deleted;
    if (deleted) {
      if (keys) {
        results.push(row);
        // deleted docs are okay with "keys" requests
        row.value.deleted = true;
        row.doc = null;
      }
    } else if (skip-- <= 0) {
      results.push(row);
      if (opts.include_docs) {
        fetchDocAsynchronously(metadata, row, winningRev$$1);
      }
    }
  }

  function processBatch(batchValues) {
    for (var i = 0, len = batchValues.length; i < len; i++) {
      if (results.length === limit) {
        break;
      }
      var batchValue = batchValues[i];
      if (batchValue.error && keys) {
        // key was not found with "keys" requests
        results.push(batchValue);
        continue;
      }
      var metadata = decodeMetadata(batchValue);
      var winningRev$$1 = metadata.winningRev;
      allDocsInner(winningRev$$1, metadata);
    }
  }

  function onBatch(batchKeys, batchValues, cursor) {
    if (!cursor) {
      return;
    }
    processBatch(batchValues);
    if (results.length < limit) {
      cursor.continue();
    }
  }

  function onGetAll(e) {
    var values = e.target.result;
    if (opts.descending) {
      values = values.reverse();
    }
    processBatch(values);
  }

  function onResultsReady() {
    var returnVal = {
      total_rows: docCount,
      offset: opts.skip,
      rows: results
    };
    
    /* istanbul ignore if */
    if (opts.update_seq && updateSeq !== undefined) {
      returnVal.update_seq = updateSeq;
    }
    callback(null, returnVal);
  }

  function onTxnComplete() {
    if (opts.attachments) {
      postProcessAttachments(results, opts.binary).then(onResultsReady);
    } else {
      onResultsReady();
    }
  }

  // don't bother doing any requests if start > end or limit === 0
  if (keyRangeError || limit === 0) {
    return;
  }
  if (keys) {
    return allDocsKeys(opts.keys, docStore, onBatch);
  }
  if (limit === -1) { // just fetch everything
    return getAll(docStore, keyRange, onGetAll);
  }
  // else do a cursor
  // choose a batch size based on the skip, since we'll need to skip that many
  runBatchedCursor(docStore, keyRange, opts.descending, limit + skip, onBatch);
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
function checkBlobSupport(txn) {
  return new Promise(function (resolve) {
    var blob$$1 = createBlob(['']);
    var req = txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob$$1, 'key');

    req.onsuccess = function () {
      var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
      var matchedEdge = navigator.userAgent.match(/Edge\//);
      // MS Edge pretends to be Chrome 42:
      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
      resolve(matchedEdge || !matchedChrome ||
        parseInt(matchedChrome[1], 10) >= 43);
    };

    req.onerror = txn.onabort = function (e) {
      // If the transaction aborts now its due to not being able to
      // write to the database, likely due to the disk being full
      e.preventDefault();
      e.stopPropagation();
      resolve(false);
    };
  }).catch(function () {
    return false; // error, so assume unsupported
  });
}

function countDocs(txn, cb) {
  var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');
  index.count(IDBKeyRange.only('0')).onsuccess = function (e) {
    cb(e.target.result);
  };
}

// This task queue ensures that IDB open calls are done in their own tick

var running = false;
var queue = [];

function tryCode(fun, err, res, PouchDB) {
  try {
    fun(err, res);
  } catch (err) {
    // Shouldn't happen, but in some odd cases
    // IndexedDB implementations might throw a sync
    // error, in which case this will at least log it.
    PouchDB.emit('error', err);
  }
}

function applyNext() {
  if (running || !queue.length) {
    return;
  }
  running = true;
  queue.shift()();
}

function enqueueTask(action, callback, PouchDB) {
  queue.push(function runAction() {
    action(function runCallback(err, res) {
      tryCode(callback, err, res, PouchDB);
      running = false;
      immediate__WEBPACK_IMPORTED_MODULE_0___default()(function runNext() {
        applyNext(PouchDB);
      });
    });
  });
  applyNext();
}

function changes(opts, api, dbName, idb) {
  opts = clone(opts);

  if (opts.continuous) {
    var id = dbName + ':' + uuid();
    changesHandler.addListener(dbName, id, api, opts);
    changesHandler.notify(dbName);
    return {
      cancel: function () {
        changesHandler.removeListener(dbName, id);
      }
    };
  }

  var docIds = opts.doc_ids && new ExportedSet(opts.doc_ids);

  opts.since = opts.since || 0;
  var lastSeq = opts.since;

  var limit = 'limit' in opts ? opts.limit : -1;
  if (limit === 0) {
    limit = 1; // per CouchDB _changes spec
  }

  var results = [];
  var numResults = 0;
  var filter = filterChange(opts);
  var docIdsToMetadata = new ExportedMap();

  var txn;
  var bySeqStore;
  var docStore;
  var docIdRevIndex;

  function onBatch(batchKeys, batchValues, cursor) {
    if (!cursor || !batchKeys.length) { // done
      return;
    }

    var winningDocs = new Array(batchKeys.length);
    var metadatas = new Array(batchKeys.length);

    function processMetadataAndWinningDoc(metadata, winningDoc) {
      var change = opts.processChange(winningDoc, metadata, opts);
      lastSeq = change.seq = metadata.seq;

      var filtered = filter(change);
      if (typeof filtered === 'object') { // anything but true/false indicates error
        return Promise.reject(filtered);
      }

      if (!filtered) {
        return Promise.resolve();
      }
      numResults++;
      if (opts.return_docs) {
        results.push(change);
      }
      // process the attachment immediately
      // for the benefit of live listeners
      if (opts.attachments && opts.include_docs) {
        return new Promise(function (resolve) {
          fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {
            postProcessAttachments([change], opts.binary).then(function () {
              resolve(change);
            });
          });
        });
      } else {
        return Promise.resolve(change);
      }
    }

    function onBatchDone() {
      var promises = [];
      for (var i = 0, len = winningDocs.length; i < len; i++) {
        if (numResults === limit) {
          break;
        }
        var winningDoc = winningDocs[i];
        if (!winningDoc) {
          continue;
        }
        var metadata = metadatas[i];
        promises.push(processMetadataAndWinningDoc(metadata, winningDoc));
      }

      Promise.all(promises).then(function (changes) {
        for (var i = 0, len = changes.length; i < len; i++) {
          if (changes[i]) {
            opts.onChange(changes[i]);
          }
        }
      }).catch(opts.complete);

      if (numResults !== limit) {
        cursor.continue();
      }
    }

    // Fetch all metadatas/winningdocs from this batch in parallel, then process
    // them all only once all data has been collected. This is done in parallel
    // because it's faster than doing it one-at-a-time.
    var numDone = 0;
    batchValues.forEach(function (value, i) {
      var doc = decodeDoc(value);
      var seq = batchKeys[i];
      fetchWinningDocAndMetadata(doc, seq, function (metadata, winningDoc) {
        metadatas[i] = metadata;
        winningDocs[i] = winningDoc;
        if (++numDone === batchKeys.length) {
          onBatchDone();
        }
      });
    });
  }

  function onGetMetadata(doc, seq, metadata, cb) {
    if (metadata.seq !== seq) {
      // some other seq is later
      return cb();
    }

    if (metadata.winningRev === doc._rev) {
      // this is the winning doc
      return cb(metadata, doc);
    }

    // fetch winning doc in separate request
    var docIdRev = doc._id + '::' + metadata.winningRev;
    var req = docIdRevIndex.get(docIdRev);
    req.onsuccess = function (e) {
      cb(metadata, decodeDoc(e.target.result));
    };
  }

  function fetchWinningDocAndMetadata(doc, seq, cb) {
    if (docIds && !docIds.has(doc._id)) {
      return cb();
    }

    var metadata = docIdsToMetadata.get(doc._id);
    if (metadata) { // cached
      return onGetMetadata(doc, seq, metadata, cb);
    }
    // metadata not cached, have to go fetch it
    docStore.get(doc._id).onsuccess = function (e) {
      metadata = decodeMetadata(e.target.result);
      docIdsToMetadata.set(doc._id, metadata);
      onGetMetadata(doc, seq, metadata, cb);
    };
  }

  function finish() {
    opts.complete(null, {
      results: results,
      last_seq: lastSeq
    });
  }

  function onTxnComplete() {
    if (!opts.continuous && opts.attachments) {
      // cannot guarantee that postProcessing was already done,
      // so do it again
      postProcessAttachments(results).then(finish);
    } else {
      finish();
    }
  }

  var objectStores = [DOC_STORE, BY_SEQ_STORE];
  if (opts.attachments) {
    objectStores.push(ATTACH_STORE);
  }
  var txnResult = openTransactionSafely(idb, objectStores, 'readonly');
  if (txnResult.error) {
    return opts.complete(txnResult.error);
  }
  txn = txnResult.txn;
  txn.onabort = idbError(opts.complete);
  txn.oncomplete = onTxnComplete;

  bySeqStore = txn.objectStore(BY_SEQ_STORE);
  docStore = txn.objectStore(DOC_STORE);
  docIdRevIndex = bySeqStore.index('_doc_id_rev');

  var keyRange = (opts.since && !opts.descending) ?
    IDBKeyRange.lowerBound(opts.since, true) : null;

  runBatchedCursor(bySeqStore, keyRange, opts.descending, limit, onBatch);
}

var cachedDBs = new ExportedMap();
var blobSupportPromise;
var openReqList = new ExportedMap();

function IdbPouch(opts, callback) {
  var api = this;

  enqueueTask(function (thisCallback) {
    init(api, opts, thisCallback);
  }, callback, api.constructor);
}

function init(api, opts, callback) {

  var dbName = opts.name;

  var idb = null;
  api._meta = null;

  // called when creating a fresh new database
  function createSchema(db) {
    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});
    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})
      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});
    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});
    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);

    // added in v2
    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

    // added in v3
    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});

    // added in v4
    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
      {autoIncrement: true});
    attAndSeqStore.createIndex('seq', 'seq');
    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
  }

  // migration to version 2
  // unfortunately "deletedOrLocal" is a misnomer now that we no longer
  // store local docs in the main doc-store, but whaddyagonnado
  function addDeletedOrLocalIndex(txn, callback) {
    var docStore = txn.objectStore(DOC_STORE);
    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});

    docStore.openCursor().onsuccess = function (event) {
      var cursor = event.target.result;
      if (cursor) {
        var metadata = cursor.value;
        var deleted = isDeleted(metadata);
        metadata.deletedOrLocal = deleted ? "1" : "0";
        docStore.put(metadata);
        cursor.continue();
      } else {
        callback();
      }
    };
  }

  // migration to version 3 (part 1)
  function createLocalStoreSchema(db) {
    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})
      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});
  }

  // migration to version 3 (part 2)
  function migrateLocalStore(txn, cb) {
    var localStore = txn.objectStore(LOCAL_STORE);
    var docStore = txn.objectStore(DOC_STORE);
    var seqStore = txn.objectStore(BY_SEQ_STORE);

    var cursor = docStore.openCursor();
    cursor.onsuccess = function (event) {
      var cursor = event.target.result;
      if (cursor) {
        var metadata = cursor.value;
        var docId = metadata.id;
        var local = isLocalId(docId);
        var rev$$1 = winningRev(metadata);
        if (local) {
          var docIdRev = docId + "::" + rev$$1;
          // remove all seq entries
          // associated with this docId
          var start = docId + "::";
          var end = docId + "::~";
          var index = seqStore.index('_doc_id_rev');
          var range = IDBKeyRange.bound(start, end, false, false);
          var seqCursor = index.openCursor(range);
          seqCursor.onsuccess = function (e) {
            seqCursor = e.target.result;
            if (!seqCursor) {
              // done
              docStore.delete(cursor.primaryKey);
              cursor.continue();
            } else {
              var data = seqCursor.value;
              if (data._doc_id_rev === docIdRev) {
                localStore.put(data);
              }
              seqStore.delete(seqCursor.primaryKey);
              seqCursor.continue();
            }
          };
        } else {
          cursor.continue();
        }
      } else if (cb) {
        cb();
      }
    };
  }

  // migration to version 4 (part 1)
  function addAttachAndSeqStore(db) {
    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,
      {autoIncrement: true});
    attAndSeqStore.createIndex('seq', 'seq');
    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});
  }

  // migration to version 4 (part 2)
  function migrateAttsAndSeqs(txn, callback) {
    var seqStore = txn.objectStore(BY_SEQ_STORE);
    var attStore = txn.objectStore(ATTACH_STORE);
    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);

    // need to actually populate the table. this is the expensive part,
    // so as an optimization, check first that this database even
    // contains attachments
    var req = attStore.count();
    req.onsuccess = function (e) {
      var count = e.target.result;
      if (!count) {
        return callback(); // done
      }

      seqStore.openCursor().onsuccess = function (e) {
        var cursor = e.target.result;
        if (!cursor) {
          return callback(); // done
        }
        var doc = cursor.value;
        var seq = cursor.primaryKey;
        var atts = Object.keys(doc._attachments || {});
        var digestMap = {};
        for (var j = 0; j < atts.length; j++) {
          var att = doc._attachments[atts[j]];
          digestMap[att.digest] = true; // uniq digests, just in case
        }
        var digests = Object.keys(digestMap);
        for (j = 0; j < digests.length; j++) {
          var digest = digests[j];
          attAndSeqStore.put({
            seq: seq,
            digestSeq: digest + '::' + seq
          });
        }
        cursor.continue();
      };
    };
  }

  // migration to version 5
  // Instead of relying on on-the-fly migration of metadata,
  // this brings the doc-store to its modern form:
  // - metadata.winningrev
  // - metadata.seq
  // - stringify the metadata when storing it
  function migrateMetadata(txn) {

    function decodeMetadataCompat(storedObject) {
      if (!storedObject.data) {
        // old format, when we didn't store it stringified
        storedObject.deleted = storedObject.deletedOrLocal === '1';
        return storedObject;
      }
      return decodeMetadata(storedObject);
    }

    // ensure that every metadata has a winningRev and seq,
    // which was previously created on-the-fly but better to migrate
    var bySeqStore = txn.objectStore(BY_SEQ_STORE);
    var docStore = txn.objectStore(DOC_STORE);
    var cursor = docStore.openCursor();
    cursor.onsuccess = function (e) {
      var cursor = e.target.result;
      if (!cursor) {
        return; // done
      }
      var metadata = decodeMetadataCompat(cursor.value);

      metadata.winningRev = metadata.winningRev ||
        winningRev(metadata);

      function fetchMetadataSeq() {
        // metadata.seq was added post-3.2.0, so if it's missing,
        // we need to fetch it manually
        var start = metadata.id + '::';
        var end = metadata.id + '::\uffff';
        var req = bySeqStore.index('_doc_id_rev').openCursor(
          IDBKeyRange.bound(start, end));

        var metadataSeq = 0;
        req.onsuccess = function (e) {
          var cursor = e.target.result;
          if (!cursor) {
            metadata.seq = metadataSeq;
            return onGetMetadataSeq();
          }
          var seq = cursor.primaryKey;
          if (seq > metadataSeq) {
            metadataSeq = seq;
          }
          cursor.continue();
        };
      }

      function onGetMetadataSeq() {
        var metadataToStore = encodeMetadata(metadata,
          metadata.winningRev, metadata.deleted);

        var req = docStore.put(metadataToStore);
        req.onsuccess = function () {
          cursor.continue();
        };
      }

      if (metadata.seq) {
        return onGetMetadataSeq();
      }

      fetchMetadataSeq();
    };

  }

  api._remote = false;
  api.type = function () {
    return 'idb';
  };

  api._id = toPromise(function (callback) {
    callback(null, api._meta.instanceId);
  });

  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {
    idbBulkDocs(opts, req, reqOpts, api, idb, callback);
  };

  // First we look up the metadata in the ids database, then we fetch the
  // current revision(s) from the by sequence store
  api._get = function idb_get(id, opts, callback) {
    var doc;
    var metadata;
    var err;
    var txn = opts.ctx;
    if (!txn) {
      var txnResult = openTransactionSafely(idb,
        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      txn = txnResult.txn;
    }

    function finish() {
      callback(err, {doc: doc, metadata: metadata, ctx: txn});
    }

    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {
      metadata = decodeMetadata(e.target.result);
      // we can determine the result here if:
      // 1. there is no such document
      // 2. the document is deleted and we don't ask about specific rev
      // When we ask with opts.rev we expect the answer to be either
      // doc (possibly with _deleted=true) or missing error
      if (!metadata) {
        err = createError(MISSING_DOC, 'missing');
        return finish();
      }

      var rev$$1;
      if (!opts.rev) {
        rev$$1 = metadata.winningRev;
        var deleted = isDeleted(metadata);
        if (deleted) {
          err = createError(MISSING_DOC, "deleted");
          return finish();
        }
      } else {
        rev$$1 = opts.latest ? latest(opts.rev, metadata) : opts.rev;
      }

      var objectStore = txn.objectStore(BY_SEQ_STORE);
      var key = metadata.id + '::' + rev$$1;

      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {
        doc = e.target.result;
        if (doc) {
          doc = decodeDoc(doc);
        }
        if (!doc) {
          err = createError(MISSING_DOC, 'missing');
          return finish();
        }
        finish();
      };
    };
  };

  api._getAttachment = function (docId, attachId, attachment, opts, callback) {
    var txn;
    if (opts.ctx) {
      txn = opts.ctx;
    } else {
      var txnResult = openTransactionSafely(idb,
        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      txn = txnResult.txn;
    }
    var digest = attachment.digest;
    var type = attachment.content_type;

    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {
      var body = e.target.result.body;
      readBlobData(body, type, opts.binary, function (blobData) {
        callback(null, blobData);
      });
    };
  };

  api._info = function idb_info(callback) {
    var updateSeq;
    var docCount;

    var txnResult = openTransactionSafely(idb, [META_STORE, BY_SEQ_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;
    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
      docCount = e.target.result.docCount;
    };
    txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev').onsuccess = function (e) {
      var cursor = e.target.result;
      updateSeq = cursor ? cursor.key : 0;
    };

    txn.oncomplete = function () {
      callback(null, {
        doc_count: docCount,
        update_seq: updateSeq,
        // for debugging
        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')
      });
    };
  };

  api._allDocs = function idb_allDocs(opts, callback) {
    idbAllDocs(opts, idb, callback);
  };

  api._changes = function idbChanges(opts) {
    return changes(opts, api, dbName, idb);
  };

  api._close = function (callback) {
    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close
    // "Returns immediately and closes the connection in a separate thread..."
    idb.close();
    cachedDBs.delete(dbName);
    callback();
  };

  api._getRevisionTree = function (docId, callback) {
    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;
    var req = txn.objectStore(DOC_STORE).get(docId);
    req.onsuccess = function (event) {
      var doc = decodeMetadata(event.target.result);
      if (!doc) {
        callback(createError(MISSING_DOC));
      } else {
        callback(null, doc.rev_tree);
      }
    };
  };

  // This function removes revisions of document docId
  // which are listed in revs and sets this document
  // revision to to rev_tree
  api._doCompaction = function (docId, revs, callback) {
    var stores = [
      DOC_STORE,
      BY_SEQ_STORE,
      ATTACH_STORE,
      ATTACH_AND_SEQ_STORE
    ];
    var txnResult = openTransactionSafely(idb, stores, 'readwrite');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var txn = txnResult.txn;

    var docStore = txn.objectStore(DOC_STORE);

    docStore.get(docId).onsuccess = function (event) {
      var metadata = decodeMetadata(event.target.result);
      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,
                                                         revHash, ctx, opts) {
        var rev$$1 = pos + '-' + revHash;
        if (revs.indexOf(rev$$1) !== -1) {
          opts.status = 'missing';
        }
      });
      compactRevs(revs, docId, txn);
      var winningRev$$1 = metadata.winningRev;
      var deleted = metadata.deleted;
      txn.objectStore(DOC_STORE).put(
        encodeMetadata(metadata, winningRev$$1, deleted));
    };
    txn.onabort = idbError(callback);
    txn.oncomplete = function () {
      callback();
    };
  };


  api._getLocal = function (id, callback) {
    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');
    if (txnResult.error) {
      return callback(txnResult.error);
    }
    var tx = txnResult.txn;
    var req = tx.objectStore(LOCAL_STORE).get(id);

    req.onerror = idbError(callback);
    req.onsuccess = function (e) {
      var doc = e.target.result;
      if (!doc) {
        callback(createError(MISSING_DOC));
      } else {
        delete doc['_doc_id_rev']; // for backwards compat
        callback(null, doc);
      }
    };
  };

  api._putLocal = function (doc, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    delete doc._revisions; // ignore this, trust the rev
    var oldRev = doc._rev;
    var id = doc._id;
    if (!oldRev) {
      doc._rev = '0-1';
    } else {
      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);
    }

    var tx = opts.ctx;
    var ret;
    if (!tx) {
      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      tx = txnResult.txn;
      tx.onerror = idbError(callback);
      tx.oncomplete = function () {
        if (ret) {
          callback(null, ret);
        }
      };
    }

    var oStore = tx.objectStore(LOCAL_STORE);
    var req;
    if (oldRev) {
      req = oStore.get(id);
      req.onsuccess = function (e) {
        var oldDoc = e.target.result;
        if (!oldDoc || oldDoc._rev !== oldRev) {
          callback(createError(REV_CONFLICT));
        } else { // update
          var req = oStore.put(doc);
          req.onsuccess = function () {
            ret = {ok: true, id: doc._id, rev: doc._rev};
            if (opts.ctx) { // return immediately
              callback(null, ret);
            }
          };
        }
      };
    } else { // new doc
      req = oStore.add(doc);
      req.onerror = function (e) {
        // constraint error, already exists
        callback(createError(REV_CONFLICT));
        e.preventDefault(); // avoid transaction abort
        e.stopPropagation(); // avoid transaction onerror
      };
      req.onsuccess = function () {
        ret = {ok: true, id: doc._id, rev: doc._rev};
        if (opts.ctx) { // return immediately
          callback(null, ret);
        }
      };
    }
  };

  api._removeLocal = function (doc, opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    var tx = opts.ctx;
    if (!tx) {
      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');
      if (txnResult.error) {
        return callback(txnResult.error);
      }
      tx = txnResult.txn;
      tx.oncomplete = function () {
        if (ret) {
          callback(null, ret);
        }
      };
    }
    var ret;
    var id = doc._id;
    var oStore = tx.objectStore(LOCAL_STORE);
    var req = oStore.get(id);

    req.onerror = idbError(callback);
    req.onsuccess = function (e) {
      var oldDoc = e.target.result;
      if (!oldDoc || oldDoc._rev !== doc._rev) {
        callback(createError(MISSING_DOC));
      } else {
        oStore.delete(id);
        ret = {ok: true, id: id, rev: '0-0'};
        if (opts.ctx) { // return immediately
          callback(null, ret);
        }
      }
    };
  };

  api._destroy = function (opts, callback) {
    changesHandler.removeAllListeners(dbName);

    //Close open request for "dbName" database to fix ie delay.
    var openReq = openReqList.get(dbName);
    if (openReq && openReq.result) {
      openReq.result.close();
      cachedDBs.delete(dbName);
    }
    var req = indexedDB.deleteDatabase(dbName);

    req.onsuccess = function () {
      //Remove open request from the list.
      openReqList.delete(dbName);
      if (hasLocalStorage() && (dbName in localStorage)) {
        delete localStorage[dbName];
      }
      callback(null, { 'ok': true });
    };

    req.onerror = idbError(callback);
  };

  var cached = cachedDBs.get(dbName);

  if (cached) {
    idb = cached.idb;
    api._meta = cached.global;
    return immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
      callback(null, api);
    });
  }

  var req = indexedDB.open(dbName, ADAPTER_VERSION);
  openReqList.set(dbName, req);

  req.onupgradeneeded = function (e) {
    var db = e.target.result;
    if (e.oldVersion < 1) {
      return createSchema(db); // new db, initial schema
    }
    // do migrations

    var txn = e.currentTarget.transaction;
    // these migrations have to be done in this function, before
    // control is returned to the event loop, because IndexedDB

    if (e.oldVersion < 3) {
      createLocalStoreSchema(db); // v2 -> v3
    }
    if (e.oldVersion < 4) {
      addAttachAndSeqStore(db); // v3 -> v4
    }

    var migrations = [
      addDeletedOrLocalIndex, // v1 -> v2
      migrateLocalStore,      // v2 -> v3
      migrateAttsAndSeqs,     // v3 -> v4
      migrateMetadata         // v4 -> v5
    ];

    var i = e.oldVersion;

    function next() {
      var migration = migrations[i - 1];
      i++;
      if (migration) {
        migration(txn, next);
      }
    }

    next();
  };

  req.onsuccess = function (e) {

    idb = e.target.result;

    idb.onversionchange = function () {
      idb.close();
      cachedDBs.delete(dbName);
    };

    idb.onabort = function (e) {
      guardedConsole('error', 'Database has a global failure', e.target.error);
      idb.close();
      cachedDBs.delete(dbName);
    };

    // Do a few setup operations (in parallel as much as possible):
    // 1. Fetch meta doc
    // 2. Check blob support
    // 3. Calculate docCount
    // 4. Generate an instanceId if necessary
    // 5. Store docCount and instanceId on meta doc

    var txn = idb.transaction([
      META_STORE,
      DETECT_BLOB_SUPPORT_STORE,
      DOC_STORE
    ], 'readwrite');

    var storedMetaDoc = false;
    var metaDoc;
    var docCount;
    var blobSupport;
    var instanceId;

    function completeSetup() {
      if (typeof blobSupport === 'undefined' || !storedMetaDoc) {
        return;
      }
      api._meta = {
        name: dbName,
        instanceId: instanceId,
        blobSupport: blobSupport
      };

      cachedDBs.set(dbName, {
        idb: idb,
        global: api._meta
      });
      callback(null, api);
    }

    function storeMetaDocIfReady() {
      if (typeof docCount === 'undefined' || typeof metaDoc === 'undefined') {
        return;
      }
      var instanceKey = dbName + '_id';
      if (instanceKey in metaDoc) {
        instanceId = metaDoc[instanceKey];
      } else {
        metaDoc[instanceKey] = instanceId = uuid();
      }
      metaDoc.docCount = docCount;
      txn.objectStore(META_STORE).put(metaDoc);
    }

    //
    // fetch or generate the instanceId
    //
    txn.objectStore(META_STORE).get(META_STORE).onsuccess = function (e) {
      metaDoc = e.target.result || { id: META_STORE };
      storeMetaDocIfReady();
    };

    //
    // countDocs
    //
    countDocs(txn, function (count) {
      docCount = count;
      storeMetaDocIfReady();
    });

    //
    // check blob support
    //
    if (!blobSupportPromise) {
      // make sure blob support is only checked once
      blobSupportPromise = checkBlobSupport(txn);
    }

    blobSupportPromise.then(function (val) {
      blobSupport = val;
      completeSetup();
    });

    // only when the metadata put transaction has completed,
    // consider the setup done
    txn.oncomplete = function () {
      storedMetaDoc = true;
      completeSetup();
    };
    txn.onabort = idbError(callback);
  };

  req.onerror = function (e) {
    var msg = e.target.error && e.target.error.message;

    if (!msg) {
      msg = 'Failed to open indexedDB, are you in private browsing mode?';
    } else if (msg.indexOf("stored database is a higher version") !== -1) {
      msg = new Error('This DB was created with the newer "indexeddb" adapter, but you are trying to open it with the older "idb" adapter');
    }

    guardedConsole('error', msg);
    callback(createError(IDB_ERROR, msg));
  };
}

IdbPouch.valid = function () {
  // Following #7085 buggy idb versions (typically Safari < 10.1) are
  // considered valid.

  // On Firefox SecurityError is thrown while referencing indexedDB if cookies
  // are not allowed. `typeof indexedDB` also triggers the error.
  try {
    // some outdated implementations of IDB that appear on Samsung
    // and HTC Android devices <4.4 are missing IDBKeyRange
    return typeof indexedDB !== 'undefined' && typeof IDBKeyRange !== 'undefined';
  } catch (e) {
    return false;
  }
};

function IDBPouch (PouchDB) {
  PouchDB.adapter('idb', IdbPouch, true);
}

// dead simple promise pool, inspired by https://github.com/timdp/es6-promise-pool
// but much smaller in code size. limits the number of concurrent promises that are executed


function pool(promiseFactories, limit) {
  return new Promise(function (resolve, reject) {
    var running = 0;
    var current = 0;
    var done = 0;
    var len = promiseFactories.length;
    var err;

    function runNext() {
      running++;
      promiseFactories[current++]().then(onSuccess, onError);
    }

    function doNext() {
      if (++done === len) {
        /* istanbul ignore if */
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      } else {
        runNextBatch();
      }
    }

    function onSuccess() {
      running--;
      doNext();
    }

    /* istanbul ignore next */
    function onError(thisErr) {
      running--;
      err = err || thisErr;
      doNext();
    }

    function runNextBatch() {
      while (running < limit && current < len) {
        runNext();
      }
    }

    runNextBatch();
  });
}

var CHANGES_BATCH_SIZE = 25;
var MAX_SIMULTANEOUS_REVS = 50;
var CHANGES_TIMEOUT_BUFFER = 5000;
var DEFAULT_HEARTBEAT = 10000;

var supportsBulkGetMap = {};

function readAttachmentsAsBlobOrBuffer(row) {
  var doc = row.doc || row.ok;
  var atts = doc && doc._attachments;
  if (!atts) {
    return;
  }
  Object.keys(atts).forEach(function (filename) {
    var att = atts[filename];
    att.data = b64ToBluffer(att.data, att.content_type);
  });
}

function encodeDocId(id) {
  if (/^_design/.test(id)) {
    return '_design/' + encodeURIComponent(id.slice(8));
  }
  if (/^_local/.test(id)) {
    return '_local/' + encodeURIComponent(id.slice(7));
  }
  return encodeURIComponent(id);
}

function preprocessAttachments$1(doc) {
  if (!doc._attachments || !Object.keys(doc._attachments)) {
    return Promise.resolve();
  }

  return Promise.all(Object.keys(doc._attachments).map(function (key) {
    var attachment = doc._attachments[key];
    if (attachment.data && typeof attachment.data !== 'string') {
      return new Promise(function (resolve) {
        blobToBase64(attachment.data, resolve);
      }).then(function (b64) {
        attachment.data = b64;
      });
    }
  }));
}

function hasUrlPrefix(opts) {
  if (!opts.prefix) {
    return false;
  }
  var protocol = parseUri(opts.prefix).protocol;
  return protocol === 'http' || protocol === 'https';
}

// Get all the information you possibly can about the URI given by name and
// return it as a suitable object.
function getHost(name, opts) {
  // encode db name if opts.prefix is a url (#5574)
  if (hasUrlPrefix(opts)) {
    var dbName = opts.name.substr(opts.prefix.length);
    // Ensure prefix has a trailing slash
    var prefix = opts.prefix.replace(/\/?$/, '/');
    name = prefix + encodeURIComponent(dbName);
  }

  var uri = parseUri(name);
  if (uri.user || uri.password) {
    uri.auth = {username: uri.user, password: uri.password};
  }

  // Split the path part of the URI into parts using '/' as the delimiter
  // after removing any leading '/' and any trailing '/'
  var parts = uri.path.replace(/(^\/|\/$)/g, '').split('/');

  uri.db = parts.pop();
  // Prevent double encoding of URI component
  if (uri.db.indexOf('%') === -1) {
    uri.db = encodeURIComponent(uri.db);
  }

  uri.path = parts.join('/');

  return uri;
}

// Generate a URL with the host data given by opts and the given path
function genDBUrl(opts, path) {
  return genUrl(opts, opts.db + '/' + path);
}

// Generate a URL with the host data given by opts and the given path
function genUrl(opts, path) {
  // If the host already has a path, then we need to have a path delimiter
  // Otherwise, the path delimiter is the empty string
  var pathDel = !opts.path ? '' : '/';

  // If the host already has a path, then we need to have a path delimiter
  // Otherwise, the path delimiter is the empty string
  return opts.protocol + '://' + opts.host +
         (opts.port ? (':' + opts.port) : '') +
         '/' + opts.path + pathDel + path;
}

function paramsToStr(params) {
  return '?' + Object.keys(params).map(function (k) {
    return k + '=' + encodeURIComponent(params[k]);
  }).join('&');
}

function shouldCacheBust(opts) {
  var ua = (typeof navigator !== 'undefined' && navigator.userAgent) ?
      navigator.userAgent.toLowerCase() : '';
  var isIE = ua.indexOf('msie') !== -1;
  var isTrident = ua.indexOf('trident') !== -1;
  var isEdge = ua.indexOf('edge') !== -1;
  var isGET = !('method' in opts) || opts.method === 'GET';
  return (isIE || isTrident || isEdge) && isGET;
}

// Implements the PouchDB API for dealing with CouchDB instances over HTTP
function HttpPouch(opts, callback) {

  // The functions that will be publicly available for HttpPouch
  var api = this;

  var host = getHost(opts.name, opts);
  var dbUrl = genDBUrl(host, '');

  opts = clone(opts);

  var ourFetch = function (url, options) {

    options = options || {};
    options.headers = options.headers || new h();

    options.credentials = 'include';

    if (opts.auth || host.auth) {
      var nAuth = opts.auth || host.auth;
      var str = nAuth.username + ':' + nAuth.password;
      var token = thisBtoa(unescape(encodeURIComponent(str)));
      options.headers.set('Authorization', 'Basic ' + token);
    }

    var headers = opts.headers || {};
    Object.keys(headers).forEach(function (key) {
      options.headers.append(key, headers[key]);
    });

    /* istanbul ignore if */
    if (shouldCacheBust(options)) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + '_nonce=' + Date.now();
    }

    var fetchFun = opts.fetch || f$1;
    return fetchFun(url, options);
  };

  function adapterFun$$1(name, fun) {
    return adapterFun(name, argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
      setup().then(function () {
        return fun.apply(this, args);
      }).catch(function (e) {
        var callback = args.pop();
        callback(e);
      });
    })).bind(api);
  }

  function fetchJSON(url, options, callback) {

    var result = {};

    options = options || {};
    options.headers = options.headers || new h();

    if (!options.headers.get('Content-Type')) {
      options.headers.set('Content-Type', 'application/json');
    }
    if (!options.headers.get('Accept')) {
      options.headers.set('Accept', 'application/json');
    }

    return ourFetch(url, options).then(function (response) {
      result.ok = response.ok;
      result.status = response.status;
      return response.json();
    }).then(function (json) {
      result.data = json;
      if (!result.ok) {
        result.data.status = result.status;
        var err = generateErrorFromResponse(result.data);
        if (callback) {
          return callback(err);
        } else {
          throw err;
        }
      }

      if (Array.isArray(result.data)) {
        result.data = result.data.map(function (v) {
          if (v.error || v.missing) {
            return generateErrorFromResponse(v);
          } else {
            return v;
          }
        });
      }

      if (callback) {
        callback(null, result.data);
      } else {
        return result;
      }
    });
  }

  var setupPromise;

  function setup() {
    if (opts.skip_setup) {
      return Promise.resolve();
    }

    // If there is a setup in process or previous successful setup
    // done then we will use that
    // If previous setups have been rejected we will try again
    if (setupPromise) {
      return setupPromise;
    }

    setupPromise = fetchJSON(dbUrl).catch(function (err) {
      if (err && err.status && err.status === 404) {
        // Doesnt exist, create it
        explainError(404, 'PouchDB is just detecting if the remote exists.');
        return fetchJSON(dbUrl, {method: 'PUT'});
      } else {
        return Promise.reject(err);
      }
    }).catch(function (err) {
      // If we try to create a database that already exists, skipped in
      // istanbul since its catching a race condition.
      /* istanbul ignore if */
      if (err && err.status && err.status === 412) {
        return true;
      }
      return Promise.reject(err);
    });

    setupPromise.catch(function () {
      setupPromise = null;
    });

    return setupPromise;
  }

  immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
    callback(null, api);
  });

  api._remote = true;

  /* istanbul ignore next */
  api.type = function () {
    return 'http';
  };

  api.id = adapterFun$$1('id', function (callback) {
    ourFetch(genUrl(host, '')).then(function (response) {
      return response.json();
    }).catch(function () {
      return {};
    }).then(function (result) {
      // Bad response or missing `uuid` should not prevent ID generation.
      var uuid$$1 = (result && result.uuid) ?
          (result.uuid + host.db) : genDBUrl(host, '');
      callback(null, uuid$$1);
    });
  });

  // Sends a POST request to the host calling the couchdb _compact function
  //    version: The version of CouchDB it is running
  api.compact = adapterFun$$1('compact', function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    fetchJSON(genDBUrl(host, '_compact'), {method: 'POST'}).then(function () {
      function ping() {
        api.info(function (err, res) {
          // CouchDB may send a "compact_running:true" if it's
          // already compacting. PouchDB Server doesn't.
          /* istanbul ignore else */
          if (res && !res.compact_running) {
            callback(null, {ok: true});
          } else {
            setTimeout(ping, opts.interval || 200);
          }
        });
      }
      // Ping the http if it's finished compaction
      ping();
    });
  });

  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {
    var self = this;

    function doBulkGet(cb) {
      var params = {};
      if (opts.revs) {
        params.revs = true;
      }
      if (opts.attachments) {
        /* istanbul ignore next */
        params.attachments = true;
      }
      if (opts.latest) {
        params.latest = true;
      }
      fetchJSON(genDBUrl(host, '_bulk_get' + paramsToStr(params)), {
        method: 'POST',
        body: JSON.stringify({ docs: opts.docs})
      }).then(function (result) {
        if (opts.attachments && opts.binary) {
          result.data.results.forEach(function (res) {
            res.docs.forEach(readAttachmentsAsBlobOrBuffer);
          });
        }
        cb(null, result.data);
      }).catch(cb);
    }

    /* istanbul ignore next */
    function doBulkGetShim() {
      // avoid "url too long error" by splitting up into multiple requests
      var batchSize = MAX_SIMULTANEOUS_REVS;
      var numBatches = Math.ceil(opts.docs.length / batchSize);
      var numDone = 0;
      var results = new Array(numBatches);

      function onResult(batchNum) {
        return function (err, res) {
          // err is impossible because shim returns a list of errs in that case
          results[batchNum] = res.results;
          if (++numDone === numBatches) {
            callback(null, {results: flatten(results)});
          }
        };
      }

      for (var i = 0; i < numBatches; i++) {
        var subOpts = pick(opts, ['revs', 'attachments', 'binary', 'latest']);
        subOpts.docs = opts.docs.slice(i * batchSize,
          Math.min(opts.docs.length, (i + 1) * batchSize));
        bulkGet(self, subOpts, onResult(i));
      }
    }

    // mark the whole database as either supporting or not supporting _bulk_get
    var dbUrl = genUrl(host, '');
    var supportsBulkGet = supportsBulkGetMap[dbUrl];

    /* istanbul ignore next */
    if (typeof supportsBulkGet !== 'boolean') {
      // check if this database supports _bulk_get
      doBulkGet(function (err, res) {
        if (err) {
          supportsBulkGetMap[dbUrl] = false;
          explainError(
            err.status,
            'PouchDB is just detecting if the remote ' +
            'supports the _bulk_get API.'
          );
          doBulkGetShim();
        } else {
          supportsBulkGetMap[dbUrl] = true;
          callback(null, res);
        }
      });
    } else if (supportsBulkGet) {
      doBulkGet(callback);
    } else {
      doBulkGetShim();
    }
  });

  // Calls GET on the host, which gets back a JSON string containing
  //    couchdb: A welcome string
  //    version: The version of CouchDB it is running
  api._info = function (callback) {
    setup().then(function () {
      return ourFetch(genDBUrl(host, ''));
    }).then(function (response) {
      return response.json();
    }).then(function (info) {
      info.host = genDBUrl(host, '');
      callback(null, info);
    }).catch(callback);
  };

  api.fetch = function (path, options) {
    return setup().then(function () {
      var url = path.substring(0, 1) === '/' ?
        genUrl(host, path.substring(1)) :
        genDBUrl(host, path);
      return ourFetch(url, options);
    });
  };

  // Get the document with the given id from the database given by host.
  // The id could be solely the _id in the database, or it may be a
  // _design/ID or _local/ID path
  api.get = adapterFun$$1('get', function (id, opts, callback) {
    // If no options were given, set the callback to the second parameter
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    // List of parameters to add to the GET request
    var params = {};

    if (opts.revs) {
      params.revs = true;
    }

    if (opts.revs_info) {
      params.revs_info = true;
    }

    if (opts.latest) {
      params.latest = true;
    }

    if (opts.open_revs) {
      if (opts.open_revs !== "all") {
        opts.open_revs = JSON.stringify(opts.open_revs);
      }
      params.open_revs = opts.open_revs;
    }

    if (opts.rev) {
      params.rev = opts.rev;
    }

    if (opts.conflicts) {
      params.conflicts = opts.conflicts;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = opts.update_seq;
    }

    id = encodeDocId(id);

    function fetchAttachments(doc) {
      var atts = doc._attachments;
      var filenames = atts && Object.keys(atts);
      if (!atts || !filenames.length) {
        return;
      }
      // we fetch these manually in separate XHRs, because
      // Sync Gateway would normally send it back as multipart/mixed,
      // which we cannot parse. Also, this is more efficient than
      // receiving attachments as base64-encoded strings.
      function fetchData(filename) {
        var att = atts[filename];
        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +
            '?rev=' + doc._rev;
        return ourFetch(genDBUrl(host, path)).then(function (response) {
          if ('buffer' in response) {
            return response.buffer();
          } else {
            /* istanbul ignore next */
            return response.blob();
          }
        }).then(function (blob) {
          if (opts.binary) {
            var typeFieldDescriptor = Object.getOwnPropertyDescriptor(blob.__proto__, 'type');
            if (!typeFieldDescriptor || typeFieldDescriptor.set) {
              blob.type = att.content_type;
            }
            return blob;
          }
          return new Promise(function (resolve) {
            blobToBase64(blob, resolve);
          });
        }).then(function (data) {
          delete att.stub;
          delete att.length;
          att.data = data;
        });
      }

      var promiseFactories = filenames.map(function (filename) {
        return function () {
          return fetchData(filename);
        };
      });

      // This limits the number of parallel xhr requests to 5 any time
      // to avoid issues with maximum browser request limits
      return pool(promiseFactories, 5);
    }

    function fetchAllAttachments(docOrDocs) {
      if (Array.isArray(docOrDocs)) {
        return Promise.all(docOrDocs.map(function (doc) {
          if (doc.ok) {
            return fetchAttachments(doc.ok);
          }
        }));
      }
      return fetchAttachments(docOrDocs);
    }

    var url = genDBUrl(host, id + paramsToStr(params));
    fetchJSON(url).then(function (res) {
      return Promise.resolve().then(function () {
        if (opts.attachments) {
          return fetchAllAttachments(res.data);
        }
      }).then(function () {
        callback(null, res.data);
      });
    }).catch(function (e) {
      e.docId = id;
      callback(e);
    });
  });


  // Delete the document given by doc from the database given by host.
  api.remove = adapterFun$$1('remove', function (docOrId, optsOrRev, opts, cb) {
    var doc;
    if (typeof optsOrRev === 'string') {
      // id, rev, opts, callback style
      doc = {
        _id: docOrId,
        _rev: optsOrRev
      };
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }
    } else {
      // doc, opts, callback style
      doc = docOrId;
      if (typeof optsOrRev === 'function') {
        cb = optsOrRev;
        opts = {};
      } else {
        cb = opts;
        opts = optsOrRev;
      }
    }

    var rev$$1 = (doc._rev || opts.rev);
    var url = genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev$$1;

    fetchJSON(url, {method: 'DELETE'}, cb).catch(cb);
  });

  function encodeAttachmentId(attachmentId) {
    return attachmentId.split("/").map(encodeURIComponent).join("/");
  }

  // Get the attachment
  api.getAttachment = adapterFun$$1('getAttachment', function (docId, attachmentId,
                                                            opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    var params = opts.rev ? ('?rev=' + opts.rev) : '';
    var url = genDBUrl(host, encodeDocId(docId)) + '/' +
        encodeAttachmentId(attachmentId) + params;
    var contentType;
    ourFetch(url, {method: 'GET'}).then(function (response) {
      contentType = response.headers.get('content-type');
      if (!response.ok) {
        throw response;
      } else {
        if (typeof process !== 'undefined' && !process.browser && typeof response.buffer === 'function') {
          return response.buffer();
        } else {
          /* istanbul ignore next */
          return response.blob();
        }
      }
    }).then(function (blob) {
      // TODO: also remove
      if (typeof process !== 'undefined' && !process.browser) {
        blob.type = contentType;
      }
      callback(null, blob);
    }).catch(function (err) {
      callback(err);
    });
  });

  // Remove the attachment given by the id and rev
  api.removeAttachment =  adapterFun$$1('removeAttachment', function (docId,
                                                                   attachmentId,
                                                                   rev$$1,
                                                                   callback) {
    var url = genDBUrl(host, encodeDocId(docId) + '/' +
                       encodeAttachmentId(attachmentId)) + '?rev=' + rev$$1;
    fetchJSON(url, {method: 'DELETE'}, callback).catch(callback);
  });

  // Add the attachment given by blob and its contentType property
  // to the document with the given id, the revision given by rev, and
  // add it to the database given by host.
  api.putAttachment = adapterFun$$1('putAttachment', function (docId, attachmentId,
                                                            rev$$1, blob,
                                                            type, callback) {
    if (typeof type === 'function') {
      callback = type;
      type = blob;
      blob = rev$$1;
      rev$$1 = null;
    }
    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);
    var url = genDBUrl(host, id);
    if (rev$$1) {
      url += '?rev=' + rev$$1;
    }

    if (typeof blob === 'string') {
      // input is assumed to be a base64 string
      var binary;
      try {
        binary = thisAtob(blob);
      } catch (err) {
        return callback(createError(BAD_ARG,
                        'Attachment is not a valid base64 string'));
      }
      blob = binary ? binStringToBluffer(binary, type) : '';
    }

    // Add the attachment
    fetchJSON(url, {
      headers: new h({'Content-Type': type}),
      method: 'PUT',
      body: blob
    }, callback).catch(callback);
  });

  // Update/create multiple documents given by req in the database
  // given by host.
  api._bulkDocs = function (req, opts, callback) {
    // If new_edits=false then it prevents the database from creating
    // new revision numbers for the documents. Instead it just uses
    // the old ones. This is used in database replication.
    req.new_edits = opts.new_edits;

    setup().then(function () {
      return Promise.all(req.docs.map(preprocessAttachments$1));
    }).then(function () {
      // Update/create the documents
      return fetchJSON(genDBUrl(host, '_bulk_docs'), {
        method: 'POST',
        body: JSON.stringify(req)
      }, callback);
    }).catch(callback);
  };


  // Update/create document
  api._put = function (doc, opts, callback) {
    setup().then(function () {
      return preprocessAttachments$1(doc);
    }).then(function () {
      return fetchJSON(genDBUrl(host, encodeDocId(doc._id)), {
        method: 'PUT',
        body: JSON.stringify(doc)
      });
    }).then(function (result) {
      callback(null, result.data);
    }).catch(function (err) {
      err.docId = doc && doc._id;
      callback(err);
    });
  };


  // Get a listing of the documents in the database given
  // by host and ordered by increasing id.
  api.allDocs = adapterFun$$1('allDocs', function (opts, callback) {
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = clone(opts);

    // List of parameters to add to the GET request
    var params = {};
    var body;
    var method = 'GET';

    if (opts.conflicts) {
      params.conflicts = true;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = true;
    }

    if (opts.descending) {
      params.descending = true;
    }

    if (opts.include_docs) {
      params.include_docs = true;
    }

    // added in CouchDB 1.6.0
    if (opts.attachments) {
      params.attachments = true;
    }

    if (opts.key) {
      params.key = JSON.stringify(opts.key);
    }

    if (opts.start_key) {
      opts.startkey = opts.start_key;
    }

    if (opts.startkey) {
      params.startkey = JSON.stringify(opts.startkey);
    }

    if (opts.end_key) {
      opts.endkey = opts.end_key;
    }

    if (opts.endkey) {
      params.endkey = JSON.stringify(opts.endkey);
    }

    if (typeof opts.inclusive_end !== 'undefined') {
      params.inclusive_end = !!opts.inclusive_end;
    }

    if (typeof opts.limit !== 'undefined') {
      params.limit = opts.limit;
    }

    if (typeof opts.skip !== 'undefined') {
      params.skip = opts.skip;
    }

    var paramStr = paramsToStr(params);

    if (typeof opts.keys !== 'undefined') {
      method = 'POST';
      body = {keys: opts.keys};
    }

    fetchJSON(genDBUrl(host, '_all_docs' + paramStr), {
       method: method,
      body: JSON.stringify(body)
    }).then(function (result) {
      if (opts.include_docs && opts.attachments && opts.binary) {
        result.data.rows.forEach(readAttachmentsAsBlobOrBuffer);
      }
      callback(null, result.data);
    }).catch(callback);
  });

  // Get a list of changes made to documents in the database given by host.
  // TODO According to the README, there should be two other methods here,
  // api.changes.addListener and api.changes.removeListener.
  api._changes = function (opts) {

    // We internally page the results of a changes request, this means
    // if there is a large set of changes to be returned we can start
    // processing them quicker instead of waiting on the entire
    // set of changes to return and attempting to process them at once
    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;

    opts = clone(opts);

    if (opts.continuous && !('heartbeat' in opts)) {
      opts.heartbeat = DEFAULT_HEARTBEAT;
    }

    var requestTimeout = ('timeout' in opts) ? opts.timeout : 30 * 1000;

    // ensure CHANGES_TIMEOUT_BUFFER applies
    if ('timeout' in opts && opts.timeout &&
      (requestTimeout - opts.timeout) < CHANGES_TIMEOUT_BUFFER) {
        requestTimeout = opts.timeout + CHANGES_TIMEOUT_BUFFER;
    }

    /* istanbul ignore if */
    if ('heartbeat' in opts && opts.heartbeat &&
       (requestTimeout - opts.heartbeat) < CHANGES_TIMEOUT_BUFFER) {
        requestTimeout = opts.heartbeat + CHANGES_TIMEOUT_BUFFER;
    }

    var params = {};
    if ('timeout' in opts && opts.timeout) {
      params.timeout = opts.timeout;
    }

    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;
    var leftToFetch = limit;

    if (opts.style) {
      params.style = opts.style;
    }

    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {
      params.include_docs = true;
    }

    if (opts.attachments) {
      params.attachments = true;
    }

    if (opts.continuous) {
      params.feed = 'longpoll';
    }

    if (opts.seq_interval) {
      params.seq_interval = opts.seq_interval;
    }

    if (opts.conflicts) {
      params.conflicts = true;
    }

    if (opts.descending) {
      params.descending = true;
    }

    /* istanbul ignore if */
    if (opts.update_seq) {
      params.update_seq = true;
    }

    if ('heartbeat' in opts) {
      // If the heartbeat value is false, it disables the default heartbeat
      if (opts.heartbeat) {
        params.heartbeat = opts.heartbeat;
      }
    }

    if (opts.filter && typeof opts.filter === 'string') {
      params.filter = opts.filter;
    }

    if (opts.view && typeof opts.view === 'string') {
      params.filter = '_view';
      params.view = opts.view;
    }

    // If opts.query_params exists, pass it through to the changes request.
    // These parameters may be used by the filter on the source database.
    if (opts.query_params && typeof opts.query_params === 'object') {
      for (var param_name in opts.query_params) {
        /* istanbul ignore else */
        if (opts.query_params.hasOwnProperty(param_name)) {
          params[param_name] = opts.query_params[param_name];
        }
      }
    }

    var method = 'GET';
    var body;

    if (opts.doc_ids) {
      // set this automagically for the user; it's annoying that couchdb
      // requires both a "filter" and a "doc_ids" param.
      params.filter = '_doc_ids';
      method = 'POST';
      body = {doc_ids: opts.doc_ids };
    }
    /* istanbul ignore next */
    else if (opts.selector) {
      // set this automagically for the user, similar to above
      params.filter = '_selector';
      method = 'POST';
      body = {selector: opts.selector };
    }

    var controller = new a();
    var lastFetchedSeq;

    // Get all the changes starting wtih the one immediately after the
    // sequence number given by since.
    var fetchData = function (since, callback) {
      if (opts.aborted) {
        return;
      }
      params.since = since;
      // "since" can be any kind of json object in Cloudant/CouchDB 2.x
      /* istanbul ignore next */
      if (typeof params.since === "object") {
        params.since = JSON.stringify(params.since);
      }

      if (opts.descending) {
        if (limit) {
          params.limit = leftToFetch;
        }
      } else {
        params.limit = (!limit || leftToFetch > batchSize) ?
          batchSize : leftToFetch;
      }

      // Set the options for the ajax call
      var url = genDBUrl(host, '_changes' + paramsToStr(params));
      var fetchOpts = {
        signal: controller.signal,
        method: method,
        body: JSON.stringify(body)
      };
      lastFetchedSeq = since;

      /* istanbul ignore if */
      if (opts.aborted) {
        return;
      }

      // Get the changes
      setup().then(function () {
        return fetchJSON(url, fetchOpts, callback);
      }).catch(callback);
    };

    // If opts.since exists, get all the changes from the sequence
    // number given by opts.since. Otherwise, get all the changes
    // from the sequence number 0.
    var results = {results: []};

    var fetched = function (err, res) {
      if (opts.aborted) {
        return;
      }
      var raw_results_length = 0;
      // If the result of the ajax call (res) contains changes (res.results)
      if (res && res.results) {
        raw_results_length = res.results.length;
        results.last_seq = res.last_seq;
        var pending = null;
        var lastSeq = null;
        // Attach 'pending' property if server supports it (CouchDB 2.0+)
        /* istanbul ignore if */
        if (typeof res.pending === 'number') {
          pending = res.pending;
        }
        if (typeof results.last_seq === 'string' || typeof results.last_seq === 'number') {
          lastSeq = results.last_seq;
        }
        // For each change
        var req = {};
        req.query = opts.query_params;
        res.results = res.results.filter(function (c) {
          leftToFetch--;
          var ret = filterChange(opts)(c);
          if (ret) {
            if (opts.include_docs && opts.attachments && opts.binary) {
              readAttachmentsAsBlobOrBuffer(c);
            }
            if (opts.return_docs) {
              results.results.push(c);
            }
            opts.onChange(c, pending, lastSeq);
          }
          return ret;
        });
      } else if (err) {
        // In case of an error, stop listening for changes and call
        // opts.complete
        opts.aborted = true;
        opts.complete(err);
        return;
      }

      // The changes feed may have timed out with no results
      // if so reuse last update sequence
      if (res && res.last_seq) {
        lastFetchedSeq = res.last_seq;
      }

      var finished = (limit && leftToFetch <= 0) ||
        (res && raw_results_length < batchSize) ||
        (opts.descending);

      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {
        // Queue a call to fetch again with the newest sequence number
        immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () { fetchData(lastFetchedSeq, fetched); });
      } else {
        // We're done, call the callback
        opts.complete(null, results);
      }
    };

    fetchData(opts.since || 0, fetched);

    // Return a method to cancel this method from processing any more
    return {
      cancel: function () {
        opts.aborted = true;
        controller.abort();
      }
    };
  };

  // Given a set of document/revision IDs (given by req), tets the subset of
  // those that do NOT correspond to revisions stored in the database.
  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff
  api.revsDiff = adapterFun$$1('revsDiff', function (req, opts, callback) {
    // If no options were given, set the callback to be the second parameter
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }

    // Get the missing document/revision IDs
    fetchJSON(genDBUrl(host, '_revs_diff'), {
      method: 'POST',
      body: JSON.stringify(req)
    }, callback).catch(callback);
  });

  api._close = function (callback) {
    callback();
  };

  api._destroy = function (options, callback) {
    fetchJSON(genDBUrl(host, ''), {method: 'DELETE'}).then(function (json) {
      callback(null, json);
    }).catch(function (err) {
      /* istanbul ignore if */
      if (err.status === 404) {
        callback(null, {ok: true});
      } else {
        callback(err);
      }
    });
  };
}

// HttpPouch is a valid adapter.
HttpPouch.valid = function () {
  return true;
};

function HttpPouch$1 (PouchDB) {
  PouchDB.adapter('http', HttpPouch, false);
  PouchDB.adapter('https', HttpPouch, false);
}

function QueryParseError(message) {
  this.status = 400;
  this.name = 'query_parse_error';
  this.message = message;
  this.error = true;
  try {
    Error.captureStackTrace(this, QueryParseError);
  } catch (e) {}
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(QueryParseError, Error);

function NotFoundError(message) {
  this.status = 404;
  this.name = 'not_found';
  this.message = message;
  this.error = true;
  try {
    Error.captureStackTrace(this, NotFoundError);
  } catch (e) {}
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(NotFoundError, Error);

function BuiltInError(message) {
  this.status = 500;
  this.name = 'invalid_value';
  this.message = message;
  this.error = true;
  try {
    Error.captureStackTrace(this, BuiltInError);
  } catch (e) {}
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(BuiltInError, Error);

function promisedCallback(promise, callback) {
  if (callback) {
    promise.then(function (res) {
      immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
        callback(null, res);
      });
    }, function (reason) {
      immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
        callback(reason);
      });
    });
  }
  return promise;
}

function callbackify(fun) {
  return argsarray__WEBPACK_IMPORTED_MODULE_4___default()(function (args) {
    var cb = args.pop();
    var promise = fun.apply(this, args);
    if (typeof cb === 'function') {
      promisedCallback(promise, cb);
    }
    return promise;
  });
}

// Promise finally util similar to Q.finally
function fin(promise, finalPromiseFactory) {
  return promise.then(function (res) {
    return finalPromiseFactory().then(function () {
      return res;
    });
  }, function (reason) {
    return finalPromiseFactory().then(function () {
      throw reason;
    });
  });
}

function sequentialize(queue, promiseFactory) {
  return function () {
    var args = arguments;
    var that = this;
    return queue.add(function () {
      return promiseFactory.apply(that, args);
    });
  };
}

// uniq an array of strings, order not guaranteed
// similar to underscore/lodash _.uniq
function uniq(arr) {
  var theSet = new ExportedSet(arr);
  var result = new Array(theSet.size);
  var index = -1;
  theSet.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

function mapToKeysArray(map) {
  var result = new Array(map.size);
  var index = -1;
  map.forEach(function (value, key) {
    result[++index] = key;
  });
  return result;
}

function createBuiltInError(name) {
  var message = 'builtin ' + name +
    ' function requires map values to be numbers' +
    ' or number arrays';
  return new BuiltInError(message);
}

function sum(values) {
  var result = 0;
  for (var i = 0, len = values.length; i < len; i++) {
    var num = values[i];
    if (typeof num !== 'number') {
      if (Array.isArray(num)) {
        // lists of numbers are also allowed, sum them separately
        result = typeof result === 'number' ? [result] : result;
        for (var j = 0, jLen = num.length; j < jLen; j++) {
          var jNum = num[j];
          if (typeof jNum !== 'number') {
            throw createBuiltInError('_sum');
          } else if (typeof result[j] === 'undefined') {
            result.push(jNum);
          } else {
            result[j] += jNum;
          }
        }
      } else { // not array/number
        throw createBuiltInError('_sum');
      }
    } else if (typeof result === 'number') {
      result += num;
    } else { // add number to array
      result[0] += num;
    }
  }
  return result;
}

var log = guardedConsole.bind(null, 'log');
var isArray = Array.isArray;
var toJSON = JSON.parse;

function evalFunctionWithEval(func, emit) {
  return scopeEval(
    "return (" + func.replace(/;\s*$/, "") + ");",
    {
      emit: emit,
      sum: sum,
      log: log,
      isArray: isArray,
      toJSON: toJSON
    }
  );
}

/*
 * Simple task queue to sequentialize actions. Assumes
 * callbacks will eventually fire (once).
 */


function TaskQueue$1() {
  this.promise = new Promise(function (fulfill) {fulfill(); });
}
TaskQueue$1.prototype.add = function (promiseFactory) {
  this.promise = this.promise.catch(function () {
    // just recover
  }).then(function () {
    return promiseFactory();
  });
  return this.promise;
};
TaskQueue$1.prototype.finish = function () {
  return this.promise;
};

function stringify(input) {
  if (!input) {
    return 'undefined'; // backwards compat for empty reduce
  }
  // for backwards compat with mapreduce, functions/strings are stringified
  // as-is. everything else is JSON-stringified.
  switch (typeof input) {
    case 'function':
      // e.g. a mapreduce map
      return input.toString();
    case 'string':
      // e.g. a mapreduce built-in _reduce function
      return input.toString();
    default:
      // e.g. a JSON object in the case of mango queries
      return JSON.stringify(input);
  }
}

/* create a string signature for a view so we can cache it and uniq it */
function createViewSignature(mapFun, reduceFun) {
  // the "undefined" part is for backwards compatibility
  return stringify(mapFun) + stringify(reduceFun) + 'undefined';
}

function createView(sourceDB, viewName, mapFun, reduceFun, temporary, localDocName) {
  var viewSignature = createViewSignature(mapFun, reduceFun);

  var cachedViews;
  if (!temporary) {
    // cache this to ensure we don't try to update the same view twice
    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};
    if (cachedViews[viewSignature]) {
      return cachedViews[viewSignature];
    }
  }

  var promiseForView = sourceDB.info().then(function (info) {

    var depDbName = info.db_name + '-mrview-' +
      (temporary ? 'temp' : stringMd5(viewSignature));

    // save the view name in the source db so it can be cleaned up if necessary
    // (e.g. when the _design doc is deleted, remove all associated view data)
    function diffFunction(doc) {
      doc.views = doc.views || {};
      var fullViewName = viewName;
      if (fullViewName.indexOf('/') === -1) {
        fullViewName = viewName + '/' + viewName;
      }
      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};
      /* istanbul ignore if */
      if (depDbs[depDbName]) {
        return; // no update necessary
      }
      depDbs[depDbName] = true;
      return doc;
    }
    return upsert(sourceDB, '_local/' + localDocName, diffFunction).then(function () {
      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {
        var db = res.db;
        db.auto_compaction = true;
        var view = {
          name: depDbName,
          db: db,
          sourceDB: sourceDB,
          adapter: sourceDB.adapter,
          mapFun: mapFun,
          reduceFun: reduceFun
        };
        return view.db.get('_local/lastSeq').catch(function (err) {
          /* istanbul ignore if */
          if (err.status !== 404) {
            throw err;
          }
        }).then(function (lastSeqDoc) {
          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;
          if (cachedViews) {
            view.db.once('destroyed', function () {
              delete cachedViews[viewSignature];
            });
          }
          return view;
        });
      });
    });
  });

  if (cachedViews) {
    cachedViews[viewSignature] = promiseForView;
  }
  return promiseForView;
}

var persistentQueues = {};
var tempViewQueue = new TaskQueue$1();
var CHANGES_BATCH_SIZE$1 = 50;

function parseViewName(name) {
  // can be either 'ddocname/viewname' or just 'viewname'
  // (where the ddoc name is the same)
  return name.indexOf('/') === -1 ? [name, name] : name.split('/');
}

function isGenOne(changes) {
  // only return true if the current change is 1-
  // and there are no other leafs
  return changes.length === 1 && /^1-/.test(changes[0].rev);
}

function emitError(db, e) {
  try {
    db.emit('error', e);
  } catch (err) {
    guardedConsole('error',
      'The user\'s map/reduce function threw an uncaught error.\n' +
      'You can debug this error by doing:\n' +
      'myDatabase.on(\'error\', function (err) { debugger; });\n' +
      'Please double-check your map/reduce function.');
    guardedConsole('error', e);
  }
}

/**
 * Returns an "abstract" mapreduce object of the form:
 *
 *   {
 *     query: queryFun,
 *     viewCleanup: viewCleanupFun
 *   }
 *
 * Arguments are:
 *
 * localDoc: string
 *   This is for the local doc that gets saved in order to track the
 *   "dependent" DBs and clean them up for viewCleanup. It should be
 *   unique, so that indexer plugins don't collide with each other.
 * mapper: function (mapFunDef, emit)
 *   Returns a map function based on the mapFunDef, which in the case of
 *   normal map/reduce is just the de-stringified function, but may be
 *   something else, such as an object in the case of pouchdb-find.
 * reducer: function (reduceFunDef)
 *   Ditto, but for reducing. Modules don't have to support reducing
 *   (e.g. pouchdb-find).
 * ddocValidator: function (ddoc, viewName)
 *   Throws an error if the ddoc or viewName is not valid.
 *   This could be a way to communicate to the user that the configuration for the
 *   indexer is invalid.
 */
function createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator) {

  function tryMap(db, fun, doc) {
    // emit an event if there was an error thrown by a map function.
    // putting try/catches in a single function also avoids deoptimizations.
    try {
      fun(doc);
    } catch (e) {
      emitError(db, e);
    }
  }

  function tryReduce(db, fun, keys, values, rereduce) {
    // same as above, but returning the result or an error. there are two separate
    // functions to avoid extra memory allocations since the tryCode() case is used
    // for custom map functions (common) vs this function, which is only used for
    // custom reduce functions (rare)
    try {
      return {output : fun(keys, values, rereduce)};
    } catch (e) {
      emitError(db, e);
      return {error: e};
    }
  }

  function sortByKeyThenValue(x, y) {
    var keyCompare = collate(x.key, y.key);
    return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);
  }

  function sliceResults(results, limit, skip) {
    skip = skip || 0;
    if (typeof limit === 'number') {
      return results.slice(skip, limit + skip);
    } else if (skip > 0) {
      return results.slice(skip);
    }
    return results;
  }

  function rowToDocId(row) {
    var val = row.value;
    // Users can explicitly specify a joined doc _id, or it
    // defaults to the doc _id that emitted the key/value.
    var docId = (val && typeof val === 'object' && val._id) || row.id;
    return docId;
  }

  function readAttachmentsAsBlobOrBuffer(res) {
    res.rows.forEach(function (row) {
      var atts = row.doc && row.doc._attachments;
      if (!atts) {
        return;
      }
      Object.keys(atts).forEach(function (filename) {
        var att = atts[filename];
        atts[filename].data = b64ToBluffer(att.data, att.content_type);
      });
    });
  }

  function postprocessAttachments(opts) {
    return function (res) {
      if (opts.include_docs && opts.attachments && opts.binary) {
        readAttachmentsAsBlobOrBuffer(res);
      }
      return res;
    };
  }

  function addHttpParam(paramName, opts, params, asJson) {
    // add an http param from opts to params, optionally json-encoded
    var val = opts[paramName];
    if (typeof val !== 'undefined') {
      if (asJson) {
        val = encodeURIComponent(JSON.stringify(val));
      }
      params.push(paramName + '=' + val);
    }
  }

  function coerceInteger(integerCandidate) {
    if (typeof integerCandidate !== 'undefined') {
      var asNumber = Number(integerCandidate);
      // prevents e.g. '1foo' or '1.1' being coerced to 1
      if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {
        return asNumber;
      } else {
        return integerCandidate;
      }
    }
  }

  function coerceOptions(opts) {
    opts.group_level = coerceInteger(opts.group_level);
    opts.limit = coerceInteger(opts.limit);
    opts.skip = coerceInteger(opts.skip);
    return opts;
  }

  function checkPositiveInteger(number) {
    if (number) {
      if (typeof number !== 'number') {
        return  new QueryParseError('Invalid value for integer: "' +
          number + '"');
      }
      if (number < 0) {
        return new QueryParseError('Invalid value for positive integer: ' +
          '"' + number + '"');
      }
    }
  }

  function checkQueryParseError(options, fun) {
    var startkeyName = options.descending ? 'endkey' : 'startkey';
    var endkeyName = options.descending ? 'startkey' : 'endkey';

    if (typeof options[startkeyName] !== 'undefined' &&
      typeof options[endkeyName] !== 'undefined' &&
      collate(options[startkeyName], options[endkeyName]) > 0) {
      throw new QueryParseError('No rows can match your key range, ' +
        'reverse your start_key and end_key or set {descending : true}');
    } else if (fun.reduce && options.reduce !== false) {
      if (options.include_docs) {
        throw new QueryParseError('{include_docs:true} is invalid for reduce');
      } else if (options.keys && options.keys.length > 1 &&
        !options.group && !options.group_level) {
        throw new QueryParseError('Multi-key fetches for reduce views must use ' +
          '{group: true}');
      }
    }
    ['group_level', 'limit', 'skip'].forEach(function (optionName) {
      var error = checkPositiveInteger(options[optionName]);
      if (error) {
        throw error;
      }
    });
  }

  function httpQuery(db, fun, opts) {
    // List of parameters to add to the PUT request
    var params = [];
    var body;
    var method = 'GET';
    var ok, status;

    // If opts.reduce exists and is defined, then add it to the list
    // of parameters.
    // If reduce=false then the results are that of only the map function
    // not the final result of map and reduce.
    addHttpParam('reduce', opts, params);
    addHttpParam('include_docs', opts, params);
    addHttpParam('attachments', opts, params);
    addHttpParam('limit', opts, params);
    addHttpParam('descending', opts, params);
    addHttpParam('group', opts, params);
    addHttpParam('group_level', opts, params);
    addHttpParam('skip', opts, params);
    addHttpParam('stale', opts, params);
    addHttpParam('conflicts', opts, params);
    addHttpParam('startkey', opts, params, true);
    addHttpParam('start_key', opts, params, true);
    addHttpParam('endkey', opts, params, true);
    addHttpParam('end_key', opts, params, true);
    addHttpParam('inclusive_end', opts, params);
    addHttpParam('key', opts, params, true);
    addHttpParam('update_seq', opts, params);

    // Format the list of parameters into a valid URI query string
    params = params.join('&');
    params = params === '' ? '' : '?' + params;

    // If keys are supplied, issue a POST to circumvent GET query string limits
    // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options
    if (typeof opts.keys !== 'undefined') {
      var MAX_URL_LENGTH = 2000;
      // according to http://stackoverflow.com/a/417184/680742,
      // the de facto URL length limit is 2000 characters

      var keysAsString =
        'keys=' + encodeURIComponent(JSON.stringify(opts.keys));
      if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {
        // If the keys are short enough, do a GET. we do this to work around
        // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)
        params += (params[0] === '?' ? '&' : '?') + keysAsString;
      } else {
        method = 'POST';
        if (typeof fun === 'string') {
          body = {keys: opts.keys};
        } else { // fun is {map : mapfun}, so append to this
          fun.keys = opts.keys;
        }
      }
    }

    // We are referencing a query defined in the design doc
    if (typeof fun === 'string') {
      var parts = parseViewName(fun);
      return db.fetch('_design/' + parts[0] + '/_view/' + parts[1] + params, {
        headers: new h({'Content-Type': 'application/json'}),
        method: method,
        body: JSON.stringify(body)
      }).then(function (response) {
        ok = response.ok;
        status = response.status;
        return response.json();
      }).then(function (result) {
        if (!ok) {
          result.status = status;
          throw generateErrorFromResponse(result);
        }
        // fail the entire request if the result contains an error
        result.rows.forEach(function (row) {
          /* istanbul ignore if */
          if (row.value && row.value.error && row.value.error === "builtin_reduce_error") {
            throw new Error(row.reason);
          }
        });
        return result;
      }).then(postprocessAttachments(opts));
    }

    // We are using a temporary view, terrible for performance, good for testing
    body = body || {};
    Object.keys(fun).forEach(function (key) {
      if (Array.isArray(fun[key])) {
        body[key] = fun[key];
      } else {
        body[key] = fun[key].toString();
      }
    });

    return db.fetch('_temp_view' + params, {
      headers: new h({'Content-Type': 'application/json'}),
      method: 'POST',
      body: JSON.stringify(body)
    }).then(function (response) {
        ok = response.ok;
        status = response.status;
      return response.json();
    }).then(function (result) {
      if (!ok) {
        result.status = status;
        throw generateErrorFromResponse(result);
      }
      return result;
    }).then(postprocessAttachments(opts));
  }

  // custom adapters can define their own api._query
  // and override the default behavior
  /* istanbul ignore next */
  function customQuery(db, fun, opts) {
    return new Promise(function (resolve, reject) {
      db._query(fun, opts, function (err, res) {
        if (err) {
          return reject(err);
        }
        resolve(res);
      });
    });
  }

  // custom adapters can define their own api._viewCleanup
  // and override the default behavior
  /* istanbul ignore next */
  function customViewCleanup(db) {
    return new Promise(function (resolve, reject) {
      db._viewCleanup(function (err, res) {
        if (err) {
          return reject(err);
        }
        resolve(res);
      });
    });
  }

  function defaultsTo(value) {
    return function (reason) {
      /* istanbul ignore else */
      if (reason.status === 404) {
        return value;
      } else {
        throw reason;
      }
    };
  }

  // returns a promise for a list of docs to update, based on the input docId.
  // the order doesn't matter, because post-3.2.0, bulkDocs
  // is an atomic operation in all three adapters.
  function getDocsToPersist(docId, view, docIdsToChangesAndEmits) {
    var metaDocId = '_local/doc_' + docId;
    var defaultMetaDoc = {_id: metaDocId, keys: []};
    var docData = docIdsToChangesAndEmits.get(docId);
    var indexableKeysToKeyValues = docData[0];
    var changes = docData[1];

    function getMetaDoc() {
      if (isGenOne(changes)) {
        // generation 1, so we can safely assume initial state
        // for performance reasons (avoids unnecessary GETs)
        return Promise.resolve(defaultMetaDoc);
      }
      return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));
    }

    function getKeyValueDocs(metaDoc) {
      if (!metaDoc.keys.length) {
        // no keys, no need for a lookup
        return Promise.resolve({rows: []});
      }
      return view.db.allDocs({
        keys: metaDoc.keys,
        include_docs: true
      });
    }

    function processKeyValueDocs(metaDoc, kvDocsRes) {
      var kvDocs = [];
      var oldKeys = new ExportedSet();

      for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {
        var row = kvDocsRes.rows[i];
        var doc = row.doc;
        if (!doc) { // deleted
          continue;
        }
        kvDocs.push(doc);
        oldKeys.add(doc._id);
        doc._deleted = !indexableKeysToKeyValues.has(doc._id);
        if (!doc._deleted) {
          var keyValue = indexableKeysToKeyValues.get(doc._id);
          if ('value' in keyValue) {
            doc.value = keyValue.value;
          }
        }
      }
      var newKeys = mapToKeysArray(indexableKeysToKeyValues);
      newKeys.forEach(function (key) {
        if (!oldKeys.has(key)) {
          // new doc
          var kvDoc = {
            _id: key
          };
          var keyValue = indexableKeysToKeyValues.get(key);
          if ('value' in keyValue) {
            kvDoc.value = keyValue.value;
          }
          kvDocs.push(kvDoc);
        }
      });
      metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));
      kvDocs.push(metaDoc);

      return kvDocs;
    }

    return getMetaDoc().then(function (metaDoc) {
      return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {
        return processKeyValueDocs(metaDoc, kvDocsRes);
      });
    });
  }

  // updates all emitted key/value docs and metaDocs in the mrview database
  // for the given batch of documents from the source database
  function saveKeyValues(view, docIdsToChangesAndEmits, seq) {
    var seqDocId = '_local/lastSeq';
    return view.db.get(seqDocId)
      .catch(defaultsTo({_id: seqDocId, seq: 0}))
      .then(function (lastSeqDoc) {
        var docIds = mapToKeysArray(docIdsToChangesAndEmits);
        return Promise.all(docIds.map(function (docId) {
          return getDocsToPersist(docId, view, docIdsToChangesAndEmits);
        })).then(function (listOfDocsToPersist) {
          var docsToPersist = flatten(listOfDocsToPersist);
          lastSeqDoc.seq = seq;
          docsToPersist.push(lastSeqDoc);
          // write all docs in a single operation, update the seq once
          return view.db.bulkDocs({docs : docsToPersist});
        });
      });
  }

  function getQueue(view) {
    var viewName = typeof view === 'string' ? view : view.name;
    var queue = persistentQueues[viewName];
    if (!queue) {
      queue = persistentQueues[viewName] = new TaskQueue$1();
    }
    return queue;
  }

  function updateView(view) {
    return sequentialize(getQueue(view), function () {
      return updateViewInQueue(view);
    })();
  }

  function updateViewInQueue(view) {
    // bind the emit function once
    var mapResults;
    var doc;

    function emit(key, value) {
      var output = {id: doc._id, key: normalizeKey(key)};
      // Don't explicitly store the value unless it's defined and non-null.
      // This saves on storage space, because often people don't use it.
      if (typeof value !== 'undefined' && value !== null) {
        output.value = normalizeKey(value);
      }
      mapResults.push(output);
    }

    var mapFun = mapper(view.mapFun, emit);

    var currentSeq = view.seq || 0;

    function processChange(docIdsToChangesAndEmits, seq) {
      return function () {
        return saveKeyValues(view, docIdsToChangesAndEmits, seq);
      };
    }

    var queue = new TaskQueue$1();

    function processNextBatch() {
      return view.sourceDB.changes({
        return_docs: true,
        conflicts: true,
        include_docs: true,
        style: 'all_docs',
        since: currentSeq,
        limit: CHANGES_BATCH_SIZE$1
      }).then(processBatch);
    }

    function processBatch(response) {
      var results = response.results;
      if (!results.length) {
        return;
      }
      var docIdsToChangesAndEmits = createDocIdsToChangesAndEmits(results);
      queue.add(processChange(docIdsToChangesAndEmits, currentSeq));
      if (results.length < CHANGES_BATCH_SIZE$1) {
        return;
      }
      return processNextBatch();
    }

    function createDocIdsToChangesAndEmits(results) {
      var docIdsToChangesAndEmits = new ExportedMap();
      for (var i = 0, len = results.length; i < len; i++) {
        var change = results[i];
        if (change.doc._id[0] !== '_') {
          mapResults = [];
          doc = change.doc;

          if (!doc._deleted) {
            tryMap(view.sourceDB, mapFun, doc);
          }
          mapResults.sort(sortByKeyThenValue);

          var indexableKeysToKeyValues = createIndexableKeysToKeyValues(mapResults);
          docIdsToChangesAndEmits.set(change.doc._id, [
            indexableKeysToKeyValues,
            change.changes
          ]);
        }
        currentSeq = change.seq;
      }
      return docIdsToChangesAndEmits;
    }

    function createIndexableKeysToKeyValues(mapResults) {
      var indexableKeysToKeyValues = new ExportedMap();
      var lastKey;
      for (var i = 0, len = mapResults.length; i < len; i++) {
        var emittedKeyValue = mapResults[i];
        var complexKey = [emittedKeyValue.key, emittedKeyValue.id];
        if (i > 0 && collate(emittedKeyValue.key, lastKey) === 0) {
          complexKey.push(i); // dup key+id, so make it unique
        }
        indexableKeysToKeyValues.set(toIndexableString(complexKey), emittedKeyValue);
        lastKey = emittedKeyValue.key;
      }
      return indexableKeysToKeyValues;
    }

    return processNextBatch().then(function () {
      return queue.finish();
    }).then(function () {
      view.seq = currentSeq;
    });
  }

  function reduceView(view, results, options) {
    if (options.group_level === 0) {
      delete options.group_level;
    }

    var shouldGroup = options.group || options.group_level;

    var reduceFun = reducer(view.reduceFun);

    var groups = [];
    var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :
      options.group_level;
    results.forEach(function (e) {
      var last = groups[groups.length - 1];
      var groupKey = shouldGroup ? e.key : null;

      // only set group_level for array keys
      if (shouldGroup && Array.isArray(groupKey)) {
        groupKey = groupKey.slice(0, lvl);
      }

      if (last && collate(last.groupKey, groupKey) === 0) {
        last.keys.push([e.key, e.id]);
        last.values.push(e.value);
        return;
      }
      groups.push({
        keys: [[e.key, e.id]],
        values: [e.value],
        groupKey: groupKey
      });
    });
    results = [];
    for (var i = 0, len = groups.length; i < len; i++) {
      var e = groups[i];
      var reduceTry = tryReduce(view.sourceDB, reduceFun, e.keys, e.values, false);
      if (reduceTry.error && reduceTry.error instanceof BuiltInError) {
        // CouchDB returns an error if a built-in errors out
        throw reduceTry.error;
      }
      results.push({
        // CouchDB just sets the value to null if a non-built-in errors out
        value: reduceTry.error ? null : reduceTry.output,
        key: e.groupKey
      });
    }
    // no total_rows/offset when reducing
    return {rows: sliceResults(results, options.limit, options.skip)};
  }

  function queryView(view, opts) {
    return sequentialize(getQueue(view), function () {
      return queryViewInQueue(view, opts);
    })();
  }

  function queryViewInQueue(view, opts) {
    var totalRows;
    var shouldReduce = view.reduceFun && opts.reduce !== false;
    var skip = opts.skip || 0;
    if (typeof opts.keys !== 'undefined' && !opts.keys.length) {
      // equivalent query
      opts.limit = 0;
      delete opts.keys;
    }

    function fetchFromView(viewOpts) {
      viewOpts.include_docs = true;
      return view.db.allDocs(viewOpts).then(function (res) {
        totalRows = res.total_rows;
        return res.rows.map(function (result) {

          // implicit migration - in older versions of PouchDB,
          // we explicitly stored the doc as {id: ..., key: ..., value: ...}
          // this is tested in a migration test
          /* istanbul ignore next */
          if ('value' in result.doc && typeof result.doc.value === 'object' &&
            result.doc.value !== null) {
            var keys = Object.keys(result.doc.value).sort();
            // this detection method is not perfect, but it's unlikely the user
            // emitted a value which was an object with these 3 exact keys
            var expectedKeys = ['id', 'key', 'value'];
            if (!(keys < expectedKeys || keys > expectedKeys)) {
              return result.doc.value;
            }
          }

          var parsedKeyAndDocId = parseIndexableString(result.doc._id);
          return {
            key: parsedKeyAndDocId[0],
            id: parsedKeyAndDocId[1],
            value: ('value' in result.doc ? result.doc.value : null)
          };
        });
      });
    }

    function onMapResultsReady(rows) {
      var finalResults;
      if (shouldReduce) {
        finalResults = reduceView(view, rows, opts);
      } else {
        finalResults = {
          total_rows: totalRows,
          offset: skip,
          rows: rows
        };
      }
      /* istanbul ignore if */
      if (opts.update_seq) {
        finalResults.update_seq = view.seq;
      }
      if (opts.include_docs) {
        var docIds = uniq(rows.map(rowToDocId));

        return view.sourceDB.allDocs({
          keys: docIds,
          include_docs: true,
          conflicts: opts.conflicts,
          attachments: opts.attachments,
          binary: opts.binary
        }).then(function (allDocsRes) {
          var docIdsToDocs = new ExportedMap();
          allDocsRes.rows.forEach(function (row) {
            docIdsToDocs.set(row.id, row.doc);
          });
          rows.forEach(function (row) {
            var docId = rowToDocId(row);
            var doc = docIdsToDocs.get(docId);
            if (doc) {
              row.doc = doc;
            }
          });
          return finalResults;
        });
      } else {
        return finalResults;
      }
    }

    if (typeof opts.keys !== 'undefined') {
      var keys = opts.keys;
      var fetchPromises = keys.map(function (key) {
        var viewOpts = {
          startkey : toIndexableString([key]),
          endkey   : toIndexableString([key, {}])
        };
        /* istanbul ignore if */
        if (opts.update_seq) {
          viewOpts.update_seq = true;
        }
        return fetchFromView(viewOpts);
      });
      return Promise.all(fetchPromises).then(flatten).then(onMapResultsReady);
    } else { // normal query, no 'keys'
      var viewOpts = {
        descending : opts.descending
      };
      /* istanbul ignore if */
      if (opts.update_seq) {
        viewOpts.update_seq = true;
      }
      var startkey;
      var endkey;
      if ('start_key' in opts) {
        startkey = opts.start_key;
      }
      if ('startkey' in opts) {
        startkey = opts.startkey;
      }
      if ('end_key' in opts) {
        endkey = opts.end_key;
      }
      if ('endkey' in opts) {
        endkey = opts.endkey;
      }
      if (typeof startkey !== 'undefined') {
        viewOpts.startkey = opts.descending ?
          toIndexableString([startkey, {}]) :
          toIndexableString([startkey]);
      }
      if (typeof endkey !== 'undefined') {
        var inclusiveEnd = opts.inclusive_end !== false;
        if (opts.descending) {
          inclusiveEnd = !inclusiveEnd;
        }

        viewOpts.endkey = toIndexableString(
          inclusiveEnd ? [endkey, {}] : [endkey]);
      }
      if (typeof opts.key !== 'undefined') {
        var keyStart = toIndexableString([opts.key]);
        var keyEnd = toIndexableString([opts.key, {}]);
        if (viewOpts.descending) {
          viewOpts.endkey = keyStart;
          viewOpts.startkey = keyEnd;
        } else {
          viewOpts.startkey = keyStart;
          viewOpts.endkey = keyEnd;
        }
      }
      if (!shouldReduce) {
        if (typeof opts.limit === 'number') {
          viewOpts.limit = opts.limit;
        }
        viewOpts.skip = skip;
      }
      return fetchFromView(viewOpts).then(onMapResultsReady);
    }
  }

  function httpViewCleanup(db) {
    return db.fetch('_view_cleanup', {
      headers: new h({'Content-Type': 'application/json'}),
      method: 'POST'
    }).then(function (response) {
      return response.json();
    });
  }

  function localViewCleanup(db) {
    return db.get('_local/' + localDocName).then(function (metaDoc) {
      var docsToViews = new ExportedMap();
      Object.keys(metaDoc.views).forEach(function (fullViewName) {
        var parts = parseViewName(fullViewName);
        var designDocName = '_design/' + parts[0];
        var viewName = parts[1];
        var views = docsToViews.get(designDocName);
        if (!views) {
          views = new ExportedSet();
          docsToViews.set(designDocName, views);
        }
        views.add(viewName);
      });
      var opts = {
        keys : mapToKeysArray(docsToViews),
        include_docs : true
      };
      return db.allDocs(opts).then(function (res) {
        var viewsToStatus = {};
        res.rows.forEach(function (row) {
          var ddocName = row.key.substring(8); // cuts off '_design/'
          docsToViews.get(row.key).forEach(function (viewName) {
            var fullViewName = ddocName + '/' + viewName;
            /* istanbul ignore if */
            if (!metaDoc.views[fullViewName]) {
              // new format, without slashes, to support PouchDB 2.2.0
              // migration test in pouchdb's browser.migration.js verifies this
              fullViewName = viewName;
            }
            var viewDBNames = Object.keys(metaDoc.views[fullViewName]);
            // design doc deleted, or view function nonexistent
            var statusIsGood = row.doc && row.doc.views &&
              row.doc.views[viewName];
            viewDBNames.forEach(function (viewDBName) {
              viewsToStatus[viewDBName] =
                viewsToStatus[viewDBName] || statusIsGood;
            });
          });
        });
        var dbsToDelete = Object.keys(viewsToStatus).filter(
          function (viewDBName) { return !viewsToStatus[viewDBName]; });
        var destroyPromises = dbsToDelete.map(function (viewDBName) {
          return sequentialize(getQueue(viewDBName), function () {
            return new db.constructor(viewDBName, db.__opts).destroy();
          })();
        });
        return Promise.all(destroyPromises).then(function () {
          return {ok: true};
        });
      });
    }, defaultsTo({ok: true}));
  }

  function queryPromised(db, fun, opts) {
    /* istanbul ignore next */
    if (typeof db._query === 'function') {
      return customQuery(db, fun, opts);
    }
    if (isRemote(db)) {
      return httpQuery(db, fun, opts);
    }

    if (typeof fun !== 'string') {
      // temp_view
      checkQueryParseError(opts, fun);

      tempViewQueue.add(function () {
        var createViewPromise = createView(
          /* sourceDB */ db,
          /* viewName */ 'temp_view/temp_view',
          /* mapFun */ fun.map,
          /* reduceFun */ fun.reduce,
          /* temporary */ true,
          /* localDocName */ localDocName);
        return createViewPromise.then(function (view) {
          return fin(updateView(view).then(function () {
            return queryView(view, opts);
          }), function () {
            return view.db.destroy();
          });
        });
      });
      return tempViewQueue.finish();
    } else {
      // persistent view
      var fullViewName = fun;
      var parts = parseViewName(fullViewName);
      var designDocName = parts[0];
      var viewName = parts[1];
      return db.get('_design/' + designDocName).then(function (doc) {
        var fun = doc.views && doc.views[viewName];

        if (!fun) {
          // basic validator; it's assumed that every subclass would want this
          throw new NotFoundError('ddoc ' + doc._id + ' has no view named ' +
            viewName);
        }

        ddocValidator(doc, viewName);
        checkQueryParseError(opts, fun);

        var createViewPromise = createView(
          /* sourceDB */ db,
          /* viewName */ fullViewName,
          /* mapFun */ fun.map,
          /* reduceFun */ fun.reduce,
          /* temporary */ false,
          /* localDocName */ localDocName);
        return createViewPromise.then(function (view) {
          if (opts.stale === 'ok' || opts.stale === 'update_after') {
            if (opts.stale === 'update_after') {
              immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
                updateView(view);
              });
            }
            return queryView(view, opts);
          } else { // stale not ok
            return updateView(view).then(function () {
              return queryView(view, opts);
            });
          }
        });
      });
    }
  }

  function abstractQuery(fun, opts, callback) {
    var db = this;
    if (typeof opts === 'function') {
      callback = opts;
      opts = {};
    }
    opts = opts ? coerceOptions(opts) : {};

    if (typeof fun === 'function') {
      fun = {map : fun};
    }

    var promise = Promise.resolve().then(function () {
      return queryPromised(db, fun, opts);
    });
    promisedCallback(promise, callback);
    return promise;
  }

  var abstractViewCleanup = callbackify(function () {
    var db = this;
    /* istanbul ignore next */
    if (typeof db._viewCleanup === 'function') {
      return customViewCleanup(db);
    }
    if (isRemote(db)) {
      return httpViewCleanup(db);
    }
    return localViewCleanup(db);
  });

  return {
    query: abstractQuery,
    viewCleanup: abstractViewCleanup
  };
}

var builtInReduce = {
  _sum: function (keys, values) {
    return sum(values);
  },

  _count: function (keys, values) {
    return values.length;
  },

  _stats: function (keys, values) {
    // no need to implement rereduce=true, because Pouch
    // will never call it
    function sumsqr(values) {
      var _sumsqr = 0;
      for (var i = 0, len = values.length; i < len; i++) {
        var num = values[i];
        _sumsqr += (num * num);
      }
      return _sumsqr;
    }
    return {
      sum     : sum(values),
      min     : Math.min.apply(null, values),
      max     : Math.max.apply(null, values),
      count   : values.length,
      sumsqr : sumsqr(values)
    };
  }
};

function getBuiltIn(reduceFunString) {
  if (/^_sum/.test(reduceFunString)) {
    return builtInReduce._sum;
  } else if (/^_count/.test(reduceFunString)) {
    return builtInReduce._count;
  } else if (/^_stats/.test(reduceFunString)) {
    return builtInReduce._stats;
  } else if (/^_/.test(reduceFunString)) {
    throw new Error(reduceFunString + ' is not a supported reduce function.');
  }
}

function mapper(mapFun, emit) {
  // for temp_views one can use emit(doc, emit), see #38
  if (typeof mapFun === "function" && mapFun.length === 2) {
    var origMap = mapFun;
    return function (doc) {
      return origMap(doc, emit);
    };
  } else {
    return evalFunctionWithEval(mapFun.toString(), emit);
  }
}

function reducer(reduceFun) {
  var reduceFunString = reduceFun.toString();
  var builtIn = getBuiltIn(reduceFunString);
  if (builtIn) {
    return builtIn;
  } else {
    return evalFunctionWithEval(reduceFunString);
  }
}

function ddocValidator(ddoc, viewName) {
  var fun = ddoc.views && ddoc.views[viewName];
  if (typeof fun.map !== 'string') {
    throw new NotFoundError('ddoc ' + ddoc._id + ' has no string view named ' +
      viewName + ', instead found object of type: ' + typeof fun.map);
  }
}

var localDocName = 'mrviews';
var abstract = createAbstractMapReduce(localDocName, mapper, reducer, ddocValidator);

function query(fun, opts, callback) {
  return abstract.query.call(this, fun, opts, callback);
}

function viewCleanup(callback) {
  return abstract.viewCleanup.call(this, callback);
}

var mapreduce = {
  query: query,
  viewCleanup: viewCleanup
};

function isGenOne$1(rev$$1) {
  return /^1-/.test(rev$$1);
}

function fileHasChanged(localDoc, remoteDoc, filename) {
  return !localDoc._attachments ||
         !localDoc._attachments[filename] ||
         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;
}

function getDocAttachments(db, doc) {
  var filenames = Object.keys(doc._attachments);
  return Promise.all(filenames.map(function (filename) {
    return db.getAttachment(doc._id, filename, {rev: doc._rev});
  }));
}

function getDocAttachmentsFromTargetOrSource(target, src, doc) {
  var doCheckForLocalAttachments = isRemote(src) && !isRemote(target);
  var filenames = Object.keys(doc._attachments);

  if (!doCheckForLocalAttachments) {
    return getDocAttachments(src, doc);
  }

  return target.get(doc._id).then(function (localDoc) {
    return Promise.all(filenames.map(function (filename) {
      if (fileHasChanged(localDoc, doc, filename)) {
        return src.getAttachment(doc._id, filename);
      }

      return target.getAttachment(localDoc._id, filename);
    }));
  }).catch(function (error) {
    /* istanbul ignore if */
    if (error.status !== 404) {
      throw error;
    }

    return getDocAttachments(src, doc);
  });
}

function createBulkGetOpts(diffs) {
  var requests = [];
  Object.keys(diffs).forEach(function (id) {
    var missingRevs = diffs[id].missing;
    missingRevs.forEach(function (missingRev) {
      requests.push({
        id: id,
        rev: missingRev
      });
    });
  });

  return {
    docs: requests,
    revs: true,
    latest: true
  };
}

//
// Fetch all the documents from the src as described in the "diffs",
// which is a mapping of docs IDs to revisions. If the state ever
// changes to "cancelled", then the returned promise will be rejected.
// Else it will be resolved with a list of fetched documents.
//
function getDocs(src, target, diffs, state) {
  diffs = clone(diffs); // we do not need to modify this

  var resultDocs = [],
      ok = true;

  function getAllDocs() {

    var bulkGetOpts = createBulkGetOpts(diffs);

    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests
      return;
    }

    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {
      /* istanbul ignore if */
      if (state.cancelled) {
        throw new Error('cancelled');
      }
      return Promise.all(bulkGetResponse.results.map(function (bulkGetInfo) {
        return Promise.all(bulkGetInfo.docs.map(function (doc) {
          var remoteDoc = doc.ok;

          if (doc.error) {
            // when AUTO_COMPACTION is set, docs can be returned which look
            // like this: {"missing":"1-7c3ac256b693c462af8442f992b83696"}
            ok = false;
          }

          if (!remoteDoc || !remoteDoc._attachments) {
            return remoteDoc;
          }

          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc)
                   .then(function (attachments) {
                           var filenames = Object.keys(remoteDoc._attachments);
                           attachments
                             .forEach(function (attachment, i) {
                                        var att = remoteDoc._attachments[filenames[i]];
                                        delete att.stub;
                                        delete att.length;
                                        att.data = attachment;
                                      });

                                      return remoteDoc;
                                    });
        }));
      }))

      .then(function (results) {
        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));
      });
    });
  }

  function hasAttachments(doc) {
    return doc._attachments && Object.keys(doc._attachments).length > 0;
  }

  function hasConflicts(doc) {
    return doc._conflicts && doc._conflicts.length > 0;
  }

  function fetchRevisionOneDocs(ids) {
    // Optimization: fetch gen-1 docs and attachments in
    // a single request using _all_docs
    return src.allDocs({
      keys: ids,
      include_docs: true,
      conflicts: true
    }).then(function (res) {
      if (state.cancelled) {
        throw new Error('cancelled');
      }
      res.rows.forEach(function (row) {
        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||
            hasAttachments(row.doc) || hasConflicts(row.doc)) {
          // if any of these conditions apply, we need to fetch using get()
          return;
        }

        // strip _conflicts array to appease CSG (#5793)
        /* istanbul ignore if */
        if (row.doc._conflicts) {
          delete row.doc._conflicts;
        }

        // the doc we got back from allDocs() is sufficient
        resultDocs.push(row.doc);
        delete diffs[row.id];
      });
    });
  }

  function getRevisionOneDocs() {
    // filter out the generation 1 docs and get them
    // leaving the non-generation one docs to be got otherwise
    var ids = Object.keys(diffs).filter(function (id) {
      var missing = diffs[id].missing;
      return missing.length === 1 && isGenOne$1(missing[0]);
    });
    if (ids.length > 0) {
      return fetchRevisionOneDocs(ids);
    }
  }

  function returnResult() {
    return { ok:ok, docs:resultDocs };
  }

  return Promise.resolve()
    .then(getRevisionOneDocs)
    .then(getAllDocs)
    .then(returnResult);
}

var CHECKPOINT_VERSION = 1;
var REPLICATOR = "pouchdb";
// This is an arbitrary number to limit the
// amount of replication history we save in the checkpoint.
// If we save too much, the checkpoing docs will become very big,
// if we save fewer, we'll run a greater risk of having to
// read all the changes from 0 when checkpoint PUTs fail
// CouchDB 2.0 has a more involved history pruning,
// but let's go for the simple version for now.
var CHECKPOINT_HISTORY_SIZE = 5;
var LOWEST_SEQ = 0;

function updateCheckpoint(db, id, checkpoint, session, returnValue) {
  return db.get(id).catch(function (err) {
    if (err.status === 404) {
      if (db.adapter === 'http' || db.adapter === 'https') {
        explainError(
          404, 'PouchDB is just checking if a remote checkpoint exists.'
        );
      }
      return {
        session_id: session,
        _id: id,
        history: [],
        replicator: REPLICATOR,
        version: CHECKPOINT_VERSION
      };
    }
    throw err;
  }).then(function (doc) {
    if (returnValue.cancelled) {
      return;
    }

    // if the checkpoint has not changed, do not update
    if (doc.last_seq === checkpoint) {
      return;
    }

    // Filter out current entry for this replication
    doc.history = (doc.history || []).filter(function (item) {
      return item.session_id !== session;
    });

    // Add the latest checkpoint to history
    doc.history.unshift({
      last_seq: checkpoint,
      session_id: session
    });

    // Just take the last pieces in history, to
    // avoid really big checkpoint docs.
    // see comment on history size above
    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);

    doc.version = CHECKPOINT_VERSION;
    doc.replicator = REPLICATOR;

    doc.session_id = session;
    doc.last_seq = checkpoint;

    return db.put(doc).catch(function (err) {
      if (err.status === 409) {
        // retry; someone is trying to write a checkpoint simultaneously
        return updateCheckpoint(db, id, checkpoint, session, returnValue);
      }
      throw err;
    });
  });
}

function Checkpointer(src, target, id, returnValue, opts) {
  this.src = src;
  this.target = target;
  this.id = id;
  this.returnValue = returnValue;
  this.opts = opts || {};
}

Checkpointer.prototype.writeCheckpoint = function (checkpoint, session) {
  var self = this;
  return this.updateTarget(checkpoint, session).then(function () {
    return self.updateSource(checkpoint, session);
  });
};

Checkpointer.prototype.updateTarget = function (checkpoint, session) {
  if (this.opts.writeTargetCheckpoint) {
    return updateCheckpoint(this.target, this.id, checkpoint,
      session, this.returnValue);
  } else {
    return Promise.resolve(true);
  }
};

Checkpointer.prototype.updateSource = function (checkpoint, session) {
  if (this.opts.writeSourceCheckpoint) {
    var self = this;
    return updateCheckpoint(this.src, this.id, checkpoint,
      session, this.returnValue)
      .catch(function (err) {
        if (isForbiddenError(err)) {
          self.opts.writeSourceCheckpoint = false;
          return true;
        }
        throw err;
      });
  } else {
    return Promise.resolve(true);
  }
};

var comparisons = {
  "undefined": function (targetDoc, sourceDoc) {
    // This is the previous comparison function
    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {
      return sourceDoc.last_seq;
    }
    /* istanbul ignore next */
    return 0;
  },
  "1": function (targetDoc, sourceDoc) {
    // This is the comparison function ported from CouchDB
    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;
  }
};

Checkpointer.prototype.getCheckpoint = function () {
  var self = this;

  if (self.opts && self.opts.writeSourceCheckpoint && !self.opts.writeTargetCheckpoint) {
    return self.src.get(self.id).then(function (sourceDoc) {
      return sourceDoc.last_seq || LOWEST_SEQ;
    }).catch(function (err) {
      /* istanbul ignore if */
      if (err.status !== 404) {
        throw err;
      }
      return LOWEST_SEQ;
    });
  }

  return self.target.get(self.id).then(function (targetDoc) {
    if (self.opts && self.opts.writeTargetCheckpoint && !self.opts.writeSourceCheckpoint) {
      return targetDoc.last_seq || LOWEST_SEQ;
    }

    return self.src.get(self.id).then(function (sourceDoc) {
      // Since we can't migrate an old version doc to a new one
      // (no session id), we just go with the lowest seq in this case
      /* istanbul ignore if */
      if (targetDoc.version !== sourceDoc.version) {
        return LOWEST_SEQ;
      }

      var version;
      if (targetDoc.version) {
        version = targetDoc.version.toString();
      } else {
        version = "undefined";
      }

      if (version in comparisons) {
        return comparisons[version](targetDoc, sourceDoc);
      }
      /* istanbul ignore next */
      return LOWEST_SEQ;
    }, function (err) {
      if (err.status === 404 && targetDoc.last_seq) {
        return self.src.put({
          _id: self.id,
          last_seq: LOWEST_SEQ
        }).then(function () {
          return LOWEST_SEQ;
        }, function (err) {
          if (isForbiddenError(err)) {
            self.opts.writeSourceCheckpoint = false;
            return targetDoc.last_seq;
          }
          /* istanbul ignore next */
          return LOWEST_SEQ;
        });
      }
      throw err;
    });
  }).catch(function (err) {
    if (err.status !== 404) {
      throw err;
    }
    return LOWEST_SEQ;
  });
};
// This checkpoint comparison is ported from CouchDBs source
// they come from here:
// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906

function compareReplicationLogs(srcDoc, tgtDoc) {
  if (srcDoc.session_id === tgtDoc.session_id) {
    return {
      last_seq: srcDoc.last_seq,
      history: srcDoc.history
    };
  }

  return compareReplicationHistory(srcDoc.history, tgtDoc.history);
}

function compareReplicationHistory(sourceHistory, targetHistory) {
  // the erlang loop via function arguments is not so easy to repeat in JS
  // therefore, doing this as recursion
  var S = sourceHistory[0];
  var sourceRest = sourceHistory.slice(1);
  var T = targetHistory[0];
  var targetRest = targetHistory.slice(1);

  if (!S || targetHistory.length === 0) {
    return {
      last_seq: LOWEST_SEQ,
      history: []
    };
  }

  var sourceId = S.session_id;
  /* istanbul ignore if */
  if (hasSessionId(sourceId, targetHistory)) {
    return {
      last_seq: S.last_seq,
      history: sourceHistory
    };
  }

  var targetId = T.session_id;
  if (hasSessionId(targetId, sourceRest)) {
    return {
      last_seq: T.last_seq,
      history: targetRest
    };
  }

  return compareReplicationHistory(sourceRest, targetRest);
}

function hasSessionId(sessionId, history) {
  var props = history[0];
  var rest = history.slice(1);

  if (!sessionId || history.length === 0) {
    return false;
  }

  if (sessionId === props.session_id) {
    return true;
  }

  return hasSessionId(sessionId, rest);
}

function isForbiddenError(err) {
  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;
}

var STARTING_BACK_OFF = 0;

function backOff(opts, returnValue, error, callback) {
  if (opts.retry === false) {
    returnValue.emit('error', error);
    returnValue.removeAllListeners();
    return;
  }
  /* istanbul ignore if */
  if (typeof opts.back_off_function !== 'function') {
    opts.back_off_function = defaultBackOff;
  }
  returnValue.emit('requestError', error);
  if (returnValue.state === 'active' || returnValue.state === 'pending') {
    returnValue.emit('paused', error);
    returnValue.state = 'stopped';
    var backOffSet = function backoffTimeSet() {
      opts.current_back_off = STARTING_BACK_OFF;
    };
    var removeBackOffSetter = function removeBackOffTimeSet() {
      returnValue.removeListener('active', backOffSet);
    };
    returnValue.once('paused', removeBackOffSetter);
    returnValue.once('active', backOffSet);
  }

  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;
  opts.current_back_off = opts.back_off_function(opts.current_back_off);
  setTimeout(callback, opts.current_back_off);
}

function sortObjectPropertiesByKey(queryParams) {
  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {
    result[key] = queryParams[key];
    return result;
  }, {});
}

// Generate a unique id particular to this replication.
// Not guaranteed to align perfectly with CouchDB's rep ids.
function generateReplicationId(src, target, opts) {
  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';
  var filterFun = opts.filter ? opts.filter.toString() : '';
  var queryParams = '';
  var filterViewName =  '';
  var selector = '';

  // possibility for checkpoints to be lost here as behaviour of
  // JSON.stringify is not stable (see #6226)
  /* istanbul ignore if */
  if (opts.selector) {
    selector = JSON.stringify(opts.selector);
  }

  if (opts.filter && opts.query_params) {
    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));
  }

  if (opts.filter && opts.filter === '_view') {
    filterViewName = opts.view.toString();
  }

  return Promise.all([src.id(), target.id()]).then(function (res) {
    var queryData = res[0] + res[1] + filterFun + filterViewName +
      queryParams + docIds + selector;
    return new Promise(function (resolve) {
      binaryMd5(queryData, resolve);
    });
  }).then(function (md5sum) {
    // can't use straight-up md5 alphabet, because
    // the char '/' is interpreted as being for attachments,
    // and + is also not url-safe
    md5sum = md5sum.replace(/\//g, '.').replace(/\+/g, '_');
    return '_local/' + md5sum;
  });
}

function replicate(src, target, opts, returnValue, result) {
  var batches = [];               // list of batches to be processed
  var currentBatch;               // the batch currently being processed
  var pendingBatch = {
    seq: 0,
    changes: [],
    docs: []
  }; // next batch, not yet ready to be processed
  var writingCheckpoint = false;  // true while checkpoint is being written
  var changesCompleted = false;   // true when all changes received
  var replicationCompleted = false; // true when replication has completed
  var last_seq = 0;
  var continuous = opts.continuous || opts.live || false;
  var batch_size = opts.batch_size || 100;
  var batches_limit = opts.batches_limit || 10;
  var changesPending = false;     // true while src.changes is running
  var doc_ids = opts.doc_ids;
  var selector = opts.selector;
  var repId;
  var checkpointer;
  var changedDocs = [];
  // Like couchdb, every replication gets a unique session id
  var session = uuid();

  result = result || {
    ok: true,
    start_time: new Date().toISOString(),
    docs_read: 0,
    docs_written: 0,
    doc_write_failures: 0,
    errors: []
  };

  var changesOpts = {};
  returnValue.ready(src, target);

  function initCheckpointer() {
    if (checkpointer) {
      return Promise.resolve();
    }
    return generateReplicationId(src, target, opts).then(function (res) {
      repId = res;

      var checkpointOpts = {};
      if (opts.checkpoint === false) {
        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: false };
      } else if (opts.checkpoint === 'source') {
        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: false };
      } else if (opts.checkpoint === 'target') {
        checkpointOpts = { writeSourceCheckpoint: false, writeTargetCheckpoint: true };
      } else {
        checkpointOpts = { writeSourceCheckpoint: true, writeTargetCheckpoint: true };
      }

      checkpointer = new Checkpointer(src, target, repId, returnValue, checkpointOpts);
    });
  }

  function writeDocs() {
    changedDocs = [];

    if (currentBatch.docs.length === 0) {
      return;
    }
    var docs = currentBatch.docs;
    var bulkOpts = {timeout: opts.timeout};
    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }

      // `res` doesn't include full documents (which live in `docs`), so we create a map of 
      // (id -> error), and check for errors while iterating over `docs`
      var errorsById = Object.create(null);
      res.forEach(function (res) {
        if (res.error) {
          errorsById[res.id] = res;
        }
      });

      var errorsNo = Object.keys(errorsById).length;
      result.doc_write_failures += errorsNo;
      result.docs_written += docs.length - errorsNo;

      docs.forEach(function (doc) {
        var error = errorsById[doc._id];
        if (error) {
          result.errors.push(error);
          // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
          var errorName = (error.name || '').toLowerCase();
          if (errorName === 'unauthorized' || errorName === 'forbidden') {
            returnValue.emit('denied', clone(error));
          } else {
            throw error;
          }
        } else {
          changedDocs.push(doc);
        }
      });

    }, function (err) {
      result.doc_write_failures += docs.length;
      throw err;
    });
  }

  function finishBatch() {
    if (currentBatch.error) {
      throw new Error('There was a problem getting docs.');
    }
    result.last_seq = last_seq = currentBatch.seq;
    var outResult = clone(result);
    if (changedDocs.length) {
      outResult.docs = changedDocs;
      // Attach 'pending' property if server supports it (CouchDB 2.0+)
      /* istanbul ignore if */
      if (typeof currentBatch.pending === 'number') {
        outResult.pending = currentBatch.pending;
        delete currentBatch.pending;
      }
      returnValue.emit('change', outResult);
    }
    writingCheckpoint = true;
    return checkpointer.writeCheckpoint(currentBatch.seq,
        session).then(function () {
      writingCheckpoint = false;
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }
      currentBatch = undefined;
      getChanges();
    }).catch(function (err) {
      onCheckpointError(err);
      throw err;
    });
  }

  function getDiffs() {
    var diff = {};
    currentBatch.changes.forEach(function (change) {
      // Couchbase Sync Gateway emits these, but we can ignore them
      /* istanbul ignore if */
      if (change.id === "_user/") {
        return;
      }
      diff[change.id] = change.changes.map(function (x) {
        return x.rev;
      });
    });
    return target.revsDiff(diff).then(function (diffs) {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        throw new Error('cancelled');
      }
      // currentBatch.diffs elements are deleted as the documents are written
      currentBatch.diffs = diffs;
    });
  }

  function getBatchDocs() {
    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {
      currentBatch.error = !got.ok;
      got.docs.forEach(function (doc) {
        delete currentBatch.diffs[doc._id];
        result.docs_read++;
        currentBatch.docs.push(doc);
      });
    });
  }

  function startNextBatch() {
    if (returnValue.cancelled || currentBatch) {
      return;
    }
    if (batches.length === 0) {
      processPendingBatch(true);
      return;
    }
    currentBatch = batches.shift();
    getDiffs()
      .then(getBatchDocs)
      .then(writeDocs)
      .then(finishBatch)
      .then(startNextBatch)
      .catch(function (err) {
        abortReplication('batch processing terminated with error', err);
      });
  }


  function processPendingBatch(immediate$$1) {
    if (pendingBatch.changes.length === 0) {
      if (batches.length === 0 && !currentBatch) {
        if ((continuous && changesOpts.live) || changesCompleted) {
          returnValue.state = 'pending';
          returnValue.emit('paused');
        }
        if (changesCompleted) {
          completeReplication();
        }
      }
      return;
    }
    if (
      immediate$$1 ||
      changesCompleted ||
      pendingBatch.changes.length >= batch_size
    ) {
      batches.push(pendingBatch);
      pendingBatch = {
        seq: 0,
        changes: [],
        docs: []
      };
      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {
        returnValue.state = 'active';
        returnValue.emit('active');
      }
      startNextBatch();
    }
  }


  function abortReplication(reason, err) {
    if (replicationCompleted) {
      return;
    }
    if (!err.message) {
      err.message = reason;
    }
    result.ok = false;
    result.status = 'aborting';
    batches = [];
    pendingBatch = {
      seq: 0,
      changes: [],
      docs: []
    };
    completeReplication(err);
  }


  function completeReplication(fatalError) {
    if (replicationCompleted) {
      return;
    }
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      result.status = 'cancelled';
      if (writingCheckpoint) {
        return;
      }
    }
    result.status = result.status || 'complete';
    result.end_time = new Date().toISOString();
    result.last_seq = last_seq;
    replicationCompleted = true;

    if (fatalError) {
      // need to extend the error because Firefox considers ".result" read-only
      fatalError = createError(fatalError);
      fatalError.result = result;

      // Normalize error name. i.e. 'Unauthorized' -> 'unauthorized' (eg Sync Gateway)
      var errorName = (fatalError.name || '').toLowerCase();
      if (errorName === 'unauthorized' || errorName === 'forbidden') {
        returnValue.emit('error', fatalError);
        returnValue.removeAllListeners();
      } else {
        backOff(opts, returnValue, fatalError, function () {
          replicate(src, target, opts, returnValue);
        });
      }
    } else {
      returnValue.emit('complete', result);
      returnValue.removeAllListeners();
    }
  }


  function onChange(change, pending, lastSeq) {
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }
    // Attach 'pending' property if server supports it (CouchDB 2.0+)
    /* istanbul ignore if */
    if (typeof pending === 'number') {
      pendingBatch.pending = pending;
    }

    var filter = filterChange(opts)(change);
    if (!filter) {
      return;
    }
    pendingBatch.seq = change.seq || lastSeq;
    pendingBatch.changes.push(change);
    immediate__WEBPACK_IMPORTED_MODULE_0___default()(function () {
      processPendingBatch(batches.length === 0 && changesOpts.live);
    });
  }


  function onChangesComplete(changes) {
    changesPending = false;
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }

    // if no results were returned then we're done,
    // else fetch more
    if (changes.results.length > 0) {
      changesOpts.since = changes.results[changes.results.length - 1].seq;
      getChanges();
      processPendingBatch(true);
    } else {

      var complete = function () {
        if (continuous) {
          changesOpts.live = true;
          getChanges();
        } else {
          changesCompleted = true;
        }
        processPendingBatch(true);
      };

      // update the checkpoint so we start from the right seq next time
      if (!currentBatch && changes.results.length === 0) {
        writingCheckpoint = true;
        checkpointer.writeCheckpoint(changes.last_seq,
            session).then(function () {
          writingCheckpoint = false;
          result.last_seq = last_seq = changes.last_seq;
          complete();
        })
        .catch(onCheckpointError);
      } else {
        complete();
      }
    }
  }


  function onChangesError(err) {
    changesPending = false;
    /* istanbul ignore if */
    if (returnValue.cancelled) {
      return completeReplication();
    }
    abortReplication('changes rejected', err);
  }


  function getChanges() {
    if (!(
      !changesPending &&
      !changesCompleted &&
      batches.length < batches_limit
      )) {
      return;
    }
    changesPending = true;
    function abortChanges() {
      changes.cancel();
    }
    function removeListener() {
      returnValue.removeListener('cancel', abortChanges);
    }

    if (returnValue._changes) { // remove old changes() and listeners
      returnValue.removeListener('cancel', returnValue._abortChanges);
      returnValue._changes.cancel();
    }
    returnValue.once('cancel', abortChanges);

    var changes = src.changes(changesOpts)
      .on('change', onChange);
    changes.then(removeListener, removeListener);
    changes.then(onChangesComplete)
      .catch(onChangesError);

    if (opts.retry) {
      // save for later so we can cancel if necessary
      returnValue._changes = changes;
      returnValue._abortChanges = abortChanges;
    }
  }


  function startChanges() {
    initCheckpointer().then(function () {
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        return;
      }
      return checkpointer.getCheckpoint().then(function (checkpoint) {
        last_seq = checkpoint;
        changesOpts = {
          since: last_seq,
          limit: batch_size,
          batch_size: batch_size,
          style: 'all_docs',
          doc_ids: doc_ids,
          selector: selector,
          return_docs: true // required so we know when we're done
        };
        if (opts.filter) {
          if (typeof opts.filter !== 'string') {
            // required for the client-side filter in onChange
            changesOpts.include_docs = true;
          } else { // ddoc filter
            changesOpts.filter = opts.filter;
          }
        }
        if ('heartbeat' in opts) {
          changesOpts.heartbeat = opts.heartbeat;
        }
        if ('timeout' in opts) {
          changesOpts.timeout = opts.timeout;
        }
        if (opts.query_params) {
          changesOpts.query_params = opts.query_params;
        }
        if (opts.view) {
          changesOpts.view = opts.view;
        }
        getChanges();
      });
    }).catch(function (err) {
      abortReplication('getCheckpoint rejected with ', err);
    });
  }

  /* istanbul ignore next */
  function onCheckpointError(err) {
    writingCheckpoint = false;
    abortReplication('writeCheckpoint completed with error', err);
  }

  /* istanbul ignore if */
  if (returnValue.cancelled) { // cancelled immediately
    completeReplication();
    return;
  }

  if (!returnValue._addedListeners) {
    returnValue.once('cancel', completeReplication);

    if (typeof opts.complete === 'function') {
      returnValue.once('error', opts.complete);
      returnValue.once('complete', function (result) {
        opts.complete(null, result);
      });
    }
    returnValue._addedListeners = true;
  }

  if (typeof opts.since === 'undefined') {
    startChanges();
  } else {
    initCheckpointer().then(function () {
      writingCheckpoint = true;
      return checkpointer.writeCheckpoint(opts.since, session);
    }).then(function () {
      writingCheckpoint = false;
      /* istanbul ignore if */
      if (returnValue.cancelled) {
        completeReplication();
        return;
      }
      last_seq = opts.since;
      startChanges();
    }).catch(onCheckpointError);
  }
}

// We create a basic promise so the caller can cancel the replication possibly
// before we have actually started listening to changes etc
inherits__WEBPACK_IMPORTED_MODULE_5___default()(Replication, events__WEBPACK_IMPORTED_MODULE_6___default.a);
function Replication() {
  events__WEBPACK_IMPORTED_MODULE_6___default.a.call(this);
  this.cancelled = false;
  this.state = 'pending';
  var self = this;
  var promise = new Promise(function (fulfill, reject) {
    self.once('complete', fulfill);
    self.once('error', reject);
  });
  self.then = function (resolve, reject) {
    return promise.then(resolve, reject);
  };
  self.catch = function (reject) {
    return promise.catch(reject);
  };
  // As we allow error handling via "error" event as well,
  // put a stub in here so that rejecting never throws UnhandledError.
  self.catch(function () {});
}

Replication.prototype.cancel = function () {
  this.cancelled = true;
  this.state = 'cancelled';
  this.emit('cancel');
};

Replication.prototype.ready = function (src, target) {
  var self = this;
  if (self._readyCalled) {
    return;
  }
  self._readyCalled = true;

  function onDestroy() {
    self.cancel();
  }
  src.once('destroyed', onDestroy);
  target.once('destroyed', onDestroy);
  function cleanup() {
    src.removeListener('destroyed', onDestroy);
    target.removeListener('destroyed', onDestroy);
  }
  self.once('complete', cleanup);
};

function toPouch(db, opts) {
  var PouchConstructor = opts.PouchConstructor;
  if (typeof db === 'string') {
    return new PouchConstructor(db, opts);
  } else {
    return db;
  }
}

function replicateWrapper(src, target, opts, callback) {

  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  if (typeof opts === 'undefined') {
    opts = {};
  }

  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {
    throw createError(BAD_REQUEST,
                       "`doc_ids` filter parameter is not a list.");
  }

  opts.complete = callback;
  opts = clone(opts);
  opts.continuous = opts.continuous || opts.live;
  opts.retry = ('retry' in opts) ? opts.retry : false;
  /*jshint validthis:true */
  opts.PouchConstructor = opts.PouchConstructor || this;
  var replicateRet = new Replication(opts);
  var srcPouch = toPouch(src, opts);
  var targetPouch = toPouch(target, opts);
  replicate(srcPouch, targetPouch, opts, replicateRet);
  return replicateRet;
}

inherits__WEBPACK_IMPORTED_MODULE_5___default()(Sync, events__WEBPACK_IMPORTED_MODULE_6___default.a);
function sync(src, target, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  if (typeof opts === 'undefined') {
    opts = {};
  }
  opts = clone(opts);
  /*jshint validthis:true */
  opts.PouchConstructor = opts.PouchConstructor || this;
  src = toPouch(src, opts);
  target = toPouch(target, opts);
  return new Sync(src, target, opts, callback);
}

function Sync(src, target, opts, callback) {
  var self = this;
  this.canceled = false;

  var optsPush = opts.push ? $inject_Object_assign({}, opts, opts.push) : opts;
  var optsPull = opts.pull ? $inject_Object_assign({}, opts, opts.pull) : opts;

  this.push = replicateWrapper(src, target, optsPush);
  this.pull = replicateWrapper(target, src, optsPull);

  this.pushPaused = true;
  this.pullPaused = true;

  function pullChange(change) {
    self.emit('change', {
      direction: 'pull',
      change: change
    });
  }
  function pushChange(change) {
    self.emit('change', {
      direction: 'push',
      change: change
    });
  }
  function pushDenied(doc) {
    self.emit('denied', {
      direction: 'push',
      doc: doc
    });
  }
  function pullDenied(doc) {
    self.emit('denied', {
      direction: 'pull',
      doc: doc
    });
  }
  function pushPaused() {
    self.pushPaused = true;
    /* istanbul ignore if */
    if (self.pullPaused) {
      self.emit('paused');
    }
  }
  function pullPaused() {
    self.pullPaused = true;
    /* istanbul ignore if */
    if (self.pushPaused) {
      self.emit('paused');
    }
  }
  function pushActive() {
    self.pushPaused = false;
    /* istanbul ignore if */
    if (self.pullPaused) {
      self.emit('active', {
        direction: 'push'
      });
    }
  }
  function pullActive() {
    self.pullPaused = false;
    /* istanbul ignore if */
    if (self.pushPaused) {
      self.emit('active', {
        direction: 'pull'
      });
    }
  }

  var removed = {};

  function removeAll(type) { // type is 'push' or 'pull'
    return function (event, func) {
      var isChange = event === 'change' &&
        (func === pullChange || func === pushChange);
      var isDenied = event === 'denied' &&
        (func === pullDenied || func === pushDenied);
      var isPaused = event === 'paused' &&
        (func === pullPaused || func === pushPaused);
      var isActive = event === 'active' &&
        (func === pullActive || func === pushActive);

      if (isChange || isDenied || isPaused || isActive) {
        if (!(event in removed)) {
          removed[event] = {};
        }
        removed[event][type] = true;
        if (Object.keys(removed[event]).length === 2) {
          // both push and pull have asked to be removed
          self.removeAllListeners(event);
        }
      }
    };
  }

  if (opts.live) {
    this.push.on('complete', self.pull.cancel.bind(self.pull));
    this.pull.on('complete', self.push.cancel.bind(self.push));
  }

  function addOneListener(ee, event, listener) {
    if (ee.listeners(event).indexOf(listener) == -1) {
      ee.on(event, listener);
    }
  }

  this.on('newListener', function (event) {
    if (event === 'change') {
      addOneListener(self.pull, 'change', pullChange);
      addOneListener(self.push, 'change', pushChange);
    } else if (event === 'denied') {
      addOneListener(self.pull, 'denied', pullDenied);
      addOneListener(self.push, 'denied', pushDenied);
    } else if (event === 'active') {
      addOneListener(self.pull, 'active', pullActive);
      addOneListener(self.push, 'active', pushActive);
    } else if (event === 'paused') {
      addOneListener(self.pull, 'paused', pullPaused);
      addOneListener(self.push, 'paused', pushPaused);
    }
  });

  this.on('removeListener', function (event) {
    if (event === 'change') {
      self.pull.removeListener('change', pullChange);
      self.push.removeListener('change', pushChange);
    } else if (event === 'denied') {
      self.pull.removeListener('denied', pullDenied);
      self.push.removeListener('denied', pushDenied);
    } else if (event === 'active') {
      self.pull.removeListener('active', pullActive);
      self.push.removeListener('active', pushActive);
    } else if (event === 'paused') {
      self.pull.removeListener('paused', pullPaused);
      self.push.removeListener('paused', pushPaused);
    }
  });

  this.pull.on('removeListener', removeAll('pull'));
  this.push.on('removeListener', removeAll('push'));

  var promise = Promise.all([
    this.push,
    this.pull
  ]).then(function (resp) {
    var out = {
      push: resp[0],
      pull: resp[1]
    };
    self.emit('complete', out);
    if (callback) {
      callback(null, out);
    }
    self.removeAllListeners();
    return out;
  }, function (err) {
    self.cancel();
    if (callback) {
      // if there's a callback, then the callback can receive
      // the error event
      callback(err);
    } else {
      // if there's no callback, then we're safe to emit an error
      // event, which would otherwise throw an unhandled error
      // due to 'error' being a special event in EventEmitters
      self.emit('error', err);
    }
    self.removeAllListeners();
    if (callback) {
      // no sense throwing if we're already emitting an 'error' event
      throw err;
    }
  });

  this.then = function (success, err) {
    return promise.then(success, err);
  };

  this.catch = function (err) {
    return promise.catch(err);
  };
}

Sync.prototype.cancel = function () {
  if (!this.canceled) {
    this.canceled = true;
    this.push.cancel();
    this.pull.cancel();
  }
};

function replication(PouchDB) {
  PouchDB.replicate = replicateWrapper;
  PouchDB.sync = sync;

  Object.defineProperty(PouchDB.prototype, 'replicate', {
    get: function () {
      var self = this;
      if (typeof this.replicateMethods === 'undefined') {
        this.replicateMethods = {
          from: function (other, opts, callback) {
            return self.constructor.replicate(other, self, opts, callback);
          },
          to: function (other, opts, callback) {
            return self.constructor.replicate(self, other, opts, callback);
          }
        };
      }
      return this.replicateMethods;
    }
  });

  PouchDB.prototype.sync = function (dbName, opts, callback) {
    return this.constructor.sync(this, dbName, opts, callback);
  };
}

PouchDB.plugin(IDBPouch)
  .plugin(HttpPouch$1)
  .plugin(mapreduce)
  .plugin(replication);

// Pull from src because pouchdb-node/pouchdb-browser themselves

/* harmony default export */ __webpack_exports__["default"] = (PouchDB);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/bytesToUuid.js":
/*!********************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/bytesToUuid.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();
}

/* harmony default export */ __webpack_exports__["default"] = (bytesToUuid);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/index.js ***!
  \**************************************************************************/
/*! exports provided: v1, v3, v4, v5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v1", function() { return _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v3.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v3", function() { return _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v4", function() { return _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v5.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v5", function() { return _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });






/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/md5.js":
/*!************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/md5.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ __webpack_exports__["default"] = (md5);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/rng.js":
/*!************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/rng.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rng; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
// find the complete implementation of crypto (msCrypto) on IE11.
var getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/sha1.js":
/*!*************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/sha1.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ __webpack_exports__["default"] = (sha1);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v1.js":
/*!***********************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v1.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytesToUuid.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/bytesToUuid.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || Object(_bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (v1);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v3.js":
/*!***********************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v3.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/md5.js");


var v3 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v3);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v35.js":
/*!************************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v35.js ***!
  \************************************************************************/
/*! exports provided: DNS, URL, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DNS", function() { return DNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URL", function() { return URL; });
/* harmony import */ var _bytesToUuid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytesToUuid.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/bytesToUuid.js");


function uuidToBytes(uuid) {
  // Note: We assume we're being passed a valid uuid string
  var bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function (hex) {
    bytes.push(parseInt(hex, 16));
  });
  return bytes;
}

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ __webpack_exports__["default"] = (function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var off = buf && offset || 0;
    if (typeof value === 'string') value = stringToBytes(value);
    if (typeof namespace === 'string') namespace = uuidToBytes(namespace);

    if (!Array.isArray(value)) {
      throw TypeError('value must be an array of bytes');
    }

    if (!Array.isArray(namespace) || namespace.length !== 16) {
      throw TypeError('namespace must be uuid string or an Array of 16 byte values');
    } // Per 4.3


    var bytes = hashfunc(namespace.concat(value));
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      for (var idx = 0; idx < 16; ++idx) {
        buf[off + idx] = bytes[idx];
      }
    }

    return buf || Object(_bytesToUuid_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
});

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v4.js":
/*!***********************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v4.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytesToUuid.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/bytesToUuid.js");



function v4(options, buf, offset) {
  if (typeof options === 'string') {
    buf = options === 'binary' ? new Uint8Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    var start = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[start + i] = rnds[i];
    }

    return buf;
  }

  return Object(_bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v5.js":
/*!***********************************************************************!*\
  !*** ./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v5.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/pouchdb/node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v5);

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/spark-md5/spark-md5.js":
/*!*********************************************!*\
  !*** ./node_modules/spark-md5/spark-md5.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function (factory) {
    if (true) {
        // Node/CommonJS
        module.exports = factory();
    } else { var glob; }
}(function (undefined) {

    'use strict';

    /*
     * Fastest md5 implementation around (JKM md5).
     * Credits: Joseph Myers
     *
     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html
     * @see http://jsperf.com/md5-shootout/7
     */

    /* this function is much faster,
      so if possible we use it. Some IEs
      are the only ones I know of that
      need the idiotic second function,
      generated by an if clause.  */
    var add32 = function (a, b) {
        return (a + b) & 0xFFFFFFFF;
    },
        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];


    function cmn(q, a, b, x, s, t) {
        a = add32(add32(a, q), add32(x, t));
        return add32((a << s) | (a >>> (32 - s)), b);
    }

    function md5cycle(x, k) {
        var a = x[0],
            b = x[1],
            c = x[2],
            d = x[3];

        a += (b & c | ~b & d) + k[0] - 680876936 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[1] - 389564586 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[2] + 606105819 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[4] - 176418897 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[7] - 45705983 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[10] - 42063 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;
        a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
        a  = (a << 7 | a >>> 25) + b | 0;
        d += (a & b | ~a & c) + k[13] - 40341101 | 0;
        d  = (d << 12 | d >>> 20) + a | 0;
        c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
        c  = (c << 17 | c >>> 15) + d | 0;
        b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
        b  = (b << 22 | b >>> 10) + c | 0;

        a += (b & d | c & ~d) + k[1] - 165796510 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[11] + 643717713 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[0] - 373897302 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[5] - 701558691 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[10] + 38016083 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[15] - 660478335 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[4] - 405537848 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[9] + 568446438 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[3] - 187363961 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;
        a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
        a  = (a << 5 | a >>> 27) + b | 0;
        d += (a & c | b & ~c) + k[2] - 51403784 | 0;
        d  = (d << 9 | d >>> 23) + a | 0;
        c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
        c  = (c << 14 | c >>> 18) + d | 0;
        b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
        b  = (b << 20 | b >>> 12) + c | 0;

        a += (b ^ c ^ d) + k[5] - 378558 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[14] - 35309556 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[7] - 155497632 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[13] + 681279174 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[0] - 358537222 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[3] - 722521979 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[6] + 76029189 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;
        a += (b ^ c ^ d) + k[9] - 640364487 | 0;
        a  = (a << 4 | a >>> 28) + b | 0;
        d += (a ^ b ^ c) + k[12] - 421815835 | 0;
        d  = (d << 11 | d >>> 21) + a | 0;
        c += (d ^ a ^ b) + k[15] + 530742520 | 0;
        c  = (c << 16 | c >>> 16) + d | 0;
        b += (c ^ d ^ a) + k[2] - 995338651 | 0;
        b  = (b << 23 | b >>> 9) + c | 0;

        a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
        b  = (b << 21 |b >>> 11) + c | 0;
        a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
        a  = (a << 6 | a >>> 26) + b | 0;
        d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
        d  = (d << 10 | d >>> 22) + a | 0;
        c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
        c  = (c << 15 | c >>> 17) + d | 0;
        b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
        b  = (b << 21 | b >>> 11) + c | 0;

        x[0] = a + x[0] | 0;
        x[1] = b + x[1] | 0;
        x[2] = c + x[2] | 0;
        x[3] = d + x[3] | 0;
    }

    function md5blk(s) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);
        }
        return md5blks;
    }

    function md5blk_array(a) {
        var md5blks = [],
            i; /* Andy King said do it this way. */

        for (i = 0; i < 64; i += 4) {
            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);
        }
        return md5blks;
    }

    function md51(s) {
        var n = s.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk(s.substring(i - 64, i)));
        }
        s = s.substring(i - 64);
        length = s.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
        }
        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);
        return state;
    }

    function md51_array(a) {
        var n = a.length,
            state = [1732584193, -271733879, -1732584194, 271733878],
            i,
            length,
            tail,
            tmp,
            lo,
            hi;

        for (i = 64; i <= n; i += 64) {
            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));
        }

        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1
        // containing the last element of the parent array if the sub array specified starts
        // beyond the length of the parent array - weird.
        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue
        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);

        length = a.length;
        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= a[i] << ((i % 4) << 3);
        }

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(state, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Beware that the final length might not fit in 32 bits so we take care of that
        tmp = n * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;

        md5cycle(state, tail);

        return state;
    }

    function rhex(n) {
        var s = '',
            j;
        for (j = 0; j < 4; j += 1) {
            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];
        }
        return s;
    }

    function hex(x) {
        var i;
        for (i = 0; i < x.length; i += 1) {
            x[i] = rhex(x[i]);
        }
        return x.join('');
    }

    // In some cases the fast add32 function cannot be used..
    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {
        add32 = function (x, y) {
            var lsw = (x & 0xFFFF) + (y & 0xFFFF),
                msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return (msw << 16) | (lsw & 0xFFFF);
        };
    }

    // ---------------------------------------------------

    /**
     * ArrayBuffer slice polyfill.
     *
     * @see https://github.com/ttaubert/node-arraybuffer-slice
     */

    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {
        (function () {
            function clamp(val, length) {
                val = (val | 0) || 0;

                if (val < 0) {
                    return Math.max(val + length, 0);
                }

                return Math.min(val, length);
            }

            ArrayBuffer.prototype.slice = function (from, to) {
                var length = this.byteLength,
                    begin = clamp(from, length),
                    end = length,
                    num,
                    target,
                    targetArray,
                    sourceArray;

                if (to !== undefined) {
                    end = clamp(to, length);
                }

                if (begin > end) {
                    return new ArrayBuffer(0);
                }

                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);

                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);

                return target;
            };
        })();
    }

    // ---------------------------------------------------

    /**
     * Helpers.
     */

    function toUtf8(str) {
        if (/[\u0080-\uFFFF]/.test(str)) {
            str = unescape(encodeURIComponent(str));
        }

        return str;
    }

    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
        var length = str.length,
           buff = new ArrayBuffer(length),
           arr = new Uint8Array(buff),
           i;

        for (i = 0; i < length; i += 1) {
            arr[i] = str.charCodeAt(i);
        }

        return returnUInt8Array ? arr : buff;
    }

    function arrayBuffer2Utf8Str(buff) {
        return String.fromCharCode.apply(null, new Uint8Array(buff));
    }

    function concatenateArrayBuffers(first, second, returnUInt8Array) {
        var result = new Uint8Array(first.byteLength + second.byteLength);

        result.set(new Uint8Array(first));
        result.set(new Uint8Array(second), first.byteLength);

        return returnUInt8Array ? result : result.buffer;
    }

    function hexToBinaryString(hex) {
        var bytes = [],
            length = hex.length,
            x;

        for (x = 0; x < length - 1; x += 2) {
            bytes.push(parseInt(hex.substr(x, 2), 16));
        }

        return String.fromCharCode.apply(String, bytes);
    }

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation.
     *
     * Use this class to perform an incremental md5, otherwise use the
     * static methods instead.
     */

    function SparkMD5() {
        // call reset to init the instance
        this.reset();
    }

    /**
     * Appends a string.
     * A conversion will be applied if an utf8 string is detected.
     *
     * @param {String} str The string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.append = function (str) {
        // Converts the string to utf8 bytes if necessary
        // Then append as binary
        this.appendBinary(toUtf8(str));

        return this;
    };

    /**
     * Appends a binary string.
     *
     * @param {String} contents The binary string to be appended
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.appendBinary = function (contents) {
        this._buff += contents;
        this._length += contents.length;

        var length = this._buff.length,
            i;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));
        }

        this._buff = this._buff.substring(i - 64);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            i,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.reset = function () {
        this._buff = '';
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.prototype.getState = function () {
        return {
            buff: this._buff,
            length: this._length,
            hash: this._hash.slice()
        };
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5} The instance itself
     */
    SparkMD5.prototype.setState = function (state) {
        this._buff = state.buff;
        this._length = state.length;
        this._hash = state.hash;

        return this;
    };

    /**
     * Releases memory used by the incremental buffer and other additional
     * resources. If you plan to use the instance again, use reset instead.
     */
    SparkMD5.prototype.destroy = function () {
        delete this._hash;
        delete this._buff;
        delete this._length;
    };

    /**
     * Finish the final calculation based on the tail.
     *
     * @param {Array}  tail   The tail (will be modified)
     * @param {Number} length The length of the remaining buffer
     */
    SparkMD5.prototype._finish = function (tail, length) {
        var i = length,
            tmp,
            lo,
            hi;

        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
        if (i > 55) {
            md5cycle(this._hash, tail);
            for (i = 0; i < 16; i += 1) {
                tail[i] = 0;
            }
        }

        // Do the final computation based on the tail and length
        // Beware that the final length may not fit in 32 bits so we take care of that
        tmp = this._length * 8;
        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
        lo = parseInt(tmp[2], 16);
        hi = parseInt(tmp[1], 16) || 0;

        tail[14] = lo;
        tail[15] = hi;
        md5cycle(this._hash, tail);
    };

    /**
     * Performs the md5 hash on a string.
     * A conversion will be applied if utf8 string is detected.
     *
     * @param {String}  str The string
     * @param {Boolean} [raw] True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hash = function (str, raw) {
        // Converts the string to utf8 bytes if necessary
        // Then compute it using the binary function
        return SparkMD5.hashBinary(toUtf8(str), raw);
    };

    /**
     * Performs the md5 hash on a binary string.
     *
     * @param {String}  content The binary string
     * @param {Boolean} [raw]     True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.hashBinary = function (content, raw) {
        var hash = md51(content),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    // ---------------------------------------------------

    /**
     * SparkMD5 OOP implementation for array buffers.
     *
     * Use this class to perform an incremental md5 ONLY for array buffers.
     */
    SparkMD5.ArrayBuffer = function () {
        // call reset to init the instance
        this.reset();
    };

    /**
     * Appends an array buffer.
     *
     * @param {ArrayBuffer} arr The array to be appended
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.append = function (arr) {
        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),
            length = buff.length,
            i;

        this._length += arr.byteLength;

        for (i = 64; i <= length; i += 64) {
            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));
        }

        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);

        return this;
    };

    /**
     * Finishes the incremental computation, reseting the internal state and
     * returning the result.
     *
     * @param {Boolean} raw True to get the raw string, false to get the hex string
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.prototype.end = function (raw) {
        var buff = this._buff,
            length = buff.length,
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            i,
            ret;

        for (i = 0; i < length; i += 1) {
            tail[i >> 2] |= buff[i] << ((i % 4) << 3);
        }

        this._finish(tail, length);
        ret = hex(this._hash);

        if (raw) {
            ret = hexToBinaryString(ret);
        }

        this.reset();

        return ret;
    };

    /**
     * Resets the internal state of the computation.
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.reset = function () {
        this._buff = new Uint8Array(0);
        this._length = 0;
        this._hash = [1732584193, -271733879, -1732584194, 271733878];

        return this;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @return {Object} The state
     */
    SparkMD5.ArrayBuffer.prototype.getState = function () {
        var state = SparkMD5.prototype.getState.call(this);

        // Convert buffer to a string
        state.buff = arrayBuffer2Utf8Str(state.buff);

        return state;
    };

    /**
     * Gets the internal state of the computation.
     *
     * @param {Object} state The state
     *
     * @return {SparkMD5.ArrayBuffer} The instance itself
     */
    SparkMD5.ArrayBuffer.prototype.setState = function (state) {
        // Convert string to buffer
        state.buff = utf8Str2ArrayBuffer(state.buff, true);

        return SparkMD5.prototype.setState.call(this, state);
    };

    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;

    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;

    /**
     * Performs the md5 hash on an array buffer.
     *
     * @param {ArrayBuffer} arr The array buffer
     * @param {Boolean}     [raw] True to get the raw string, false to get the hex one
     *
     * @return {String} The result
     */
    SparkMD5.ArrayBuffer.hash = function (arr, raw) {
        var hash = md51_array(new Uint8Array(arr)),
            ret = hex(hash);

        return raw ? hexToBinaryString(ret) : ret;
    };

    return SparkMD5;
}));


/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/vkbeautify/index.js":
/*!******************************************!*\
  !*** ./node_modules/vkbeautify/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
*
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/
function createShiftArr(step) {

	var space = '    ';

	if ( isNaN(parseInt(step)) ) {  // argument is string
		space = step;
	} else { // argument is integer
		switch(step) {
			case 1: space = ' '; break;
			case 2: space = '  '; break;
			case 3: space = '   '; break;
			case 4: space = '    '; break;
			case 5: space = '     '; break;
			case 6: space = '      '; break;
			case 7: space = '       '; break;
			case 8: space = '        '; break;
			case 9: space = '         '; break;
			case 10: space = '          '; break;
			case 11: space = '           '; break;
			case 12: space = '            '; break;
		}
	}

	var shift = ['\n']; // array of shifts
	for(var ix=0;ix<100;ix++) {
		shift.push(shift[ix]+space);
	}
	return shift;
}

function vkbeautify(){
	this.step = '    '; // 4 spaces
	this.shift = createShiftArr(this.step);
};

vkbeautify.prototype.xml = function(text,step) {

	var ar = text.replace(/>\s{0,}</g,"><")
				 .replace(/</g,"~::~<")
				 .replace(/\s*xmlns\:/g,"~::~xmlns:")
				 .replace(/\s*xmlns\=/g,"~::~xmlns=")
				 .split('~::~'),
		len = ar.length,
		inComment = false,
		deep = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;

		for(ix=0;ix<len;ix++) {
			// start comment or <![CDATA[...]]> or <!DOCTYPE //
			if(ar[ix].search(/<!/) > -1) {
				str += shift[deep]+ar[ix];
				inComment = true;
				// end comment  or <![CDATA[...]]> //
				if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) {
					inComment = false;
				}
			} else
			// end comment  or <![CDATA[...]]> //
			if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) {
				str += ar[ix];
				inComment = false;
			} else
			// <elm></elm> //
			if( /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
				/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) {
				str += ar[ix];
				if(!inComment) deep--;
			} else
			 // <elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
				str = !inComment ? str += shift[deep++]+ar[ix] : str += ar[ix];
			} else
			 // <elm>...</elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
			} else
			// </elm> //
			if(ar[ix].search(/<\//) > -1) {
				str = !inComment ? str += shift[--deep]+ar[ix] : str += ar[ix];
			} else
			// <elm/> //
			if(ar[ix].search(/\/>/) > -1 ) {
				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
			} else
			// <? xml ... ?> //
			if(ar[ix].search(/<\?/) > -1) {
				str += shift[deep]+ar[ix];
			} else
			// xmlns //
			if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) {
				str += shift[deep]+ar[ix];
			}

			else {
				str += ar[ix];
			}
		}

	return  (str[0] == '\n') ? str.slice(1) : str;
}

vkbeautify.prototype.json = function(text,step) {

	var step = step ? step : this.step;

	if (typeof JSON === 'undefined' ) return text;

	if ( typeof text === "string" ) return JSON.stringify(JSON.parse(text), null, step);
	if ( typeof text === "object" ) return JSON.stringify(text, null, step);

	return text; // text is not string nor object
}

vkbeautify.prototype.css = function(text, step) {

	var ar = text.replace(/\s{1,}/g,' ')
				.replace(/\{/g,"{~::~")
				.replace(/\}/g,"~::~}~::~")
				.replace(/\;/g,";~::~")
				.replace(/\/\*/g,"~::~/*")
				.replace(/\*\//g,"*/~::~")
				.replace(/~::~\s{0,}~::~/g,"~::~")
				.split('~::~'),
		len = ar.length,
		deep = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;

		for(ix=0;ix<len;ix++) {

			if( /\{/.exec(ar[ix]))  {
				str += shift[deep++]+ar[ix];
			} else
			if( /\}/.exec(ar[ix]))  {
				str += shift[--deep]+ar[ix];
			} else
			if( /\*\\/.exec(ar[ix]))  {
				str += shift[deep]+ar[ix];
			}
			else {
				str += shift[deep]+ar[ix];
			}
		}
		return str.replace(/^\n{1,}/,'');
}

//----------------------------------------------------------------------------

function isSubquery(str, parenthesisLevel) {
	return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}

function split_sql(str, tab) {

	return str.replace(/\s{1,}/g," ")

				.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
				.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
				.replace(/ CASE /ig,"~::~"+tab+"CASE ")
				.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
				.replace(/ END /ig,"~::~"+tab+"END ")
				.replace(/ FROM /ig,"~::~FROM ")
				.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
				.replace(/ HAVING /ig,"~::~HAVING ")
				//.replace(/ SET /ig," SET~::~")
				.replace(/ IN /ig," IN ")

				.replace(/ JOIN /ig,"~::~JOIN ")
				.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
				.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
				.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
				.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")

				.replace(/ ON /ig,"~::~"+tab+"ON ")
				.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
				.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
				.replace(/ OVER /ig,"~::~"+tab+"OVER ")

				.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
				.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")

				.replace(/ THEN /ig," THEN~::~"+tab+"")
				.replace(/ UNION /ig,"~::~UNION~::~")
				.replace(/ USING /ig,"~::~USING ")
				.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
				.replace(/ WHERE /ig,"~::~WHERE ")
				.replace(/ WITH /ig,"~::~WITH ")

				//.replace(/\,\s{0,}\(/ig,",~::~( ")
				//.replace(/\,/ig,",~::~"+tab+tab+"")

				.replace(/ ALL /ig," ALL ")
				.replace(/ AS /ig," AS ")
				.replace(/ ASC /ig," ASC ")
				.replace(/ DESC /ig," DESC ")
				.replace(/ DISTINCT /ig," DISTINCT ")
				.replace(/ EXISTS /ig," EXISTS ")
				.replace(/ NOT /ig," NOT ")
				.replace(/ NULL /ig," NULL ")
				.replace(/ LIKE /ig," LIKE ")
				.replace(/\s{0,}SELECT /ig,"SELECT ")
				.replace(/\s{0,}UPDATE /ig,"UPDATE ")
				.replace(/ SET /ig," SET ")

				.replace(/~::~{1,}/g,"~::~")
				.split('~::~');
}

vkbeautify.prototype.sql = function(text,step) {

	var ar_by_quote = text.replace(/\s{1,}/g," ")
							.replace(/\'/ig,"~::~\'")
							.split('~::~'),
		len = ar_by_quote.length,
		ar = [],
		deep = 0,
		tab = this.step,//+this.step,
		inComment = true,
		inQuote = false,
		parenthesisLevel = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;;

		for(ix=0;ix<len;ix++) {
			if(ix%2) {
				ar = ar.concat(ar_by_quote[ix]);
			} else {
				ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
			}
		}

		len = ar.length;
		for(ix=0;ix<len;ix++) {

			parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);

			if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  {
				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
			}

			if( /\s{0,}\s{0,}SET\s{0,}/.exec(ar[ix]))  {
				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
			}

			if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  {
				deep++;
				str += shift[deep]+ar[ix];
			} else
			if( /\'/.exec(ar[ix]) )  {
				if(parenthesisLevel<1 && deep) {
					deep--;
				}
				str += ar[ix];
			}
			else  {
				str += shift[deep]+ar[ix];
				if(parenthesisLevel<1 && deep) {
					deep--;
				}
			}
			var junk = 0;
		}

		str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
		return str;
}


vkbeautify.prototype.xmlmin = function(text, preserveComments) {

	var str = preserveComments ? text
							   : text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"")
									 .replace(/[ \r\n\t]{1,}xmlns/g, ' xmlns');
	return  str.replace(/>\s{0,}</g,"><");
}

vkbeautify.prototype.jsonmin = function(text) {

	if (typeof JSON === 'undefined' ) return text;

	return JSON.stringify(JSON.parse(text), null, 0);

}

vkbeautify.prototype.cssmin = function(text, preserveComments) {

	var str = preserveComments ? text
							   : text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;

	return str.replace(/\s{1,}/g,' ')
			  .replace(/\{\s{1,}/g,"{")
			  .replace(/\}\s{1,}/g,"}")
			  .replace(/\;\s{1,}/g,";")
			  .replace(/\/\*\s{1,}/g,"/*")
			  .replace(/\*\/\s{1,}/g,"*/");
}

vkbeautify.prototype.sqlmin = function(text) {
	return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}

module.exports = new vkbeautify();


/***/ }),

/***/ "./node_modules/vuvuzela/index.js":
/*!****************************************!*\
  !*** ./node_modules/vuvuzela/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Stringify/parse functions that don't operate
 * recursively, so they avoid call stack exceeded
 * errors.
 */
exports.stringify = function stringify(input) {
  var queue = [];
  queue.push({obj: input});

  var res = '';
  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;
  while ((next = queue.pop())) {
    obj = next.obj;
    prefix = next.prefix || '';
    val = next.val || '';
    res += prefix;
    if (val) {
      res += val;
    } else if (typeof obj !== 'object') {
      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);
    } else if (obj === null) {
      res += 'null';
    } else if (Array.isArray(obj)) {
      queue.push({val: ']'});
      for (i = obj.length - 1; i >= 0; i--) {
        arrayPrefix = i === 0 ? '' : ',';
        queue.push({obj: obj[i], prefix: arrayPrefix});
      }
      queue.push({val: '['});
    } else { // object
      keys = [];
      for (k in obj) {
        if (obj.hasOwnProperty(k)) {
          keys.push(k);
        }
      }
      queue.push({val: '}'});
      for (i = keys.length - 1; i >= 0; i--) {
        key = keys[i];
        value = obj[key];
        objPrefix = (i > 0 ? ',' : '');
        objPrefix += JSON.stringify(key) + ':';
        queue.push({obj: value, prefix: objPrefix});
      }
      queue.push({val: '{'});
    }
  }
  return res;
};

// Convenience function for the parse function.
// This pop function is basically copied from
// pouchCollate.parseIndexableString
function pop(obj, stack, metaStack) {
  var lastMetaElement = metaStack[metaStack.length - 1];
  if (obj === lastMetaElement.element) {
    // popping a meta-element, e.g. an object whose value is another object
    metaStack.pop();
    lastMetaElement = metaStack[metaStack.length - 1];
  }
  var element = lastMetaElement.element;
  var lastElementIndex = lastMetaElement.index;
  if (Array.isArray(element)) {
    element.push(obj);
  } else if (lastElementIndex === stack.length - 2) { // obj with key+value
    var key = stack.pop();
    element[key] = obj;
  } else {
    stack.push(obj); // obj with key only
  }
}

exports.parse = function (str) {
  var stack = [];
  var metaStack = []; // stack for arrays and objects
  var i = 0;
  var collationIndex,parsedNum,numChar;
  var parsedString,lastCh,numConsecutiveSlashes,ch;
  var arrayElement, objElement;
  while (true) {
    collationIndex = str[i++];
    if (collationIndex === '}' ||
        collationIndex === ']' ||
        typeof collationIndex === 'undefined') {
      if (stack.length === 1) {
        return stack.pop();
      } else {
        pop(stack.pop(), stack, metaStack);
        continue;
      }
    }
    switch (collationIndex) {
      case ' ':
      case '\t':
      case '\n':
      case ':':
      case ',':
        break;
      case 'n':
        i += 3; // 'ull'
        pop(null, stack, metaStack);
        break;
      case 't':
        i += 3; // 'rue'
        pop(true, stack, metaStack);
        break;
      case 'f':
        i += 4; // 'alse'
        pop(false, stack, metaStack);
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '-':
        parsedNum = '';
        i--;
        while (true) {
          numChar = str[i++];
          if (/[\d\.\-e\+]/.test(numChar)) {
            parsedNum += numChar;
          } else {
            i--;
            break;
          }
        }
        pop(parseFloat(parsedNum), stack, metaStack);
        break;
      case '"':
        parsedString = '';
        lastCh = void 0;
        numConsecutiveSlashes = 0;
        while (true) {
          ch = str[i++];
          if (ch !== '"' || (lastCh === '\\' &&
              numConsecutiveSlashes % 2 === 1)) {
            parsedString += ch;
            lastCh = ch;
            if (lastCh === '\\') {
              numConsecutiveSlashes++;
            } else {
              numConsecutiveSlashes = 0;
            }
          } else {
            break;
          }
        }
        pop(JSON.parse('"' + parsedString + '"'), stack, metaStack);
        break;
      case '[':
        arrayElement = { element: [], index: stack.length };
        stack.push(arrayElement.element);
        metaStack.push(arrayElement);
        break;
      case '{':
        objElement = { element: {}, index: stack.length };
        stack.push(objElement.element);
        metaStack.push(objElement);
        break;
      default:
        throw new Error(
          'unexpectedly reached end of input: ' + collationIndex);
    }
  }
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/Dashboard/dashboard_components.ts":
/*!***********************************************!*\
  !*** ./src/Dashboard/dashboard_components.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadAreaHTML = void 0;
exports.uploadAreaHTML = `<div id="document-upload-container">

    <div id="initial_upload_container">
      <div id="initial_upload_area">
        <div id="initial_upload_message">Upload Files</div>
      </div>
    </div>
    
    <div id="uploading_container">
      <div class="file_container" id="unpaired_container">

        <div class="file-container-title">Unpaired Documents</div>

        <div id="files_container">

          <div id="mei_container">
            <div class="file_heading">MEI</div>
            <div class="file_list" id="mei_list"></div>
          </div>

          <div id="image_container">
            <div class="file_heading">Images</div>
            <div class="file_list" id="image_list"></div>
          </div>

        </div>

        <div id="generate-pair-button-container">
          <div class="action_button" id="make_pair">Make Pair</div>
        </div>
      </div>

      <div class="file_container" id="paired_container">

        <div class="file-container-title">Paired Folios</div>
        
        <div class="tile_list" id="paired_list"></div>

        <div id="upload_button_container">
          <div class="action_button" id="upload_button">Upload</div>
        </div>

      </div>

      <!--
      <div class="file_container" id="manuscripts_container">
        <h2 class="file_heading">Manuscripts</h2>
        <div class="tile_list" id="manuscript_list"></div>
      </div>
      -->

    </div>
  </div>`;


/***/ }),

/***/ "./src/DisplayPanel/DisplayControls.ts":
/*!*********************************************!*\
  !*** ./src/DisplayPanel/DisplayControls.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** @module DisplayPanel/DisplayControls */
Object.defineProperty(exports, "__esModule", { value: true });
exports.initDisplayControls = exports.loadHighlightSettings = exports.updateHighlight = exports.setHighlightSelectionControls = exports.setHighlightControls = exports.setHighlightOption = exports.setBgOpacityFromSlider = exports.setOpacityFromSlider = exports.setZoomControls = void 0;
const Color = __webpack_require__(/*! ../utils/Color */ "./src/utils/Color.ts");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
let lastGlyphOpacity, lastImageOpacity;
/**
 * Set zoom control listener for button and slider
 * @param zoomHandler - A [[ZoomHandler]] is only necessary in Single Page mode as diva.js handles zooming otherwise.
 */
function setZoomControls(zoomHandler) {
    if (zoomHandler === undefined) {
        return;
    }
    const zoomSlider = document.getElementById('zoomSlider');
    const zoomOutput = document.getElementById('zoomOutput');
    const { zoom } = LocalSettings_1.getSettings();
    zoomSlider.value = String(zoom);
    zoomOutput.value = String(zoom);
    zoomHandler.zoomTo(zoom / 100.0);
    document.getElementById('reset-zoom').addEventListener('click', () => {
        zoomOutput.value = '100';
        zoomSlider.value = '100';
        zoomHandler.resetZoomAndPan();
    });
    function inputChangeHandler() {
        zoomOutput.value = zoomSlider.value;
        zoomHandler.zoomTo(Number(zoomOutput.value) / 100.0);
    }
    // zoomSlider.addEventListener('input', inputChangeHandler);
    zoomSlider.addEventListener('mouseup', inputChangeHandler);
    zoomSlider.disabled = false;
    document.body.addEventListener('keydown', (evt) => {
        const currentZoom = parseInt(zoomOutput.value);
        if (evt.key === 'ArrowUp' || evt.key === 'ArrowDown' ||
            evt.key === 'ArrowRight' || evt.key === 'ArrowLeft') {
            evt.preventDefault();
        }
        else if (evt.key === '+') { // increase zoom by 20
            const newZoom = Math.min(currentZoom + 20, parseInt(zoomSlider.getAttribute('max')));
            zoomHandler.zoomTo(newZoom / 100.0);
            zoomOutput.value = String(newZoom);
            zoomSlider.value = String(newZoom);
        }
        else if (evt.key === '_') { // decrease zoom by 20
            const newZoom = Math.max(currentZoom - 20, parseInt(zoomSlider.getAttribute('min')));
            zoomHandler.zoomTo(newZoom / 100.0);
            zoomOutput.value = String(newZoom);
            zoomSlider.value = String(newZoom);
        }
        else if (evt.key === '0') {
            zoomOutput.value = '100';
            zoomSlider.value = '100';
            zoomHandler.resetZoomAndPan();
        }
    });
}
exports.setZoomControls = setZoomControls;
/**
 * Update MEI opacity to value from the slider.
 * @param meiClassName - Class that contains the rendered MEI.
 */
function setOpacityFromSlider(meiClassName) {
    const opacityOutput = document.getElementById('opacityOutput');
    const opacitySlider = document.getElementById('opacitySlider');
    opacitySlider.value = opacityOutput.value;
    LocalSettings_1.setSettings({ glyphOpacity: Number(opacityOutput.value) });
    try {
        (document.querySelectorAll('.' + meiClassName)).forEach(g => {
            g.style.opacity = (Number(opacityOutput.value) / 100.0).toString();
        });
    }
    catch (e) {
        console.warn('Unable to properly set opacity to pages');
    }
}
exports.setOpacityFromSlider = setOpacityFromSlider;
/**
 * Set rendered MEI opacity button and slider listeners.
 * @param meiClassName - Class that contains the rendered MEI.
 */
function setOpacityControls(meiClassName) {
    const opacitySlider = document.getElementById('opacitySlider');
    const opacityOutput = document.getElementById('opacityOutput');
    const { glyphOpacity } = LocalSettings_1.getSettings();
    lastGlyphOpacity = glyphOpacity;
    opacitySlider.value = String(glyphOpacity);
    opacityOutput.value = String(glyphOpacity);
    document.getElementById('reset-opacity').addEventListener('click', () => {
        // Definition scale is the root element of what is generated by verovio
        const lowerOpacity = lastGlyphOpacity < 95 ? lastGlyphOpacity / 100.0 : 0;
        const newOpacity = opacitySlider.value === '100' ? lowerOpacity : 1;
        document.querySelectorAll('.' + meiClassName).forEach(g => {
            g.style.opacity = newOpacity.toString();
        });
        lastGlyphOpacity = Number(opacitySlider.value);
        opacitySlider.value = String(newOpacity * 100);
        opacityOutput.value = String(Math.round(newOpacity * 100));
        LocalSettings_1.setSettings({ glyphOpacity: newOpacity * 100 });
    });
    function inputChangeOpacity() {
        opacityOutput.value = opacitySlider.value;
        lastGlyphOpacity = Number(opacitySlider.value);
        setOpacityFromSlider(meiClassName);
    }
    opacitySlider.addEventListener('input', inputChangeOpacity);
    opacitySlider.addEventListener('change', inputChangeOpacity);
    opacitySlider.disabled = false;
}
/**
 * Set background image opacity button and slider listeners.
 * @param background - The background image selector.
 */
function setBackgroundOpacityControls(background) {
    const bgOpacitySlider = document.getElementById('bgOpacitySlider');
    const bgOpacityOutput = document.getElementById('bgOpacityOutput');
    const { imageOpacity } = LocalSettings_1.getSettings();
    lastImageOpacity = imageOpacity;
    bgOpacitySlider.value = String(imageOpacity);
    bgOpacityOutput.value = String(imageOpacity);
    document.getElementById('reset-bg-opacity').addEventListener('click', () => {
        const lowerOpacity = lastImageOpacity < 95 ? lastImageOpacity / 100.0 : 0;
        const newOpacity = bgOpacitySlider.value === '100' ? lowerOpacity : 1;
        document.getElementsByClassName(background)[0]
            .style.opacity = newOpacity.toString();
        lastImageOpacity = Number(bgOpacitySlider.value);
        bgOpacitySlider.value = String(newOpacity * 100);
        bgOpacityOutput.value = String(Math.round(newOpacity * 100));
        LocalSettings_1.setSettings({ imageOpacity: newOpacity * 100 });
    });
    function bgInputChangeHandler() {
        bgOpacityOutput.value = bgOpacitySlider.value;
        lastImageOpacity = Number(bgOpacitySlider.value);
        setBgOpacityFromSlider(background);
    }
    bgOpacitySlider.addEventListener('input', bgInputChangeHandler);
    bgOpacitySlider.addEventListener('change', bgInputChangeHandler);
    bgOpacitySlider.disabled = false;
}
function setBgOpacityFromSlider(background) {
    const bgOpacityOutput = document.querySelector('#bgOpacityOutput');
    LocalSettings_1.setSettings({ imageOpacity: Number(bgOpacityOutput.value) });
    const bg = document.querySelector(`.${background}`);
    if (bg)
        bg.style.opacity = String(Number(bgOpacityOutput.value) / 100);
}
exports.setBgOpacityFromSlider = setBgOpacityFromSlider;
/**
 * Update highlight dropdown option + display
 * @param group - GroupingType / The DOM element's id as `highlight-${id}`
 */
function updateHighlightOption(group) {
    const option = document.getElementById(`highlight-${group}`);
    const dropdown = document.getElementById('highlight-dropdown');
    const highlightType = document.getElementById('highlight-type');
    // save highlight option to localStorage
    LocalSettings_1.setSettings({ highlightMode: group });
    dropdown.classList.remove('is-active');
    document.querySelectorAll('.highlight-selected').forEach(elem => {
        elem.classList.remove('highlight-selected');
    });
    if (group === 'none') {
        highlightType.textContent = '\xA0- Off';
        Color.unsetGroupingHighlight();
        return;
    }
    option.classList.add('highlight-selected');
    // Text content is the grouping type capitalized
    highlightType.textContent = `\xA0- ${group[0].toUpperCase() + group.slice(1)}`;
    Color.setGroupingHighlight(group);
}
/**
 * Set click listener for each highlight dropdown option
 * @param group - GroupingType / The DOM element's id as `highlight-${id}`
 */
function setHighlightOption(group) {
    const option = document.getElementById(`highlight-${group}`);
    option.addEventListener('click', () => {
        updateHighlightOption(group);
    });
}
exports.setHighlightOption = setHighlightOption;
/**
 * Clickaway listener for the highlight dropdown.
 */
function highlightClickaway() {
    document.body.removeEventListener('click', highlightClickaway);
    document.getElementById('highlight-dropdown').classList.remove('is-active');
}
/**
 * Set listener on staff highlighting checkbox.
 */
function setHighlightControls() {
    const dropdown = document.getElementById('highlight-dropdown');
    document.getElementById('highlight-button').addEventListener('click', (evt) => {
        evt.stopPropagation();
        dropdown.classList.toggle('is-active');
        if (dropdown.classList.contains('is-active')) {
            document.body.addEventListener('click', highlightClickaway);
            setHighlightOption('staff');
            setHighlightOption('syllable');
            setHighlightOption('neume');
            setHighlightOption('layerElement');
            setHighlightOption('none');
        }
        else {
            document.body.removeEventListener('click', highlightClickaway);
        }
    });
}
exports.setHighlightControls = setHighlightControls;
/**
  * Set listener on key shortcuts for switching between highlights
  *
  * The current plan is to use the keys q, w, e, r, t, and y
  */
function setHighlightKeyControls() {
    document.body.addEventListener('keydown', (evt) => {
        switch (evt.key) {
            case 'q':
                updateHighlightOption('staff');
                break;
            case 'w':
                updateHighlightOption('syllable');
                break;
            case 'e':
                updateHighlightOption('neume');
                break;
            case 'r':
                updateHighlightOption('layerElement');
                break;
            case 't':
                updateHighlightOption('selection');
                break;
            case 'y':
                updateHighlightOption('none');
                break;
        }
    });
}
// Why does this exist separately?
function setHighlightSelectionControls() {
    const highlightSelection = document.getElementById('highlight-selection');
    highlightSelection.addEventListener('click', () => {
        document.getElementById('highlight-dropdown').classList.remove('is-active');
        document.querySelectorAll('.highlight-selected').forEach(elem => {
            elem.classList.remove('highlight-selected');
        });
        highlightSelection.classList.add('highlight-selected');
        document.getElementById('highlight-type').textContent = ' - Selection';
        Color.setGroupingHighlight('selection');
    });
}
exports.setHighlightSelectionControls = setHighlightSelectionControls;
/**
 * Reset the highlight for different types based on the 'highlight-selected' class in the DOM.
 */
function updateHighlight() {
    let highlightId;
    try {
        highlightId = document.querySelector('.highlight-selected').id;
    }
    catch (e) {
        highlightId = '';
    }
    switch (highlightId) {
        case 'highlight-staff':
            Color.setGroupingHighlight('staff');
            break;
        case 'highlight-syllable':
            Color.setGroupingHighlight('syllable');
            break;
        case 'highlight-neume':
            Color.setGroupingHighlight('neume');
            break;
        case 'highlight-layerElement':
            Color.setGroupingHighlight('layerElement');
            break;
        case 'highlight-selection':
            Color.setGroupingHighlight('selection');
            break;
        default:
            Color.unsetGroupingHighlight();
    }
}
exports.updateHighlight = updateHighlight;
/**
 * Set listener on burger menu for smaller screens.
 */
function setBurgerControls() {
    document.getElementById('burgerMenu').addEventListener('click', () => {
        document.getElementById('burgerMenu').classList.toggle('is-active');
        document.getElementById('navMenu').classList.toggle('is-active');
    });
}
/**
 * Set listener for "Display All" button in Display panel.
*/
function setDisplayAllListener() {
    const selectAllBtn = document.querySelector('#display-all-btn');
    selectAllBtn.addEventListener('click', () => {
        // at the moment, classname 'selected' is only used for tracking purposes
        if (selectAllBtn.classList.contains('selected')) {
            selectAllBtn.classList.remove('selected');
            selectAllBtn.innerHTML = 'Display All';
            const options = document.querySelectorAll('.checkbox-container > .checkbox');
            Array.from(options).forEach((option) => {
                if (option.checked)
                    option.click();
            });
        }
        else {
            selectAllBtn.classList.add('selected');
            selectAllBtn.innerHTML = 'Hide All';
            const options = document.querySelectorAll('.checkbox-container > .checkbox');
            Array.from(options).forEach((option) => {
                if (!option.checked)
                    option.click();
            });
        }
    });
}
/**
 * Load highlight settings from localStorage
 */
function loadHighlightSettings() {
    const { highlightMode } = LocalSettings_1.getSettings();
    updateHighlightOption(highlightMode);
}
exports.loadHighlightSettings = loadHighlightSettings;
/**
 * Initialize listeners and controls for display panel.
 * @param {string} meiClassName - The class used to signifiy the MEI element(s).
 * @param {string} background - The class used to signify the background.
 */
function initDisplayControls(meiClassName, background) {
    setOpacityControls(meiClassName);
    setBackgroundOpacityControls(background);
    setHighlightControls();
    setBurgerControls();
    setHighlightKeyControls();
    setDisplayAllListener();
    loadHighlightSettings();
    const displayContents = document.getElementById('displayContents');
    const toggleDisplay = document.getElementById('toggleDisplay');
    const displayHeader = document.getElementById('displayHeader');
    displayHeader.addEventListener('click', (e) => {
        e.stopPropagation();
        // if display panel is closed, open it
        if (displayContents.classList.contains('closed')) {
            displayContents.classList.remove('closed');
            displayContents.style.padding = '0.5em 0.75em';
            setTimeout(() => {
                displayContents.style.overflow = 'visible';
            }, 200);
            toggleDisplay.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-down`);
        }
        // if display panel is open, close it
        else {
            displayContents.classList.add('closed');
            displayContents.style.overflow = 'hidden';
            setTimeout(() => {
                displayContents.style.padding = '0px';
            }, 200);
            toggleDisplay.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-side`);
        }
    });
}
exports.initDisplayControls = initDisplayControls;


/***/ }),

/***/ "./src/DisplayPanel/DisplayPanel.ts":
/*!******************************************!*\
  !*** ./src/DisplayPanel/DisplayPanel.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const DisplayControls = __webpack_require__(/*! ./DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * Return the HTML for the display panel.
 * @param {ZoomHandler} handleZoom - Includes zoom controls if defined.
 * @returns {string}
 */
function displayControlsPanel(handleZoom) {
    let contents = `
    <div class="panel-heading" id="displayHeader">
      <div class="panel-heading-title">DISPLAY</div>
      <svg class="icon is-pulled-right">
        <use id="toggleDisplay" class="panel-dropdown-icon" xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use>
      </svg>
    </div>
    <div id="displayContents" class="panel-contents">
      <div class="panel-content-subsection first-subsection">
  `;
    if (handleZoom !== undefined) {
        contents += `
        <div class="slider-container display-panel" style="cursor: default">
          <button class="side-panel-btn slider-btn" id="reset-zoom">Zoom</button>
          <input type="range"
            step="5" min="25" max="400" value="100"
            aria-labelledby="reset-zoom"
            class="slider is-fullwidth is-large"
            id="zoomSlider"
            style="padding-left: 1rem; padding-right: 1rem;"
            disabled="disabled"
          />
          <output id="zoomOutput" for="zoomSlider">100</output>
        </div>`;
    }
    contents += `
        <div class="slider-container display-panel" style="cursor: default">
          <button class="side-panel-btn slider-btn" id="reset-opacity">Glyph Opacity</button>
          <input type="range"
            step="5" min="0" max="100" value="100"
            aria-labelledby="reset-opacity"
            class="slider is-fullwidth is-large"
            id="opacitySlider"
            style="padding-left: 1rem; padding-right: 1rem;"
            disabled="disabled"
          />
          <output id="opacityOutput" for="opacitySlider">100</output>
        </div>
        
        <div class="slider-container display-panel" style="cursor: default">
          <button class="side-panel-btn slider-btn" id="reset-bg-opacity">Image Opacity</button>
          <input type="range"
            step="5" min="0" max="100" value="100"
            aria-labelledby="reset-bg-opacity"
            class="slider is-fullwidth is-large"
            id="bgOpacitySlider"
            style="padding-left: 1rem; padding-right: 1rem;"
            disabled="disabled"
          />
          <output id="bgOpacityOutput" for="bgOpacitySlider">100</output>
        </div>
      </div>
      
      <div class="panel-content-subsection">

        <div id="highlight-options-title" class="panel-sub-title">Highlight Options:</div>
        <div class="dropdown" id="highlight-dropdown">
          <div class="dropdown-trigger">
            <button class="side-panel-btn" id="highlight-button" aria-haspopup="true" aria-controls="highlight-menu" style="width: auto">
              <span>Highlight</span>
              <span id="highlight-type">&nbsp;- Off</span>
              <svg class="icon">
                <use id="toggleDisplay" xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use>
              </svg>
            </button>
          </div>
          <div class="dropdown-menu" id="highlight-menu" role="menu">
            <div class="dropdown-content">
              <a aria-role="menuitem" class="dropdown-item" id="highlight-staff">Staff</a>
              <a aria-role="menuitem" class="dropdown-item" id="highlight-syllable">Syllable</a>
              <a aria-role="menuitem" class="dropdown-item" id="highlight-neume">Neume</a>
              <a aria-role="menuitem" class="dropdown-item" id="highlight-layerElement">LayerElement</a>
              <hr class="dropdown-divider"/>
              <a aria-role="menuitem" class="dropdown-item" id="highlight-none">None</a>
            </div>
          </div>
        </div>
      </div>

      <div class="panel-content-subsection">
        <div id="display-options-container">
          <div id="display-options-title" class="panel-sub-title">Display Options:</div>

          <div id="display-options-items">

            <div id="checkbox-display-options">

              <div id="display-all-container">
                <div id="display-options-separator">
                <div class="side-panel-btn" id="display-all-btn">Display All</div>
              </div>
              <div id="display-single-container"></div>

              
            </div>

          </div>

        </div>
      </div>
      
    </div>`;
    return contents;
}
/**
 * A class that sets the content of the display panel to the right and
 * manages controls for viewing.
 */
class DisplayPanel {
    /**
     * Constructor for DisplayPanel.
     * @param {SingleView | DivaView} view - The View parent.
     * @param {string} mei - The class name for the SVG-rendered MEI.
     * @param {string} background - The class name associated with the background.
     * @param {ZoomHandler} [zoomHandler] - The ZoomHandler object, if SingleView.
     */
    constructor(view, mei, background, zoomHandler = undefined) {
        this.view = view;
        this.meiClass = mei;
        this.background = background;
        this.zoomHandler = zoomHandler;
        const displayPanel = document.getElementById('display_controls');
        displayPanel.innerHTML = displayControlsPanel(this.zoomHandler);
        this.loadSettings();
        this.view.addUpdateCallback(this.updateVisualization.bind(this));
    }
    /**
     * Apply event listeners related to the DisplayPanel.
     */
    setDisplayListeners() {
        if (this.zoomHandler) {
            // Zoom handler stuff
            DisplayControls.setZoomControls(this.zoomHandler);
        }
        DisplayControls.initDisplayControls(this.meiClass, this.background);
    }
    /**
     * Load localStorage values before SVG is loaded
     *
     * NOTE: this function only causes visual changes, not functional changes.
     *    Functional changes are done in separate modules which depend on specific conditions.
     */
    loadSettings() {
        const { zoom, glyphOpacity, imageOpacity, highlightMode } = LocalSettings_1.getSettings();
        // Zoom
        document.querySelector('#zoomOutput').value = String(zoom);
        document.querySelector('#zoomSlider').value = String(zoom);
        // Image opacity
        document.querySelector('#bgOpacityOutput').value = String(imageOpacity);
        document.querySelector('#bgOpacitySlider').value = String(imageOpacity);
        // Glyph opacity
        document.querySelector('#opacityOutput').value = String(glyphOpacity);
        document.querySelector('#opacitySlider').value = String(glyphOpacity);
        // Highlight mode:
        // Text = capitalized version of highlight-${id}
        const text = highlightMode === 'none' ? 'Off' : highlightMode[0].toUpperCase() + highlightMode.slice(1);
        document.querySelector('#highlight-type').textContent = `\xA0- ${text}`;
    }
    /**
     * Update SVG based on visualization settings
     */
    updateVisualization() {
        DisplayControls.setOpacityFromSlider(this.meiClass);
        DisplayControls.setBgOpacityFromSlider(this.background);
        DisplayControls.updateHighlight();
    }
}
exports.default = DisplayPanel;


/***/ }),

/***/ "./src/DivaView.ts":
/*!*************************!*\
  !*** ./src/DivaView.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const diva_js_1 = __webpack_require__(/*! diva.js */ "./node_modules/diva.js/source/js/diva.js");
/**
 * View module that uses the diva.js viewer to render the pages of a IIIF manifests
 * and then display the rendered MEI files over the proper pages.
 */
class DivaView {
    /**
     * @param manifest - URI/IRI to the IIIF manifest.
     */
    constructor(neonView, Display, manifest) {
        this.neonView = neonView;
        this.updateCallbacks = [];
        this.divaReady = false;
        this.diva = new diva_js_1.default('container', {
            objectData: manifest
        });
        document.getElementById('container').style.minHeight = '100%';
        this.indexMap = new Map();
        this.diva.disableDragScrollable();
        this.displayPanel = new Display(this, 'neon-container', 'diva-viewer-canvas');
        this.loadDelay = 500; // in milliseconds
        this.initDivaEvents();
        this.setViewEventHandlers();
        window.onresize = () => {
            const height = window.innerHeight;
            const width = window.innerWidth;
            window.setTimeout(() => {
                if ((height === window.innerHeight) && (width === window.innerWidth)) {
                    this.changePage(this.getCurrentPage(), false);
                }
            }, this.loadDelay);
        };
    }
    /**
     * Set the listeners for certain events internal to diva.js
     */
    initDivaEvents() {
        diva_js_1.default.Events.subscribe('ManifestDidLoad', this.parseManifest.bind(this), this.diva.settings.ID);
        diva_js_1.default.Events.subscribe('ObjectDidLoad', this.didLoad.bind(this), this.diva.settings.ID);
        diva_js_1.default.Events.subscribe('ActivePageDidChange', this.changePage.bind(this), this.diva.settings.ID);
        diva_js_1.default.Events.subscribe('ZoomLevelDidChange', this.adjustZoom.bind(this), this.diva.settings.ID);
    }
    /**
     * Called when the visible page changes in the diva.js viewer.
     * @param pageIndex - The zero-indexed page that is most visible.
     * @param delay - Whether to delay the loading of the page so that neon doesn't lag while scrolling.
     */
    async changePage(pageIndex, delay = true) {
        function checkAndLoad(page) {
            if (page === this.getCurrentPage()) {
                const pageURI = this.indexMap.get(page);
                this.neonView.getPageSVG(pageURI).then((svg) => {
                    this.updateSVG(svg, page);
                    const containerId = 'neon-container-' + page;
                    const container = document.getElementById(containerId);
                    if (container !== null) {
                        container.classList.add('active-page');
                    }
                    this.updateCallbacks.forEach((callback) => callback());
                }).catch((err) => {
                    if (err.name !== 'not_found' && err.name !== 'missing_mei') {
                        console.error(err);
                    }
                });
            }
        }
        const pageIndexes = [pageIndex];
        Array.from(document.getElementsByClassName('active-page')).forEach(elem => {
            elem.classList.remove('active-page');
        });
        for (const page of pageIndexes) {
            if (delay) {
                window.setTimeout(checkAndLoad.bind(this), (this.loadDelay), page);
            }
            else {
                checkAndLoad.bind(this)(page);
            }
        }
    }
    /**
     * @returns Active zero-indexed page in the diva.js viewer.
     */
    getCurrentPage() {
        return this.diva.getActivePageIndex();
    }
    /**
     * @returns The active page URI in the diva.js viewer.
     */
    getCurrentPageURI() {
        return this.indexMap.get(this.getCurrentPage());
    }
    /**
     * Adjust the rendered SVG(s) to be the correct size after zooming.
     */
    adjustZoom() {
        (new Promise((resolve) => {
            Array.from(document.getElementsByClassName('neon-container'))
                .forEach((elem) => { elem.style.display = 'none'; });
            setTimeout(resolve, this.diva.settings.zoomDuration + 100);
        })).then(() => {
            this.changePage(this.diva.getActivePageIndex(), true);
            Array.from(document.getElementsByClassName('neon-container'))
                .forEach((elem) => {
                const svg = elem.firstChild;
                const pageNo = parseInt(elem.id.match(/\d+/)[0]);
                this.updateSVG(svg, pageNo);
                elem.style.display = '';
            });
        });
    }
    /**
     * Update the SVG being displayed for the specified page.
     * @param svg - The SVG of the page to update to.
     * @param pageNo - The zero-indexed page number.
     */
    updateSVG(svg, pageNo) {
        const inner = document.getElementById('diva-1-inner');
        const dimensions = this.diva.getPageDimensionsAtCurrentZoomLevel(pageNo);
        const offset = this.diva.settings.viewHandler._viewerCore.getPageRegion(pageNo, {
            includePadding: true,
            incorporateViewport: true
        });
        const marginLeft = window.getComputedStyle(inner, null)
            .getPropertyValue('margin-left');
        const containerId = 'neon-container-' + pageNo.toString();
        let container = document.getElementById(containerId);
        if (container === null) {
            container = document.createElement('div');
            container.id = containerId;
            container.classList.add('neon-container');
            inner.appendChild(container);
        }
        while (container.firstChild) {
            container.removeChild(container.firstChild);
        }
        svg.setAttribute('width', dimensions.width.toString());
        svg.setAttribute('height', dimensions.height.toString());
        container.style.position = 'absolute';
        container.style.top = `${offset.top}px`;
        container.style.left = `${offset.left - parseInt(marginLeft)}px`;
        container.appendChild(svg);
    }
    /**
     * Function called when diva.js finishes loading.
     */
    didLoad() {
        this.divaReady = true;
        this.displayPanel.setDisplayListeners();
        document.getElementById('loading').style.display = 'none';
        console.log(this.diva);
    }
    /**
     * Add a callback function that will be run whenever an SVG is updated.
     * @param cb - The callback function.
     */
    addUpdateCallback(cb) {
        this.updateCallbacks.push(cb);
    }
    /**
     * Remove a callback function previously added to the list of functions to call.
     * @param cb - The callback function.
     */
    removeUpdateCallback(cb) {
        const index = this.updateCallbacks.findIndex((elem) => {
            return elem === cb;
        });
        if (index !== -1) {
            this.updateCallbacks.splice(index, 1);
        }
    }
    /**
     * Set listeners on the body element for global events.
     */
    setViewEventHandlers() {
        document.body.addEventListener('keydown', (evt) => {
            switch (evt.key) {
                case 'h':
                    for (const container of document.getElementsByClassName('neon-container')) {
                        container.style.visibility = 'hidden';
                    }
                    break;
                default: break;
            }
        });
        document.body.addEventListener('keyup', (evt) => {
            switch (evt.key) {
                case 'h':
                    for (const container of document.getElementsByClassName('neon-container')) {
                        container.style.visibility = '';
                    }
                    break;
                default: break;
            }
        });
    }
    /**
     * Use the IIIF manifest to create a map between IIIF canvases and page indexes.
     * @param manifest - The IIIF manifest object.
     */
    parseManifest(manifest) {
        this.indexMap.clear();
        for (const sequence of manifest.sequences) {
            for (const canvas of sequence.canvases) {
                this.indexMap.set(sequence.canvases.indexOf(canvas), canvas['@id']);
            }
        }
    }
    /**
     * @returns The name of the active page/canvas combined with the manuscript name.
     */
    getPageName() {
        const manuscriptName = this.diva.settings.manifest.itemTitle;
        const pageName = this.diva.settings.manifest.pages[this.getCurrentPage()].l;
        return manuscriptName + ' \u2014 ' + pageName;
    }
}
exports.default = DivaView;


/***/ }),

/***/ "./src/InfoModule.ts":
/*!***************************!*\
  !*** ./src/InfoModule.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** @module InfoModule */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const LocalSettings_1 = __webpack_require__(/*! ./utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * Map of contours to neume names.
 */
const neumeGroups = new Map([['', 'Punctum'], ['u', 'Pes'], ['d', 'Clivis'], ['uu', 'Scandicus'], ['ud', 'Torculus'], ['du', 'Porrectus'], ['s', 'Distropha'], ['ss', 'Tristopha'],
    ['sd', 'Pressus'], ['dd', 'Climacus'], ['ddu', 'ClimacusResupinus'], ['udu', 'TorculusResupinus'], ['dud', 'PorrectusFlexus'],
    ['udd', 'PesSubpunctis'], ['uud', 'ScandicusFlexus'], ['uudd', 'ScandicusSubpunctis'], ['dudd', 'PorrectusSubpunctis']]);
function startInfoVisibility() {
    const neumeInfo = document.getElementById('neume_info');
    neumeInfo.innerHTML =
        `<div class="info-bubble-container">
      <div class="info-bubble-header">Element Info</div>
      <div class="info-bubble-body"><i>Hover over any element to see its metadata</i></div>
    </div>`;
    document.getElementById('neume_info').setAttribute('style', 'display: none');
}
/**
 * Update the visibility of infoBox
 */
function updateInfoVisibility() {
    const neumeInfo = document.getElementById('neume_info');
    const displayAllBtn = document.getElementById('display-all-btn');
    const displayInfo = document.getElementById('displayInfo');
    const displayBBoxes = document.getElementById('displayBBox');
    const displayText = document.getElementById('displayText');
    // save setting to localStorage
    LocalSettings_1.setSettings({ displayInfo: displayInfo.checked });
    if (displayInfo.checked) {
        neumeInfo.setAttribute('style', '');
        // scroll neume info into view
        //neumeInfo.scrollIntoView({ behavior: 'smooth' });
        // if this is the 3rd option to be checked (all three are selected),
        // set "Display/Hide All" button to "Hide All".
        if ((displayInfo === null || displayInfo === void 0 ? void 0 : displayInfo.checked) && (displayBBoxes === null || displayBBoxes === void 0 ? void 0 : displayBBoxes.checked) && (displayText === null || displayText === void 0 ? void 0 : displayText.checked)) {
            displayAllBtn.classList.add('selected');
            displayAllBtn.innerHTML = 'Hide All';
        }
    }
    else {
        neumeInfo.setAttribute('style', 'display: none');
        // if "Display/Hide All" button is in "Hide All" mode, set it to "Display All" mode
        if (displayAllBtn.classList.contains('selected')) {
            displayAllBtn.classList.remove('selected');
            displayAllBtn.innerHTML = 'Display All';
        }
    }
}
/**
 * Load displayInfo settings from localStorage
 */
function loadSettings() {
    const { displayInfo } = LocalSettings_1.getSettings();
    document.querySelector('#displayInfo').checked = displayInfo;
}
/**
 * Set listener on info visibility checkbox.
 */
function setInfoControls() {
    startInfoVisibility();
    loadSettings();
    updateInfoVisibility();
    document.getElementById('displayInfo').addEventListener('click', updateInfoVisibility);
}
/**
 * Class that manages getting information for elements in Neon from Verovio.
 */
class InfoModule {
    /**
     * A constructor for an InfoModule.
     * @param {NeonView} neonView - The NeonView parent.
     */
    constructor(neonView) {
        this.neonView = neonView;
        // Add info box enable/disable check box
        const checkboxesContainer = document.getElementById('display-single-container');
        const label = document.createElement('label');
        label.classList.add('checkbox-container', 'side-panel-btn');
        label.textContent = 'Info';
        const input = document.createElement('input');
        input.id = 'displayInfo';
        input.classList.add('checkbox');
        input.type = 'checkbox';
        input.checked = false;
        label.appendChild(input);
        checkboxesContainer.prepend(label);
        this.neonView.view.addUpdateCallback(this.resetInfoListeners.bind(this));
        setInfoControls();
        this.resetInfoListeners();
    }
    /**
     * Set listeners for the InfoModule.
     * Trigger action on mouseover of specific musical element classes.
     */
    infoListeners() {
        try {
            document.getElementsByClassName('active-page')[0]
                .querySelectorAll('.neume,.custos,.clef,.accid,.divLine')
                .forEach(node => {
                node.addEventListener('mouseover', this.updateInfo.bind(this));
            });
        }
        catch (e) { }
    }
    /**
     * Stop listeners for the InfoModule.
     */
    stopListeners() {
        document.querySelectorAll('.neume,.custos,.clef,.accid,.divLine').forEach(node => {
            node.removeEventListener('mouseover', this.updateInfo.bind(this));
        });
    }
    /**
     * Restart listeners for the InfoModule.
     */
    resetInfoListeners() {
        this.stopListeners();
        this.infoListeners();
    }
    /**
     * Get updated info for the calling element based on its element type.
     * Makes calls to NeonCore to get the information necessary.
     */
    async updateInfo(event) {
        // For now, since Clefs do not have their own element tag in mei4, there is not a way to select the <g> element
        // So we will simply return if ID does not exist for now
        const id = event.currentTarget.id;
        if (id === '') {
            Array.from(document.getElementById('neume_info').children).forEach(child => {
                child.remove();
            });
            console.log('No id!');
            return;
        }
        const element = document.getElementById(id);
        const classRe = /neume|nc|clef|custos|staff|liquescent|accid|divLine/;
        const elementClass = element.getAttribute('class').match(classRe)[0];
        let body = '';
        let attributes;
        // Gets the pitches depending on element type and
        switch (elementClass) {
            case 'neume':
                // Select neume components of selected neume
                const ncs = element.querySelectorAll('.nc');
                if (ncs.length === 1) {
                    const attr = await this.neonView.getElementAttr(ncs[0].id, this.neonView.view.getCurrentPageURI());
                    if (attr.curve === 'a' || attr.curve === 'c') {
                        let pitches = await this.getPitches(ncs);
                        pitches = pitches.trim().toUpperCase();
                        body = 'Shape: Liquescent' + '\r\n' +
                            'Pitch(es): ' + pitches;
                        break;
                    }
                }
                let contour = await this.getContour(ncs);
                if (ncs.length === 1) {
                    const attr = await this.neonView.getElementAttr(ncs[0].id, this.neonView.view.getCurrentPageURI());
                    if (attr.tilt === 's') {
                        let pitches = await this.getPitches(ncs);
                        pitches = pitches.trim().toUpperCase();
                        body = 'Shape: Virga \r\n' +
                            'Pitch(es): ' + pitches;
                        break;
                    }
                    else if (attr.tilt === 'n') {
                        let pitches = await this.getPitches(ncs);
                        pitches = pitches.trim().toUpperCase();
                        body = 'Shape: Reversed Virga \r\n' +
                            'Pitch(es): ' + pitches;
                        break;
                    }
                }
                if (contour === 'Clivis') {
                    const attr = await this.neonView.getElementAttr(ncs[0].id, this.neonView.view.getCurrentPageURI());
                    if (attr.ligated) {
                        contour = 'Ligature';
                    }
                }
                let pitches = await this.getPitches(ncs);
                pitches = pitches.trim().toUpperCase();
                body = 'Shape: ' + (contour === undefined ? 'Compound' : contour) + '\r\n' +
                    'Pitch(es): ' + pitches;
                break;
            case 'custos':
                attributes = await this.neonView.getElementAttr(id, this.neonView.view.getCurrentPageURI());
                body += 'Pitch: ' + (attributes['pname']).toUpperCase() + attributes['oct'];
                break;
            case 'accid':
                attributes = await this.neonView.getElementAttr(id, this.neonView.view.getCurrentPageURI());
                let type = '';
                if ((attributes['accid']).toUpperCase() == 'F') {
                    type = 'Flat';
                }
                else if ((attributes['accid']).toUpperCase() == 'N') {
                    type = 'Natural';
                }
                body += 'Accid Type: ' + type;
                break;
            case 'clef':
                attributes = await this.neonView.getElementAttr(id, this.neonView.view.getCurrentPageURI());
                body += 'Shape: ' + attributes['shape'] + '\r\n' +
                    'Line: ' + attributes['line'];
                break;
            case 'divLine':
                attributes = await this.neonView.getElementAttr(id, this.neonView.view.getCurrentPageURI());
                body += 'DivLine Type: ' + attributes['form'];
                break;
            default:
                body += 'nothing';
                break;
        }
        body = `Type: ${elementClass}\n${body}`;
        this.updateInfoModule(body);
    }
    /**
     * Get the individual pitches of a neume.
     * @param ncs - Neume components in the neume.
     * @returns Space separated pitches of the neume components in order.
     */
    async getPitches(ncs) {
        let pitches = '';
        for (const nc of ncs) {
            const attributes = await this.neonView.getElementAttr(nc.id, this.neonView.view.getCurrentPageURI());
            pitches += attributes['pname'] + attributes['oct'] + ' ';
        }
        return pitches;
    }
    /**
     * Get the contour of a neume.
     * @param ncs - Neume components in the neume.
     */
    async getContour(ncs) {
        let contour = '';
        let previous = null;
        for (const nc of ncs) {
            const attributes = await this.neonView.getElementAttr(nc.id, this.neonView.view.getCurrentPageURI());
            if (previous !== null) {
                if (previous['oct'] > attributes['oct']) {
                    contour += 'd';
                }
                else if (previous['oct'] < attributes['oct']) {
                    contour += 'u';
                }
                else {
                    if (this.pitchNameToNum(previous['pname']) < this.pitchNameToNum(attributes['pname'])) {
                        contour += 'u';
                    }
                    else if (this.pitchNameToNum(previous['pname']) > this.pitchNameToNum(attributes['pname'])) {
                        contour += 'd';
                    }
                    else {
                        contour += 's';
                    }
                }
            }
            previous = attributes;
        }
        if (neumeGroups.get(contour) === undefined) {
            console.warn('Unknown contour: ' + contour);
        }
        return neumeGroups.get(contour);
    }
    /**
     * Show and update the info box.
     * @param body - The info box contents.
     */
    updateInfoModule(body) {
        document.getElementsByClassName('info-bubble-body')[0].innerText = body;
        if (document.getElementById('displayInfo').checked) {
            document.getElementsByClassName('info-bubble-container')[0].style.display = '';
        }
    }
    /**
     * Convert a pitch name (a-g) to a number (where c is 1, d is 2, ...and b is 7).
     * @param pname - The pitch name.
     * @returns Equivalent pitch name as a number from 1 to 7.
     */
    pitchNameToNum(pname) {
        switch (pname) {
            case 'c':
                return 1;
            case 'd':
                return 2;
            case 'e':
                return 3;
            case 'f':
                return 4;
            case 'g':
                return 5;
            case 'a':
                return 6;
            case 'b':
                return 7;
            default:
                console.log('Unknown pitch name');
        }
    }
    /**
     * Find the contour of an neume grouping based on the grouping name.
     * @param value - The contour name.
     * @returns Best guess name of the neume shape.
     */
    getContourByValue(value) {
        for (const [cont, v] of neumeGroups.entries()) {
            if (v === value) {
                return cont;
            }
        }
    }
}
exports.default = InfoModule;


/***/ }),

/***/ "./src/NeonCore.ts":
/*!*************************!*\
  !*** ./src/NeonCore.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const ConvertMei_1 = __webpack_require__(/*! ./utils/ConvertMei */ "./src/utils/ConvertMei.ts");
const Validation = __webpack_require__(/*! ./Validation */ "./src/Validation.ts");
const VerovioWrapper_1 = __webpack_require__(/*! ./VerovioWrapper */ "./src/VerovioWrapper.ts");
const random_1 = __webpack_require__(/*! ./utils/random */ "./src/utils/random.ts");
const pouchdb_1 = __webpack_require__(/*! pouchdb */ "./node_modules/pouchdb/lib/index-browser.es.js");
/**
 * The core component of Neon. This manages the database,
 * the verovio toolkit, the cache, and undo/redo stacks.
 */
class NeonCore {
    /**
     * Constructor for NeonCore
     */
    constructor(manifest) {
        this.verovioWrapper = new VerovioWrapper_1.default();
        //Validation.init();
        /**
         * Stacks of previous MEI files representing actions that can be undone for each page.
         * @type {Map.<string, Array.<string>>}
         */
        this.undoStacks = new Map();
        /**
         * Stacks of previous MEI files representing actions that can be redone for each page.
         * @type {Map.<string, Array.<string>>}
         */
        this.redoStacks = new Map();
        this.neonCache = new Map();
        this.parser = new DOMParser();
        this.db = new pouchdb_1.default('Neon');
        this.blankPages = [];
        // Add each MEI to the database
        this.manifest = manifest;
        this.annotations = manifest.mei_annotations;
        this.lastPageLoaded = '';
    }
    getAnnotations() { return this.annotations; }
    /**
     * Initialize the PouchDb database based on the provided manifest.
     * If a newer version already exists in the database, this will
     * not update the database unless forced.
     * @param force - If a database update should be forced.
     */
    async initDb(force = false) {
        const response = await new Promise((resolve, reject) => {
            this.db.get(this.manifest['@id']).catch(err => {
                if (err.name === 'not_found') {
                    // This is a new document.
                    const doc = {
                        _id: this.manifest['@id'],
                        timestamp: this.manifest.timestamp,
                        image: this.manifest.image,
                        title: this.manifest.title,
                        annotations: []
                    };
                    this.annotations.forEach(annotation => {
                        doc.annotations.push(annotation.id);
                    });
                    return doc;
                }
                else {
                    console.error(err);
                    return reject(err);
                }
            }).then(async (doc) => {
                // Check if doc timestamp is newer than manifest
                const docTime = (new Date(doc.timestamp)).getTime();
                // Format timestamp to specific ISO 8601 variant because
                // Safari requires timezone offsets to be +/-HH:MM and fails on
                // the equally valid +/-HHMM. This doesn't need to be applied to
                // the browser generated timestamp since that always generates a
                // timestamp in UTC with the Z ending.
                const timeZoneRegexp = /(.+[-+\u2212]\d\d)(\d\d)$/;
                const manTime = (timeZoneRegexp.test(this.manifest.timestamp)) ?
                    (new Date(this.manifest.timestamp.replace(timeZoneRegexp, '$1:$2'))).getTime()
                    : (new Date(this.manifest.timestamp)).getTime();
                if (docTime > manTime) {
                    if (!force) {
                        // Fill annotations list with db annotations
                        this.annotations = [];
                        const promises = doc.annotations.map((id) => {
                            return new Promise((res) => {
                                this.db.get(id).then((annotation) => {
                                    this.annotations.push({
                                        id: annotation._id,
                                        type: 'Annotation',
                                        body: annotation.body,
                                        target: annotation.target
                                    });
                                    res('');
                                }).catch(err => {
                                    console.error(err);
                                    res('');
                                });
                            });
                        });
                        await Promise.all(promises);
                        return resolve(false);
                    }
                }
                for (const annotation of this.annotations) {
                    // Add annotations to database
                    await this.db.get(annotation.id).catch(err => {
                        if (err.name === 'not_found') {
                            return {
                                _id: annotation.id
                            };
                        }
                        else {
                            console.error(err);
                            return reject(err);
                        }
                    }).then((newAnnotation) => {
                        newAnnotation.body = annotation.body;
                        newAnnotation.target = annotation.target;
                        return this.db.put(newAnnotation);
                    }).catch(err => {
                        reject(err);
                        console.error(err);
                    });
                }
                return this.db.put(doc);
            }).then(() => {
                return resolve(true);
            }).catch(err => {
                reject(err);
                console.error(err);
            });
        });
        return response;
    }
    /**
     * Load a page into the verovio toolkit. This will fetch the
     * page from the cache or from the database.
     * @param pageURI - The URI of the selected page.
     */
    loadPage(pageURI) {
        return new Promise((resolve, reject) => {
            // Was this already the loaded page?
            if (this.lastPageLoaded === pageURI && this.neonCache.has(pageURI)) {
                resolve(this.neonCache.get(pageURI));
            }
            else if (this.neonCache.has(pageURI)) {
                this.loadData(pageURI, this.neonCache.get(pageURI).mei).then(() => {
                    resolve(this.neonCache.get(pageURI));
                });
                // Do we know this page has no MEI content?
            }
            else if (this.blankPages.includes(pageURI)) {
                Validation.blankPage();
                const e = new Error('No MEI file for page ' + pageURI);
                e.name = 'missing_mei';
                reject(e);
            }
            else {
                // Find annotation
                const annotation = this.annotations.find(elem => {
                    return elem.target === pageURI;
                });
                if (annotation) {
                    window.fetch(annotation.body).then(response => {
                        if (response.ok) {
                            return response.text();
                        }
                        else {
                            throw new Error(response.statusText);
                        }
                    }).then(data => {
                        // Check if the MEI file is sb-based. If so, convert to staff-based.
                        if (data.match(/<sb .+>/)) {
                            data = ConvertMei_1.convertSbToStaff(data);
                        }
                        ConvertMei_1.checkOutOfBoundsGlyphs(data);
                        this.loadData(pageURI, data).then(() => {
                            resolve(this.neonCache.get(pageURI));
                        });
                    }).catch(err => {
                        reject(err);
                    });
                }
                else {
                    // If no annotation was found treat the page as
                    // being blank
                    Validation.blankPage();
                    this.blankPages.push(pageURI);
                }
            }
        });
    }
    /**
     * Load data into the verovio toolkit and update the cache.
     * @param pageURI - The URI of the selected page.
     * @param data - The MEI of the page as a string.
     * @param dirty - If the cache entry should be marked as dirty.
     */
    loadData(pageURI, data, dirty = false) {
        Validation.sendForValidation(data);
        this.lastPageLoaded = pageURI;
        /* A promise is returned that will resolve to the result of the action.
         * However the value that is must return comes from the Web Worker and
         * information passed between the worker and main context much be in a
         * message. So an event handler is put on verovioWrapper for when a message
         * is receieved from the worker. Then a message is sent to the worker to
         * take an action. A response is sent back and the previously mentioned
         * event handler handles the response. Since it is defined within the
         * promise it has access to the necessary resolve function.
         */
        return new Promise((resolve) => {
            const message = {
                id: random_1.uuidv4(),
                action: 'renderData',
                mei: data
            };
            function handle(evt) {
                if (evt.data.id === message.id) {
                    const svg = this.parser.parseFromString(evt.data.svg, 'image/svg+xml').documentElement;
                    this.neonCache.set(pageURI, {
                        svg: svg,
                        mei: data,
                        dirty: dirty
                    });
                    evt.target.removeEventListener('message', handle);
                    resolve();
                }
            }
            this.verovioWrapper.addEventListener('message', handle.bind(this));
            this.verovioWrapper.postMessage(message);
        });
    }
    /**
     * Get the SVG for a specific page.
     * @param pageURI - The URI of the selected page.
     */
    getSVG(pageURI) {
        return new Promise((resolve, reject) => {
            this.loadPage(pageURI).then((entry) => {
                resolve(entry.svg);
            }).catch((err) => { reject(err); });
        });
    }
    /**
     * Get the MEI for a specific page.
     * @param pageURI - The URI of the selected page.
     */
    getMEI(pageURI) {
        return new Promise((resolve, reject) => {
            this.loadPage(pageURI).then((entry) => {
                resolve(entry.mei);
            }).catch((err) => { reject(err); });
        });
    }
    /**
     * Get musical element attributes from the verovio toolkit.
     * @param elementId - The unique ID of the musical element.
     * @param pageURI - The URI of the selected page.
     */
    getElementAttr(elementId, pageURI) {
        return new Promise((resolve) => {
            this.loadPage(pageURI).then(() => {
                const message = {
                    id: random_1.uuidv4(),
                    action: 'getElementAttr',
                    elementId: elementId
                };
                this.verovioWrapper.addEventListener('message', function handle(evt) {
                    if (evt.data.id === message.id) {
                        evt.target.removeEventListener('message', handle);
                        resolve(evt.data.attributes);
                    }
                });
                this.verovioWrapper.postMessage(message);
            });
        });
    }
    /**
     * Perform an editor action on a specific page.
     * @param action - The editor toolkit action object.
     * @param pageURI - The URI of the selected page.
     */
    edit(editorAction, pageURI) {
        let promise;
        if (this.lastPageLoaded === pageURI) {
            promise = Promise.resolve(this.neonCache.get(pageURI));
        }
        else {
            promise = this.loadPage(pageURI);
        }
        return new Promise((resolve) => {
            promise.then(entry => {
                // delete unnecessary SVG object reference;
                // otherwise, this is not garbage collected!
                entry.svg = null;
                const currentMEI = entry.mei;
                const message = {
                    id: random_1.uuidv4(),
                    action: 'edit',
                    editorAction: editorAction
                };
                function handle(evt) {
                    if (evt.data.id === message.id) {
                        if (evt.data.result) {
                            if (!this.undoStacks.has(pageURI)) {
                                this.undoStacks.set(pageURI, []);
                            }
                            this.undoStacks.get(pageURI).push(currentMEI);
                            this.redoStacks.set(pageURI, []);
                        }
                        evt.target.removeEventListener('message', handle);
                        this.updateCache(pageURI, true).then(() => { resolve(evt.data.result); });
                    }
                }
                this.verovioWrapper.addEventListener('message', handle.bind(this));
                this.verovioWrapper.postMessage(message);
            });
        });
    }
    /**
     * Update contents of the cache using information in verovio toolkit.
     * @param pageURI - Page to be updated in cache.
     * @param dirty - If the entry should be marked as dirty
     */
    updateCache(pageURI, dirty) {
        return new Promise((resolve) => {
            // Must get MEI and then get SVG then finish.
            let mei, svgText;
            const meiPromise = new Promise((resolve) => {
                const message = {
                    id: random_1.uuidv4(),
                    action: 'getMEI'
                };
                this.verovioWrapper.addEventListener('message', function handle(evt) {
                    if (evt.data.id === message.id) {
                        mei = evt.data.mei;
                        evt.target.removeEventListener('message', handle);
                        Validation.sendForValidation(mei);
                        resolve('');
                    }
                });
                this.verovioWrapper.postMessage(message);
            });
            const svgPromise = new Promise((resolve) => {
                const message = {
                    id: random_1.uuidv4(),
                    action: 'renderToSVG'
                };
                this.verovioWrapper.addEventListener('message', function handle(evt) {
                    if (evt.data.id === message.id) {
                        svgText = evt.data.svg;
                        evt.target.removeEventListener('message', handle);
                        resolve('');
                    }
                });
                this.verovioWrapper.postMessage(message);
            });
            meiPromise.then(() => { return svgPromise; }).then(() => {
                const svg = this.parser.parseFromString(svgText, 'image/svg+xml').documentElement;
                this.neonCache.set(pageURI, {
                    mei: mei,
                    svg: svg,
                    dirty: dirty
                });
                resolve();
            });
        });
    }
    /**
     * Get the edit info string from the verovio toolkit.
     * @param pageURI - The URI of the page to get the edit info string from.
     */
    info(pageURI) {
        let promise;
        if (this.lastPageLoaded === pageURI) {
            promise = Promise.resolve();
        }
        else {
            promise = this.loadPage(pageURI);
        }
        return new Promise((resolve) => {
            promise.then(() => {
                const message = {
                    id: random_1.uuidv4(),
                    action: 'editInfo'
                };
                this.verovioWrapper.addEventListener('message', function handle(evt) {
                    if (evt.data.id === message.id) {
                        evt.target.removeEventListener('message', handle);
                        resolve(evt.data.info);
                    }
                });
                this.verovioWrapper.postMessage(message);
            });
        });
    }
    /**
     * Undo the last action performed on a specific page.
     * @param pageURI - The URI of the selected page.
     * @returns If the action was undone.
     */
    undo(pageURI) {
        return new Promise((resolve) => {
            if (this.undoStacks.has(pageURI)) {
                const state = this.undoStacks.get(pageURI).pop();
                if (state !== undefined) {
                    this.getMEI(pageURI).then(mei => {
                        this.redoStacks.get(pageURI).push(mei);
                        return this.loadData(pageURI, state, true);
                    }).then(() => {
                        resolve(true);
                    });
                    return;
                }
            }
            resolve(false);
        });
    }
    /**
     * Redo the last action performed on a page.
     * @param pageURI - The page URI.
     * @returns If the action was redone.
     */
    redo(pageURI) {
        return new Promise((resolve) => {
            if (this.redoStacks.has(pageURI)) {
                const state = this.redoStacks.get(pageURI).pop();
                if (state !== undefined) {
                    this.getMEI(pageURI).then((mei) => {
                        this.undoStacks.get(pageURI).push(mei);
                        return this.loadData(pageURI, state, true);
                    }).then(() => {
                        resolve(true);
                    });
                    return;
                }
            }
            resolve(false);
        });
    }
    /**
     * Update the PouchDb database stored in the browser.
     * This is based on the data stored in the cache. To save time,
     * only entries marked as dirty will be updated.
     */
    async updateDatabase() {
        let updateTimestamp = false;
        for (const pair of this.neonCache) {
            const key = pair[0];
            const value = pair[1];
            if (value.dirty) {
                updateTimestamp = true;
                const index = this.annotations.findIndex(elem => { return elem.target === key; });
                // try to update server with PUT request (if applicable)
                // this is simpler than expecting a specific API on the server
                // and using POST requests, although that would be better if there
                // is ever a dedicated public server for Neon! At time of writing,
                // only dev/testing server accepts PUT requests.
                // only attempt if not a data URI
                let uri;
                if (!this.annotations[index].body.match(/^data:/)) {
                    await window.fetch(this.annotations[index].body, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/mei+xml' },
                        body: value.mei
                    }).then(response => {
                        if (response.ok) {
                            uri = this.annotations[index].body;
                        }
                        else {
                            uri = 'data:application/mei+xml;base64,' + window.btoa(value.mei);
                        }
                    }).catch(err => {
                        console.error(err);
                        console.warn('Falling back to data URI');
                        uri = 'data:application/mei+xml;base64,' + window.btoa(value.mei);
                    });
                }
                else {
                    uri = 'data:application/mei+xml;base64,' + window.btoa(value.mei);
                }
                // Update URI in annotations, database
                this.annotations[index].body = uri;
                await this.db.get(this.annotations[index].id).then((doc) => {
                    doc.body = uri;
                    return this.db.put(doc);
                }).then(() => {
                    value.dirty = false;
                }).catch(err => {
                    console.error(err);
                });
            }
        }
        if (updateTimestamp) {
            await this.db.get(this.manifest['@id']).then((doc) => {
                doc.timestamp = (new Date()).toISOString();
                return this.db.put(doc);
            }).catch(err => {
                console.error(err);
            });
        }
    }
    /** Completely remove the database. */
    async deleteDb() {
        const annotations = await this.db.get(this.manifest['@id'])
            .then((doc) => { return doc.annotations; });
        annotations.push(this.manifest['@id']);
        const promises = annotations.map((id) => {
            return new Promise(res => {
                this.db.get(id)
                    .then(doc => { return this.db.remove(doc); })
                    .then(() => res());
            });
        });
        return Promise.all(promises);
    }
}
exports.default = NeonCore;


/***/ }),

/***/ "./src/NeonView.ts":
/*!*************************!*\
  !*** ./src/NeonView.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const NeonCore_1 = __webpack_require__(/*! ./NeonCore */ "./src/NeonCore.ts");
const Validation = __webpack_require__(/*! ./Validation */ "./src/Validation.ts");
const NeonManifest_1 = __webpack_require__(/*! ./utils/NeonManifest */ "./src/utils/NeonManifest.ts");
const Template_1 = __webpack_require__(/*! ./utils/template/Template */ "./src/utils/template/Template.ts");
const ModalWindow_1 = __webpack_require__(/*! ./utils/ModalWindow */ "./src/utils/ModalWindow.ts");
const LocalSettings_1 = __webpack_require__(/*! ./utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * NeonView class. Manages the other modules of Neon and communicates with
 * NeonCore.
 */
class NeonView {
    /**
     * Constructor for NeonView. Sets mode and passes constructors.
     */
    constructor(params) {
        if (!NeonManifest_1.parseManifest(params.manifest)) {
            console.error('Unable to parse the manifest');
        }
        this.params = params;
        this.manifest = params.manifest;
    }
    /**
     * Set up Neon for any provided editing modules.
     */
    setupEdit(params) {
        // Set up and start the correct editing mode
        if (params.NeumeEdit !== undefined) {
            this.NeumeEdit = new params.NeumeEdit(this);
        }
        if (params.TextView !== undefined) {
            this.textView = new params.TextView(this);
            if (params.TextEdit !== undefined) {
                this.TextEdit = new params.TextEdit(this);
            }
        }
    }
    /**
     * Start Neon
     */
    start() {
        /* this.core.db.info().then((info) => {
          if (info.doc_count === 0) {
            this.core.initDb().then(() => { this.updateForCurrentPage(); });
          } else {
            Notification.queueNotification('Existing database found. Revert to start from the beginning.');
            this.updateForCurrentPage();
          }
        }); */
        Template_1.default(this).then(() => {
            // load the components
            this.localSettings = new LocalSettings_1.default(this.manifest['@id']);
            this.view = new this.params.View(this, this.params.Display, this.manifest.image);
            this.name = this.manifest.title;
            this.core = new NeonCore_1.default(this.manifest);
            this.info = new this.params.Info(this);
            this.modal = new ModalWindow_1.ModalWindow(this);
            Validation.init(this); // initialize validation
            this.setupEdit(this.params);
            return this.core.initDb();
        }).then(() => {
            // load the SVG
            return this.updateForCurrentPage(true);
        }).then(() => {
            // add the event listeners dependent on the SVG
            this.view.onSVGLoad();
        });
    }
    /**
     * Get the current page from the loaded view and then display the
     * most up to date SVG.
     */
    updateForCurrentPage(delay = false) {
        const pageNo = this.view.getCurrentPage();
        return this.view.changePage(pageNo, delay);
    }
    /**
     * Redo an action performed on the current page (if there is one).
     */
    redo() {
        return this.core.redo(this.view.getCurrentPageURI());
    }
    /**
     * Undo the last action performed on the current page (if there is one).
     */
    undo() {
        return this.core.undo(this.view.getCurrentPageURI());
    }
    /**
     * Get the mode Neon is in.
     * @returns Value is "viewer", "insert", or "edit".
     */
    getUserMode() {
        if (this.NeumeEdit !== undefined) {
            return this.NeumeEdit.getUserMode();
        }
        else if (this.TextEdit !== undefined) {
            return 'edit';
        }
        else {
            return 'viewer';
        }
    }
    /**
     * Attempt to perform an editor action.
     * @param action - The editor toolkit action object.
     * @param pageURI - The URI of the page to perform the action on
     */
    edit(action, pageURI) {
        return this.core.edit(action, pageURI);
    }
    /**
     * Get the attributes for a specific musical element.
     * @param elementId - The unique ID of the musical element.
     * @param pageURI - The URI of the page the element is found on.
     */
    getElementAttr(elementID, pageURI) {
        return this.core.getElementAttr(elementID, pageURI);
    }
    /**
     * Updates browser database and creates JSON-LD save file.
     * @returns The contents of this file.
     */
    export() {
        return (new Promise((resolve, reject) => {
            this.core.updateDatabase().then(() => {
                this.manifest['mei_annotations'] = this.core.getAnnotations();
                this.manifest.timestamp = (new Date()).toISOString();
                const data = new window.Blob([JSON.stringify(this.manifest, null, 2)], { type: 'application/ld+json' });
                const reader = new FileReader();
                reader.addEventListener('load', () => {
                    resolve(reader.result);
                });
                reader.readAsDataURL(data);
            }).catch(err => { reject(err); });
        }));
    }
    /**
     * Save the current state to the browser database.
     */
    save() {
        return this.core.updateDatabase();
    }
    /**
     * Deletes the local database of the loaded MEI file(s).
     */
    deleteDb() {
        return this.core.deleteDb();
    }
    /**
     * Get the page's MEI file encoded as a data URI.
     * @param pageNo - The URI specifying the page.
     * @returns A [Data URI](https://en.wikipedia.org/wiki/Data_URI_scheme).
     */
    getPageURI(pageNo) {
        if (pageNo === undefined) {
            pageNo = this.view.getCurrentPageURI();
        }
        return new Promise((resolve) => {
            this.core.getMEI(pageNo).then((mei) => {
                resolve('data:application/mei+xml;charset=utf-8,' + encodeURIComponent(mei));
            });
        });
    }
    /**
     * Get the page's MEI file as a string.
     * @param pageNo - The identifying URI of the page.
     */
    getPageMEI(pageNo) {
        return this.core.getMEI(pageNo);
    }
    /**
     * Get the page's SVG.
     * @param pageNo - The identifying URI of the page.
     */
    getPageSVG(pageNo) {
        return this.core.getSVG(pageNo);
    }
}
exports.default = NeonView;


/***/ }),

/***/ "./src/SingleView/SingleView.ts":
/*!**************************************!*\
  !*** ./src/SingleView/SingleView.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const DisplayControls_1 = __webpack_require__(/*! ../DisplayPanel/DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const Zoom_1 = __webpack_require__(/*! ./Zoom */ "./src/SingleView/Zoom.ts");
const d3 = __webpack_require__(/*! d3 */ "d3");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * A view module for displaying a single page of a manuscript.
 */
class SingleView {
    /**
     * Constructor for SingleView.
     * @param image - The URI to the background image for the page.
     */
    constructor(neonView, panel, image) {
        this.neonView = neonView;
        this.container = document.getElementById('container');
        this.updateCallbacks = new Array(0);
        // Group will contain the image and the rendered SVG
        this.group = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        this.group.id = 'svg_group';
        this.group.setAttribute('height', window.innerHeight.toString());
        this.group.setAttribute('width', '100%');
        this.bg = document.createElementNS('http://www.w3.org/2000/svg', 'image');
        this.bg.id = 'bgimg';
        this.bg.classList.add('background');
        this.bg.setAttribute('x', '0');
        this.bg.setAttribute('y', '0');
        const reader = new FileReader();
        fetch(image).then(result => {
            if (result.ok) {
                reader.addEventListener('load', () => {
                    this.bg.setAttributeNS('http://www.w3.org/1999/xlink', 'href', reader.result.toString());
                    const bbox = this.bg.getBBox();
                    if (!this.group.hasAttribute('viewBox')) {
                        /*
                          If the SVG does not have a viewBox, load the previous viewBox
                          value from localStorage. If none has been stored (viewBox is null),
                          set it to the default value of the width and height of the background image
                          
                          Note: an SVG's viewBox gives the "box" that the user can see the SVG through.
                          The user may be zoomed into a very specific section of the SVG, in which case the
                          viewBox should give coordinates of that specific box.
            
                          See more: https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox
                        */
                        let { viewBox } = LocalSettings_1.getSettings();
                        if (!viewBox)
                            viewBox = '0 0 ' + bbox.width.toString() + ' ' + bbox.height.toString();
                        this.group.setAttribute('viewBox', viewBox);
                    }
                });
                return result.blob();
            }
        }).then(blob => {
            reader.readAsDataURL(blob);
        });
        // It is better named svg, to avoid confusion with the actual MEI file.
        this.svg = document.createElementNS('http://www.w3.org/svg', 'svg');
        this.svg.id = 'mei_output';
        this.svg.classList.add('neon-container', 'active-page');
        this.group.appendChild(this.bg);
        this.group.appendChild(this.svg);
        this.container.appendChild(this.group);
        this.zoomHandler = new Zoom_1.default();
        this.displayPanel = new panel(this, 'neon-container', 'background', this.zoomHandler);
        this.pageURI = image;
        document.getElementById('loading').style.display = 'none';
    }
    onSVGLoad() {
        this.setViewEventHandlers();
        this.displayPanel.setDisplayListeners();
    }
    /**
     * Update the SVG being displayed.
     * @param svg - New rendered SVG to use.
     */
    updateSVG(svg) {
        this.group.replaceChild(svg, this.svg);
        this.svg = svg;
        this.svg.id = 'mei_output';
        this.svg.classList.add('neon-container', 'active-page');
        const height = parseInt(this.svg.getAttribute('height'));
        const width = parseInt(this.svg.getAttribute('width'));
        this.bg.setAttribute('height', height.toString());
        this.bg.setAttribute('width', width.toString());
        const { viewBox } = LocalSettings_1.getSettings();
        if (!viewBox)
            this.group.setAttribute('viewBox', '0 0 ' + width + ' ' + height);
        else
            this.group.setAttribute('viewBox', viewBox);
        DisplayControls_1.updateHighlight();
        this.resetTransformations();
        this.updateCallbacks.forEach(callback => callback());
    }
    /**
     * Change to a certain page
     * Since there is only one page, this is essentially a wrapper for updateSVG
     */
    async changePage(_page, _delay) {
        const svg = await this.neonView.getPageSVG(this.getCurrentPageURI());
        this.updateSVG(svg);
    }
    /**
     * Add a callback to the list of those be called when the page updates.
     * @param cb - The callback function.
     */
    addUpdateCallback(cb) {
        this.updateCallbacks.push(cb);
    }
    /**
     * Remove a callback from the list of callbacks if it is part of the list.
     * @param cb - The callback function.
     */
    removeUpdateCallback(cb) {
        const index = this.updateCallbacks.findIndex((elem) => {
            return elem === cb;
        });
        if (index !== -1) {
            this.updateCallbacks.splice(index, 1);
        }
    }
    /**
     * Reset the transformations that have been applied to the SVG upon update.
     */
    resetTransformations() {
        this.displayPanel.zoomHandler.restoreTransformation();
        DisplayControls_1.setOpacityFromSlider();
        DisplayControls_1.setBgOpacityFromSlider();
    }
    /**
     * @returns The zero-indexed number of the current page. This will always be zero.
     */
    getCurrentPage() {
        return 0;
    }
    /**
     * @returns The URI of the page.
     */
    getCurrentPageURI() {
        return this.pageURI;
    }
    /**
     * Set event handlers for the view and display panel.
     */
    setViewEventHandlers() {
        document.body.addEventListener('keydown', (evt) => {
            switch (evt.key) {
                case 'Shift':
                    d3.select('#svg_group').on('.drag', null);
                    d3.select('#svg_group').call(d3.drag().on('start', this.displayPanel.zoomHandler.startDrag.bind(this.displayPanel.zoomHandler))
                        .on('drag', this.displayPanel.zoomHandler.dragging.bind(this.displayPanel.zoomHandler)));
                    break;
                case 'h':
                    document.getElementById('mei_output').setAttribute('visibility', 'hidden');
                    break;
                default: break;
            }
        });
        document.body.addEventListener('keyup', (evt) => {
            switch (evt.key) {
                case 'Shift':
                    d3.select('#svg_group').on('.drag', null);
                    if (this.neonView.getUserMode() !== 'viewer') {
                        this.neonView.NeumeEdit.setSelectListeners();
                    }
                    break;
                case 'h':
                    document.getElementById('mei_output').setAttribute('visibility', 'visible');
                    break;
                default: break;
            }
        });
        d3.select('#container').on('touchstart', () => {
            if (d3.event.touches.length === 2) {
                this.displayPanel.zoomHandler.startDrag();
                d3.select('#container').on('touchmove', this.displayPanel.zoomHandler.dragging.bind(this.displayPanel.zoomHandler));
                d3.select('#container').on('touchend', () => {
                    d3.select('#container').on('touchmove', null);
                });
            }
        });
        d3.select('#container').on('wheel', this.displayPanel.zoomHandler.scrollZoom.bind(this.displayPanel.zoomHandler), false);
        // Update height of container based on window
        window.onresize = () => {
            const newHeight = window.innerHeight;
            const container = document.getElementById('container');
            if (newHeight > Number(container.getAttribute('height'))) {
                container.setAttribute('height', newHeight.toString());
            }
        };
    }
    /**
     * @returns A human readable name for the page. Used for downloads.
     */
    getPageName() {
        return this.neonView.name;
    }
}
exports.default = SingleView;


/***/ }),

/***/ "./src/SingleView/Zoom.ts":
/*!********************************!*\
  !*** ./src/SingleView/Zoom.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.ZoomHandler = exports.ViewBox = void 0;
const d3 = __webpack_require__(/*! d3 */ "d3");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
class ViewBox {
    /**
     * @param imageWidth - Width of the contained image.
     * @param imageHeight - Height of the contained image.
     */
    constructor(imageWidth, imageHeight) {
        this.minX = 0;
        this.minY = 0;
        this.width = imageWidth;
        this.height = imageHeight;
        this.imageWidth = imageWidth;
        this.imageHeight = imageHeight;
    }
    /**
     * Set values of the viewBox manually.
     * @param minX - top left x-coordinate of SVG
     * @param minY - top left y-coordinate of SVG
     * @param width - width of SVG
     * @param height - height of SVG
     */
    set(minX, minY, width, height) {
        this.minX = minX;
        this.minY = minY;
        this.width = width;
        this.height = height;
    }
    /** @returns Value for the viewBox parameter. */
    get() {
        return this.minX.toString() + ' ' + this.minY.toString() + ' ' +
            this.width + ' ' + this.height;
    }
    /** @param k - Factor to zoom to. */
    zoomTo(k) {
        const zoomHeight = (this.imageHeight / k);
        const zoomWidth = (this.imageWidth / k);
        this.width = zoomWidth;
        this.height = zoomHeight;
    }
    /** @returns Current zoom factor. */
    getZoom() {
        return this.imageWidth / this.width;
    }
    /**
     * Translate viewport.
     * @param xDiff - Amount to shift on x-axis.
     * @param yDiff - Amount to shift on y-axis.
     */
    translate(xDiff, yDiff) {
        this.minX += xDiff;
        this.minY += yDiff;
    }
}
exports.ViewBox = ViewBox;
class ZoomHandler {
    /**
     * Reset the zoom and pan of the SVG viewbox
     */
    resetZoomAndPan(resetSettings = true) {
        const bgimg = document.getElementById('bgimg');
        this.viewBox = new ViewBox(parseInt(bgimg.getAttribute('width')), parseInt(bgimg.getAttribute('height')));
        if (resetSettings) {
            this.updateSVGViewBox();
            LocalSettings_1.setSettings({ zoom: 100 });
        }
    }
    /**
     * @param k - Factor to zoom to.
     */
    zoomTo(k) {
        this.setViewBox();
        this.viewBox.zoomTo(k);
        this.updateSVGViewBox();
        LocalSettings_1.setSettings({ zoom: Math.floor(k * 100) });
    }
    /**
     * Translate the view box by relative coordinates.
    * @param xDiff - Amount to shift on x-axis.
    * @param yDiff - Amount to shift on y-axis.
    */
    translate(xDiff, yDiff) {
        this.setViewBox();
        this.viewBox.translate(xDiff, yDiff);
        this.updateSVGViewBox();
    }
    /**
     * Restore the view box to its position before the editor action.
     */
    restoreTransformation() {
        if (this.viewBox === undefined) {
            this.resetZoomAndPan(false);
        }
        else {
            this.updateSVGViewBox();
        }
    }
    /**
     * Set the view box of the SVG.
     */
    setViewBox() {
        if (this.viewBox === undefined) {
            const bgimg = document.getElementById('bgimg');
            this.viewBox = new ViewBox(parseInt(bgimg.getAttribute('width')), parseInt(bgimg.getAttribute('height')));
        }
        const rawViewBox = document.getElementById('svg_group')
            .getAttribute('viewBox')
            .split(' ');
        this.viewBox.set(parseInt(rawViewBox[0]), parseInt(rawViewBox[1]), parseInt(rawViewBox[2]), parseInt(rawViewBox[3]));
    }
    /**
     * Update the viewBox attribute of svg_group
     */
    updateSVGViewBox() {
        const viewBoxString = this.viewBox.get();
        document.getElementById('svg_group').setAttribute('viewBox', viewBoxString);
        LocalSettings_1.setSettings({ viewBox: viewBoxString });
    }
    startDrag() {
        const group = document.getElementById('svg_group');
        this.dragCoordinates = group.createSVGPoint();
        if (d3.event.type === 'touchstart') {
            // If drag is triggered by a touch event
            this.dragCoordinates.x = d3.event.touches[0].screenX;
            this.dragCoordinates.y = d3.event.touches[0].screenY;
        }
        else {
            // Otherwise triggered by a mouse click
            this.dragCoordinates.x = d3.event.x;
            this.dragCoordinates.y = d3.event.y;
        }
        this.matrix = group.getScreenCTM().inverse();
    }
    dragging() {
        const group = document.getElementById('svg_group');
        const newCoordinates = group.createSVGPoint();
        // Same kind of checking as in startDrag
        if (d3.event.type === 'touchmove') {
            newCoordinates.x = d3.event.touches[0].screenX;
            newCoordinates.y = d3.event.touches[0].screenY;
        }
        else if (d3.event.type === 'wheel' && d3.event.shiftKey === false) {
            if (this.matrix === undefined) {
                this.matrix = group.getScreenCTM().inverse();
            }
            if (this.dragCoordinates === undefined) {
                this.dragCoordinates = group.createSVGPoint();
            }
            this.dragCoordinates.x = d3.event.x;
            this.dragCoordinates.y = d3.event.y;
            newCoordinates.x = this.dragCoordinates.x - d3.event.deltaX;
            newCoordinates.y = this.dragCoordinates.y - d3.event.deltaY;
            d3.event.preventDefault();
        }
        else {
            newCoordinates.x = d3.event.x;
            newCoordinates.y = d3.event.y;
        }
        const newTransform = newCoordinates.matrixTransform(this.matrix);
        const dragTransform = this.dragCoordinates.matrixTransform(this.matrix);
        this.translate(-newTransform.x + dragTransform.x, -newTransform.y + dragTransform.y);
        this.dragCoordinates = newCoordinates;
    }
    scrollZoom() {
        if (d3.event.type !== 'wheel')
            return;
        if (!d3.event.shiftKey) {
            this.dragging();
            return;
        }
        const slider = document.getElementById('zoomSlider');
        this.setViewBox();
        const k = this.viewBox.getZoom();
        let newK = k - d3.event.deltaX / 100;
        if (newK < parseInt(slider.getAttribute('min')) / 100)
            newK = 0.25;
        if (newK > parseInt(slider.getAttribute('max')) / 100)
            newK = 4;
        this.zoomTo(newK);
        // Update zoom slider
        slider.value = (newK * 100).toString();
        document.getElementById('zoomOutput').value = String(Math.round(newK * 100));
    }
}
exports.ZoomHandler = ZoomHandler;
exports.default = ZoomHandler;


/***/ }),

/***/ "./src/SquareEdit/Contents.ts":
/*!************************************!*\
  !*** ./src/SquareEdit/Contents.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.hotkeysModal = exports.editTextModal = exports.groupingMenu = exports.clefActionContents = exports.splitActionContents = exports.accidActionContents = exports.layerElementInActionContents = exports.layerElementOutActionContents = exports.custosActionContents = exports.defaultSylActionContents = exports.defaultActionContents = exports.staffActionContents = exports.neumeActionContents = exports.defaultNeumeActionContents = exports.ncActionContents = exports.editControlsPanel = exports.insertControlsPanel = exports.insertTabHtml = void 0;
/**
 * HTML for each insert tab (neume, grouping, clef, system, and division).
 */
exports.insertTabHtml = {
    primitiveTab: `<p class="insert-element-container">
            <button id="punctum" class="side-panel-btn insertel smallel" aria-label="punctum" title="punctum"><img src="${"/Neon/"}assets/img/punctum.png" class="image"/></button>
        </p>
        <p class="insert-element-container">
            <button id="virga" class="side-panel-btn insertel smallel" aria-label="virga" title="virga"><img src="${"/Neon/"}assets/img/virga.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="virgaReversed" class="side-panel-btn insertel smallel" aria-label="Reversed Virga" title="Reversed Virga"><img src="${"/Neon/"}assets/img/virga_reversed.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="diamond" class="side-panel-btn insertel smallel" aria-label="inclinatum" title="inclinatum"><img src="${"/Neon/"}assets/img/diamond.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="custos" class="side-panel-btn insertel smallel" aria-label="custos" title="custos"><img src="${"/Neon/"}assets/img/custos.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="cClef" class="side-panel-btn insertel smallel" aria-label="C Clef" title=" C Clef"><img src="${"/Neon/"}assets/img/cClef.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="fClef" class="side-panel-btn insertel smallel" aria-label="F Clef" title="F Clef"><img src="${"/Neon/"}assets/img/fClef.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="liquescentA" class="side-panel-btn insertel smallel" aria-label="Liquescent A" title="Liquescent A"><img src="${"/Neon/"}assets/img/liquescentA.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="liquescentC" class="side-panel-btn insertel smallel" aria-label="Liquescent C" title="Liquescent C"><img src="${"/Neon/"}assets/img/liquescentC.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="flat" class="side-panel-btn insertel smallel" aria-label="Flat" title="Flat"><img src="${"/Neon/"}assets/img/accidFlat.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="natural" class="side-panel-btn insertel smallel" aria-label="Natural" title="Natural"><img src="${"/Neon/"}assets/img/accidNatural.png" class="image"></button>
        </p> 
        <p class="insert-element-container">
            <button id="divLineMaxima" class="side-panel-btn insertel smallel" aria-label="DivLine Maxima" title="DivLine Maxima"><img src="${"/Neon/"}assets/img/divisio.png" class="image"></button>
        </p>`,
    groupingTab: `<p class="insert-element-container">
            <button id="pes" class="side-panel-btn insertel smallel" aria-label="pes" title="pes"><img src="${"/Neon/"}assets/img/pes.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="clivis" class="side-panel-btn insertel smallel" aria-label="clivis" title="clivis"><img src="${"/Neon/"}assets/img/clivis.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="scandicus" class="side-panel-btn insertel smallel" aria-label="scandicus" title="scandicus"><img src="${"/Neon/"}assets/img/scandicus.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="climacus" class="side-panel-btn insertel smallel" aria-label="climacus" title="climacus"><img src="${"/Neon/"}assets/img/climacus.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="torculus" class="side-panel-btn insertel smallel" aria-label="toculus" title="toculus"><img src="${"/Neon/"}assets/img/torculus.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="porrectus" class="side-panel-btn insertel smallel" aria-label="porrectus" title="porrectus"><img src="${"/Neon/"}assets/img/porrectus.png" class="image"></button>
        </p>
        <p class="insert-element-container">
            <button id="pressus" class="side-panel-btn insertel smallel" aria-label="pressus" title="pressus"><img src="${"/Neon/"}assets/img/pressus.png" class="image"></button>
        </p>`,
    systemTab: `<p class="insert-element-container">
            <button id="staff" class="side-panel-btn insertel longel" aria-label="system" title="system"><img src="${"/Neon/"}assets/img/staff.png" class="image"></button>
        </p>
        <p>Click upper left and lower right corners of new staff.</p>`
    // divisionTab: "<p class='insert-element-container'>" +    
    // "<button id='smallDiv' class='side-panel-btn insertel tallel'><img src='" + __ASSET_PREFIX__ + 'assets/img/smalldiv.png "' class='image'/></button></p>" +
    // "<p class='insert-element-container'>" +
    //     "<button id='minorDiv' class='side-panel-btn insertel tallel'><img src='" + __ASSET_PREFIX__ + 'assets/img/minordiv.png"' class='image'/></button></p>" +
    //     "<p class='insert-element-container'>" +
    // "<button id='majorDiv' class='side-panel-btn insertel tallel'><img src='" + __ASSET_PREFIX__ + 'assets/img/majordiv.png "' class='image'/></button></p>" +
    // "<p class='insert-element-container'>" +
    // "<button id='finalDiv' class='side-panel-btn insertel tallel'><img src='" + __ASSET_PREFIX__ + 'assets/img/finaldiv.png "' class='image'/></button></p>"
};
/**
 * Structure of insert panel with basic grouping tabs.
 */
exports.insertControlsPanel = `<div class="panel-heading" id="insertMenu">
        <div class="panel-heading-title">INSERT</div>
        <svg class="icon is-pulled-right">
            <use id="toggleInsert" xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use>
        </svg>
    </div>
	<div class="panel-content-subsection first-subsection">
        <div id="insertContents" class="panel-contents" style="overflow-y: hidden;">
            <p class="panel-tabs">
                <a id="primitiveTab" class="insertTab">Primitive Elements</a>
                <a id="groupingTab" class="insertTab">Grouping</a>
                <a id="systemTab" class="insertTab">System</a>
            </p>
            <div id="insert_data"></div>
        </div>
    </div>`;
/**
 * Contents of edit panel with buttons.
 */
exports.editControlsPanel = `<div class="panel-heading" id="editMenu">
        <div class="panel-heading-title focused">EDIT</div>
        <svg class="icon is-pulled-right">
            <use id="toggleEdit" xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use>
        </svg>
    </div>
    <div id="editContents" class="panel-contents">
        <div class="panel-content-subsection first-subsection">
            <div id="selection-mode-container">
                <div class="panel-sub-title">Selection Mode:</div>
                <div id="selection-mode-btns-container"  class="right-side-panel-btns-container" style="overflow-x: auto;">
                    
                        <button class="side-panel-btn sel-by is-active" id="selBySyllable">Syllable</button>
                        <button class="side-panel-btn sel-by" id="selByNeume">Neume</button>
                        <button class="side-panel-btn sel-by" id="selByNc">Neume Component</button>
                        <button class="side-panel-btn sel-by" id="selByStaff">Staff</button>
                        <button class="side-panel-btn sel-by" id="selByLayerElement">Layer Element</button>
                    
                </div>
            </div>
        </div>

        <div id="display-actions-container">
                <div class="panel-content-subsection hidden">
                    <div id="moreEdit"></div>
                </div>
                <div class="panel-content-subsection hidden">
                    <div id="extraEdit"></div>
                </div>
                    <!--
                    * The extraEdit panel is added for edit options that have dropdown menus
                    * Like the Neume and Clef menus
                    * This is done because the moreEdit menu needs to have overflow for cases where it has lots of buttons
                    * But overflow ruins dropdown menus
                    -->
                <div class="panel-content-subsection hidden">
                    <div id="neumeEdit"></div>
                </div>
                <div class="panel-content-subsection">
                    <div id="undoRedo_controls"></div>
                </div>
        </div>
    </div>`;
/**
 * Contents of extra nc action menu.
 */
exports.ncActionContents = `<label>Change Head Shape:</label>
    <div id="drop_select" class="dropdown">
        <div class="dropdown-trigger">
            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">
                <span>Head Shapes</span>
                <svg class="icon"><use xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use></svg>
            </button>
        </div>
        <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
                <a id="Punctum" class="dropdown-item">Punctum</a>
                <a id="Virga" class="dropdown-item">Virga</a> 
                <a id="VirgaReversed" class="dropdown-item">Reversed Virga</a>
                <a id="LiquescentClockwise" class="dropdown-item">Liquescent C</a>
                <a id="LiquescentAnticlockwise" class="dropdown-item">Liquescent A</a>
                <a id="Inclinatum" class="dropdown-item">Inclinatum</a>
            </div>
        </div>
    </div>`;
/**
 * Contents of basic neume action menu.
 */
exports.defaultNeumeActionContents = `<div class="right-side-panel-btns-container">
        <button class="side-panel-btn" id="delete">Delete</button>
        <button class="side-panel-btn" id="split-neume">Split Neumes</button>
    </div>`;
/**
 * Contents of extra neume action menu.
 */
exports.neumeActionContents = `<label>Grouping Options:</label>
    <div class="right-side-panel-btns-container">
        <div id="drop_select" class="dropdown">
            <div class="dropdown-trigger">
                <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span>Groupings</span>
                    <svg class="icon">
                        <use xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use>
                    </svg>
                </button>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content scrollable-dropdown">
                <a id="Pes" class="dropdown-item grouping">Pes</a>
                <a id="PesSubpunctis" class="dropdown-item grouping">Pes Subpunctis</a>
                <a id="Clivis" class="dropdown-item grouping">Clivis</a>
                <a id="Scandicus" class="dropdown-item grouping">Scandicus</a>
                <a id="ScandicusFlexus" class="dropdown-item grouping">Scandicus Flexus</a>
                <a id="ScandicusSubpunctis" class="dropdown-item grouping">Scandicus Subpunctis</a>
                <a id="Climacus" class="dropdown-item grouping">Climacus</a>
                <a id="ClimacusResupinus" class="dropdown-item grouping">Climacus Resupinus</a>
                <a id="Torculus" class="dropdown-item grouping">Torculus</a>
                <a id="TorculusResupinus" class="dropdown-item grouping">Torculus Resupinus</a>
                <a id="Porrectus" class="dropdown-item grouping">Porrectus</a>
                <a id="PorrectusFlexus" class="dropdown-item grouping">Porrectus Flexus</a>
                <a id="PorrectusSubpunctis" class="dropdown-item grouping">Porrectus Subpunctis</a>
                <a id="Pressus" class="dropdown-item grouping">Pressus</a>
            </div>
        </div>
    </div>
    <button class="side-panel-btn" id="ungroupNcs">Ungroup</button>`;
/**
 * Contents of extra staff action menu.
 */
exports.staffActionContents = `<label>Merge Systems:</label>
    <button id="merge-systems" class="side-panel-btn">Merge</button>
    <button class="side-panel-btn" id="delete">Delete</button>`;
/**
 * Contents of default action menu.
 */
exports.defaultActionContents = `<div class="right-side-panel-btns-container">
        <button class="side-panel-btn" id="delete">Delete</button>
    </div>`;
/**
 * Contents of default action menu when selecting by syllable
 * Same as above except includes re-associate to nearest staff
 */
exports.defaultSylActionContents = `<button class="side-panel-btn" id="delete">Delete</button>
    <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>`;
/**
 * Contents of custos action menu.
 */
exports.custosActionContents = `<div class="right-side-panel-btns-container">
        <button class="side-panel-btn" id="delete">Delete</button>
        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>
    </div>`;
/**
 * Contents of layer element (outside syllable) action menu.
 */
exports.layerElementOutActionContents = `<div class="right-side-panel-btns-container">
        <button class="side-panel-btn" id="delete">Delete</button>
        <button class="side-panel-btn" id="insertToSyllable">Insert to nearest syllable</button>
        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>
    </div>`;
/**
 * Contents of layer element (inside syllable) action menu.
 */
exports.layerElementInActionContents = `<div class="right-side-panel-btns-container">
        <button class="side-panel-btn" id="delete">Delete</button>
        <button class="side-panel-btn" id="moveOuttaSyllable">Move out of syllable</button>
        <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>
    </div>`;
/**
 * Contents of accid action menu.
 */
exports.accidActionContents = `<label>Change Accidental:</label>
    <div id="drop_select" class="dropdown">
        <div class="dropdown-trigger"overflow="auto">
            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">
                <span>Shapes</span>
                <svg class="icon"><use xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use></svg>
            </button>
        </div>
        <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
                <a id="ChangeToFlat" class="dropdown-item">Flat</a>
                <a id="ChangeToNatural" class="dropdown-item">Natural</a>
            </div>
        </div>
    </div>`;
/**
 * Contents of split action menu.
 */
exports.splitActionContents = `<div>Split System:</div>
    <div id="split-system-btns-container" class="right-side-panel-btns-container">
        <button id="split-system" class="side-panel-btn">Split</button>
        <button id="reset-rotate" class="side-panel-btn">Reset Rotate</button>
        <button class="side-panel-btn" id="delete">Delete</button>
    </div>`;
/**
 * Contents of extra clef action menu.
 */
exports.clefActionContents = `<label>Change Clef Shape:&nbsp;</label>
    <div id="drop_select" class="dropdown">
        <div class="dropdown-trigger"overflow="auto">
            <button id="select-options" class="side-panel-btn" aria-haspopup="true" aria-controls="dropdown-menu">
                <span>Clef Shapes</span>
                <svg class="icon"><use xlink:href="${"/Neon/"}assets/img/icons.svg#dropdown-down"></use></svg>
            </button>
        </div>
        <div class="dropdown-menu" id="dropdown-menu" role="menu">
            <div class="dropdown-content">
                <a id="CClef" class="dropdown-item">C Clef</a>
                <a id="FClef" class="dropdown-item">F Clef</a>
            </div>
        </div>
    </div>`;
/**
 * HTML for grouping selection menu.
 */
exports.groupingMenu = {
    nc: `<div class="more-edit-btn panel-btn">
            <div class="right-side-panel-btns-container">
                <button class="side-panel-btn more-edit-btn" id="groupNcs">Group Neume Components</button>
                <button class="side-panel-btn" id="delete">Delete</button>
            </div>
        </div>`,
    neume: `<div class="more-edit-btn panel-btn">
            <div class="right-side-panel-btns-container">
                <button class="side-panel-btn" id="groupNeumes">Group Neumes</button>
                <button class="side-panel-btn" id="delete">Delete</button>
            </div>
        </div>`,
    syl: `<div class="more-edit-btn panel-btn">
            <div class="right-side-panel-btns-container">
                <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>
                <button class="side-panel-btn" id="delete">Delete</button>
                <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>
            </div>
		</div>`,
    ligatureNc: `<div class="more-edit-btn panel-btn">
                    <div class="right-side-panel-btns-container">
                        <button class="side-panel-btn" id="groupNcs">Group Neume Components</button>
                        <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>
                        <button class="side-panel-btn" id="delete">Delete</button>
                    </div>
                </div>`,
    ligature: `<div class="more-edit-btn panel-btn">
                <div class="right-side-panel-btns-container">
                    <button class="side-panel-btn" id="toggle-ligature">Toggle Ligature</button>
                    <button class="side-panel-btn" id="delete">Delete</button>
                </div>
            </div>`,
    splitSyllable: `<div class="more-edit-btn panel-btn">
                    <div class="right-side-panel-btns-container">
                        <button class="side-panel-btn" id="toggle-link">Toggle Linked Syllables</button>
                        <button class="side-panel-btn" id="delete">Delete</button>
                    </div>
                </div>`
};
/* BGINNING OF MODAL WINDOW CONTENT SECTION */
/**
 * HTML for Edit Syllable Text modal window
 */
exports.editTextModal = `<div class="neon-modal-window-content" id="neon-modal-window-content-edit-text">
        <label for="neon-modal-window-edit-text-input" id="neon-modal-window-edit-text-label">Enter Syllable Text:</label>
        <input id="neon-modal-window-edit-text-input" type="text">
        <div id="neon-modal-window-edit-text-btns">
        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-cancel">Cancel</div>
        <div class="neon-modal-window-btn" id="neon-modal-window-edit-text-save">Save</div>        
        </div>
    </div>`;
/**
 * HTML for Hotkeys modal window
 */
exports.hotkeysModal = `
    <div class="neon-modal-window-content" id="neon-modal-window-content-hotkeys">
        <!-- "Display" hotkeys -->
        <div class="hotkey-subcategory-container">
            <div class="hotkey-subcategory-title">Display</div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Shift</div>
                    <div>+</div>
                    <div class="hotkey-entry">+</div>
                </div>
                <div class="hotkey-entry-description">Zoom In</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Shift</div>
                    <div>+</div>
                    <div class="hotkey-entry">-</div>
                </div>
                <div class="hotkey-entry-description">Zoom Out</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">0</div>
                </div>
                <div class="hotkey-entry-description">Zoom Reset</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">h</div>
                </div>
                <div class="hotkey-entry-description">Hide Glyph</div>
            </div>
        </div>

        <!-- "Edit" hotkeys -->
        <div class="hotkey-subcategory-container">
            <div class="hotkey-subcategory-title">Edit</div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Ctrl</div>
                    <div>+</div>
                    <div class="hotkey-entry">z</div>
                    <div>or</div>
                    <div class="hotkey-entry">⌘</div>
                    <div>+</div>
                    <div class="hotkey-entry">z</div>
                </div>
                <div class="hotkey-entry-description">Undo</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Ctrl</div>
                    <div>+</div>
                    <div class="hotkey-entry">Shift</div>
                    <div>+</div>
                    <div class="hotkey-entry">z</div>
                    <div>or</div>
                    <div class="hotkey-entry">⌘</div>
                    <div>+</div>
                    <div class="hotkey-entry">Shift</div>
                    <div>+</div>
                    <div class="hotkey-entry">z</div>
                </div>
                <div class="hotkey-entry-description">Redo</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">q/w/e/r/t/y</div>
                </div>
                <div class="hotkey-entry-description">
                    Highlight by Staff/Syllable/Neume/LayerElement/Selection/Off
                </div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">1/2/3/4</div>
                </div>
                <div class="hotkey-entry-description">
                    Select by Syllable/Neume/Neume Component/Staff
                </div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Shift</div>
                    <div>+</div>
                    <div class="hotkey-entry">Number</div>
                </div>
                <div class="hotkey-entry-description">
                    Begin Insert for the <i>nth</i> option in the selected tab
                </div>
            </div>
        </div>

        <!-- "Other" hotkeys -->
        <div class="hotkey-subcategory-container">
            <div class="hotkey-subcategory-title">Other</div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">s</div>
                </div>
                <div class="hotkey-entry-description">Save File</div>
            </div>
            <div class="hotkey-entry-container">
                <div class="hotkey-container">
                    <div class="hotkey-entry">Esc</div>
                </div>
                <div class="hotkey-entry-description">Return to Edit Mode</div>
            </div>
        </div>
    </div>`;


/***/ }),

/***/ "./src/SquareEdit/Controls.ts":
/*!************************************!*\
  !*** ./src/SquareEdit/Controls.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** @module SquareEdit/Controls */
Object.defineProperty(exports, "__esModule", { value: true });
exports.initSelectionButtons = exports.initInsertEditControls = exports.bindInsertTabs = void 0;
const Contents = __webpack_require__(/*! ./Contents */ "./src/SquareEdit/Contents.ts");
const Color_1 = __webpack_require__(/*! ../utils/Color */ "./src/utils/Color.ts");
const SelectTools_1 = __webpack_require__(/*! ../utils/SelectTools */ "./src/utils/SelectTools.ts");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * Bind listeners to insert tabs.'
 */
function bindInsertTabs(insertHandler) {
    const insertTabs = Array.from(document.getElementsByClassName('insertTab'));
    const tabIds = insertTabs.map((tab) => { return tab.id; });
    document.body.addEventListener('keydown', (evt) => {
        if (evt.code.match(/^Digit\d$/) && evt.shiftKey) {
            try {
                const index = Number(evt.code[evt.code.length - 1]) - 1;
                const insertOptions = document.getElementsByClassName('insertel');
                const selectedOption = insertOptions[index];
                selectedOption.click();
            }
            catch (e) {
                console.debug(e);
            }
        }
    });
    tabIds.forEach((tab) => {
        document.getElementById(tab).addEventListener('click', () => {
            deactivate('.insertTab');
            activate(tab, insertHandler);
            document.getElementById('insert_data').innerHTML = Contents.insertTabHtml[tab];
            bindElements(insertHandler);
            deactivate('.insertel');
            const firstOption = document.getElementsByClassName('insertel')[0];
            activate(firstOption.id, insertHandler);
        });
    });
}
exports.bindInsertTabs = bindInsertTabs;
/**
 * Initialize Edit and Insert control panels.
 */
function initInsertEditControls() {
    const insertPanel = document.getElementById('insert_controls');
    const insertHeading = document.getElementById('insertMenu');
    const insertHeadingTitle = insertHeading.querySelector('.panel-heading-title');
    const insertContents = document.getElementById('insertContents');
    const insertDropdownIcon = insertHeading.querySelector('svg > use');
    const editPanel = document.getElementById('edit_controls');
    const editHeading = document.getElementById('editMenu');
    const displayHeadingTitle = editHeading.querySelector('.panel-heading-title');
    const editContents = document.getElementById('editContents');
    const editDropdownIcon = editHeading.querySelector('svg > use');
    // event listener for when user clicks inside Insert panel
    // insert mode is activated
    insertPanel.addEventListener('click', () => {
        displayHeadingTitle.classList.remove('focused');
        insertHeadingTitle.classList.add('focused');
        document.querySelector('.insertel.is-active').click();
        editPanel.querySelector('.side-panel-btn.sel-by.is-active').classList.add('unfocused');
        insertPanel.querySelector('.side-panel-btn.insertel.is-active').classList.remove('unfocused');
    });
    // event listener for when user clicks inside Edit panel
    // edit mode is activated
    editPanel.addEventListener('click', () => {
        insertHeadingTitle.classList.remove('focused');
        displayHeadingTitle.classList.add('focused');
        insertPanel.querySelector('.side-panel-btn.insertel.is-active').classList.add('unfocused');
        editPanel.querySelector('.side-panel-btn.sel-by.is-active').classList.remove('unfocused');
    });
    insertHeading.addEventListener('click', (e) => {
        e.stopPropagation();
        // if insert panel is closed, open it
        if (insertContents.classList.contains('closed')) {
            // set classes and styles for an open panel
            insertContents.classList.remove('closed');
            insertContents.style.padding = '0.5em 0.75em';
            setTimeout(() => {
                insertContents.style.overflow = 'visible';
            }, 200);
            insertDropdownIcon.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-down`);
        }
        // if insert panel is open, close it
        else {
            // set classes and styles for a closed panel
            insertContents.classList.add('closed');
            insertContents.style.overflow = 'hidden';
            setTimeout(() => {
                insertContents.style.padding = '0px';
            }, 200);
            insertDropdownIcon.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-side`);
        }
    });
    editHeading.addEventListener('click', (e) => {
        e.stopPropagation();
        // if edit panel is open, close it
        if (editContents.classList.contains('closed')) {
            // set classes and styles for an open panel
            editContents.classList.remove('closed');
            editContents.style.padding = '0.5em 0.75em';
            setTimeout(() => {
                editContents.style.overflow = 'visible';
            }, 200);
            editDropdownIcon.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-down`);
        }
        // if edit panel is closed, open it
        else {
            // set classes and styles for a closed panel
            editContents.classList.add('closed');
            editContents.style.overflow = 'hidden';
            setTimeout(() => {
                editContents.style.padding = '0px';
            }, 200);
            editDropdownIcon.setAttribute('xlink:href', `${"/Neon/"}assets/img/icons.svg#dropdown-side`);
        }
    });
}
exports.initInsertEditControls = initInsertEditControls;
/**
 * Activate a certain insert action.
 * This function is used for activating insert PANELS
 * and insert ICONS (whyyy).
 * @param id - The ID of the insert action tab.
 */
function activate(id, insertHandler) {
    const selectedTab = document.getElementById(id);
    selectedTab.classList.add('is-active');
    if (document.getElementById(id).classList.contains('insertel')) {
        insertHandler.insertActive(id);
    }
}
/**
 * Deactivate a certain insert action.
 * @param type - A CSS selector for the action tab.
 */
function deactivate(type) {
    const elList = document.querySelectorAll(type);
    elList.forEach(el => {
        el.classList.remove('is-active');
        el.classList.remove('unfocused');
    });
}
/**
 * Bind listeners to insert tab elements.
 */
function bindElements(insertHandler) {
    const insertElements = Array.from(document.getElementsByClassName('insertel'));
    const elementIds = insertElements.map(el => el.id);
    elementIds.forEach(el => {
        document.getElementById(el).addEventListener('click', () => {
            deactivate('.insertel');
            activate(el, insertHandler);
        });
    });
}
/**
 * Set listeners on the buttons to change selection modes.
 */
function initSelectionButtons() {
    const selBySyllable = document.getElementById('selBySyllable');
    const selByNeume = document.getElementById('selByNeume');
    const selByNc = document.getElementById('selByNc');
    const selByStaff = document.getElementById('selByStaff');
    const selByLayerElement = document.getElementById('selByLayerElement');
    selBySyllable.addEventListener('click', selectBySylHandler);
    selByNeume.addEventListener('click', selectByNeumeHandler);
    selByNc.addEventListener('click', selectByNcHandler);
    selByStaff.addEventListener('click', selectByStaffHandler);
    selByLayerElement.addEventListener('click', selByLayerElementHandler);
    document.body.addEventListener('keydown', (evt) => {
        if (evt.key === '1')
            selBySyllable.click();
        if (evt.key === '2')
            selByNeume.click();
        if (evt.key === '3')
            selByNc.click();
        if (evt.key === '4')
            selByStaff.click();
        if (evt.key === '5')
            selByLayerElement.click();
    });
    function selectBySylHandler() {
        if (!selBySyllable.classList.contains('is-active')) {
            LocalSettings_1.setSettings({ selectionMode: 'selBySyllable' });
            SelectTools_1.unselect();
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
            selBySyllable.classList.add('is-active');
            selByNeume.classList.remove('is-active');
            selByNc.classList.remove('is-active');
            selByStaff.classList.remove('is-active');
            selByLayerElement.classList.remove('is-active');
            try {
                document.getElementById('selByBBox').classList.remove('is-active');
            }
            catch (e) { }
            try {
                if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                    Color_1.setGroupingHighlight('syllable');
                }
            }
            catch (e) { }
        }
    }
    function selectByNeumeHandler() {
        if (!selByNeume.classList.contains('is-active')) {
            LocalSettings_1.setSettings({ selectionMode: 'selByNeume' });
            SelectTools_1.unselect();
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
            selByNeume.classList.add('is-active');
            selByNc.classList.remove('is-active');
            selBySyllable.classList.remove('is-active');
            selByStaff.classList.remove('is-active');
            selByLayerElement.classList.remove('is-active');
            try {
                document.getElementById('selByBBox').classList.remove('is-active');
            }
            catch (e) { }
            try {
                if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                    Color_1.setGroupingHighlight('neume');
                }
            }
            catch (e) { }
        }
    }
    function selectByNcHandler() {
        if (!selByNc.classList.contains('is-active')) {
            LocalSettings_1.setSettings({ selectionMode: 'selByNc' });
            SelectTools_1.unselect();
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
            selByNc.classList.add('is-active');
            selByNeume.classList.remove('is-active');
            selBySyllable.classList.remove('is-active');
            selByStaff.classList.remove('is-active');
            selByLayerElement.classList.remove('is-active');
            try {
                document.getElementById('selByBBox').classList.remove('is-active');
            }
            catch (e) { }
            try {
                if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                    Color_1.setGroupingHighlight('neume');
                }
            }
            catch (e) { }
        }
    }
    function selectByStaffHandler() {
        if (!selByStaff.classList.contains('is-active')) {
            LocalSettings_1.setSettings({ selectionMode: 'selByStaff' });
            SelectTools_1.unselect();
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
            selByStaff.classList.add('is-active');
            selByNeume.classList.remove('is-active');
            selByNc.classList.remove('is-active');
            selBySyllable.classList.remove('is-active');
            selByLayerElement.classList.remove('is-active');
            try {
                document.getElementById('selByBBox').classList.remove('is-active');
            }
            catch (e) { }
            try {
                if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                    Color_1.setGroupingHighlight('staff');
                }
            }
            catch (e) { }
        }
    }
    function selByLayerElementHandler() {
        if (!selByLayerElement.classList.contains('is-active')) {
            LocalSettings_1.setSettings({ selectionMode: 'selByLayerElement' });
            SelectTools_1.unselect();
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
            selByLayerElement.classList.add('is-active');
            selByNeume.classList.remove('is-active');
            selByNc.classList.remove('is-active');
            selByStaff.classList.remove('is-active');
            selBySyllable.classList.remove('is-active');
            try {
                document.getElementById('selByBBox').classList.remove('is-active');
            }
            catch (e) { }
            try {
                if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                    Color_1.setGroupingHighlight('layerElement');
                }
            }
            catch (e) { }
        }
    }
}
exports.initSelectionButtons = initSelectionButtons;


/***/ }),

/***/ "./src/SquareEdit/DivaEditMode.ts":
/*!****************************************!*\
  !*** ./src/SquareEdit/DivaEditMode.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const Controls_1 = __webpack_require__(/*! ./Controls */ "./src/SquareEdit/Controls.ts");
const Select = __webpack_require__(/*! ../utils/Select */ "./src/utils/Select.ts");
const InsertHandler_1 = __webpack_require__(/*! ./InsertHandler */ "./src/SquareEdit/InsertHandler.ts");
const SelectOptions = __webpack_require__(/*! ./SelectOptions */ "./src/SquareEdit/SelectOptions.ts");
const DisplayControls_1 = __webpack_require__(/*! ../DisplayPanel/DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const DragHandler_1 = __webpack_require__(/*! ../utils/DragHandler */ "./src/utils/DragHandler.ts");
const Contents = __webpack_require__(/*! ./Contents */ "./src/SquareEdit/Contents.ts");
const EditContents_1 = __webpack_require__(/*! ../utils/EditContents */ "./src/utils/EditContents.ts");
class DivaEdit {
    constructor(neonView) {
        this.neonView = neonView;
        this.initEditMode();
    }
    initEditMode() {
        document.getElementById('insert_controls').innerHTML += Contents.insertControlsPanel;
        document.getElementById('edit_controls').innerHTML += Contents.editControlsPanel;
        document.getElementById('undoRedo_controls').innerHTML = EditContents_1.undoRedoPanel;
        this.dragHandler = new DragHandler_1.default(this.neonView, '.active-page > svg');
        this.insertHandler = new InsertHandler_1.default(this.neonView, '.active-page > svg');
        Controls_1.bindInsertTabs(this.insertHandler);
        document.getElementById('primitiveTab').click();
        Select.setSelectHelperObjects(this.neonView, this.dragHandler);
        this.setSelectListeners();
        SelectOptions.initNeonView(this.neonView);
        Controls_1.initInsertEditControls();
        Select.setSelectStrokeWidth(1);
        Controls_1.initSelectionButtons();
        DisplayControls_1.setHighlightSelectionControls();
        this.neonView.view.addUpdateCallback(this.setSelectListeners.bind(this));
        document.getElementById('edit_controls').click(); // focus display panel
    }
    /**
     * Get the user mode that Neon is in. Either insert, edit, or viewer.
     * @returns {string}
     */
    getUserMode() {
        if (this.insertHandler !== undefined) {
            if (this.insertHandler.isInsertMode()) {
                return 'insert';
            }
            return 'edit';
        }
        return 'viewer';
    }
    setSelectListeners() {
        Select.clickSelect('.active-page > svg > svg, .active-page > svg > svg use, .active-page > svg > svg rect');
        Select.dragSelect('.active-page svg');
    }
}
exports.default = DivaEdit;


/***/ }),

/***/ "./src/SquareEdit/Grouping.ts":
/*!************************************!*\
  !*** ./src/SquareEdit/Grouping.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.initGroupingListeners = exports.endGroupingSelection = exports.triggerGrouping = exports.mergeStaves = exports.isGroupable = exports.initNeonView = void 0;
const Contents = __webpack_require__(/*! ./Contents */ "./src/SquareEdit/Contents.ts");
const Warnings = __webpack_require__(/*! ../Warnings */ "./src/Warnings.ts");
const Notification = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
const SelectTools = __webpack_require__(/*! ../utils/SelectTools */ "./src/utils/SelectTools.ts");
const SelectOptions = __webpack_require__(/*! ../SquareEdit/SelectOptions */ "./src/SquareEdit/SelectOptions.ts");
const SelectOptions_1 = __webpack_require__(/*! ./SelectOptions */ "./src/SquareEdit/SelectOptions.ts");
/**
 * The NeonView parent to access editor actions.
 */
let neonView;
/**
 * Set the neonView member.
 */
function initNeonView(view) {
    neonView = view;
}
exports.initNeonView = initNeonView;
/**
 * Check if selected elements can be grouped or not
 * @returns true if grouped, false otherwise
 */
function isGroupable(selectionType, elements) {
    const groups = Array.from(elements.values());
    switch (groups.length) {
        case 1:
            // cannot group if only 1 element is selected
            return false;
        default:
            // can group if more than 1 element is selected
            if (SelectTools.sharedSecondLevelParent(groups) || selectionType === 'selByStaff') {
                return true;
            }
            else {
                return false;
            }
    }
}
exports.isGroupable = isGroupable;
/**
 * Merge selected staves
 */
function mergeStaves() {
    const systems = document.querySelectorAll('.staff.selected');
    const elementIds = [];
    systems.forEach(staff => {
        elementIds.push(staff.id);
    });
    const editorAction = {
        action: 'merge',
        param: {
            elementIds: elementIds
        }
    };
    neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then((result) => {
        if (result) {
            Notification.queueNotification('Staff Merged', 'success');
            SelectOptions.endOptionsSelection();
            neonView.updateForCurrentPage();
        }
        else {
            Notification.queueNotification('Merge Failed', 'error');
        }
    });
}
exports.mergeStaves = mergeStaves;
/**
 * Trigger the grouping selection menu.
 * @param type - The grouping type: nc, neume, syl, ligatureNc, or ligature
 */
function triggerGrouping(type) {
    const moreEdit = document.getElementById('moreEdit');
    moreEdit.parentElement.classList.remove('hidden');
    moreEdit.innerHTML += Contents.groupingMenu[type];
    initGroupingListeners();
}
exports.triggerGrouping = triggerGrouping;
/**
 * Remove the grouping selection menu.
 */
function endGroupingSelection() {
    const moreEdit = document.getElementById('moreEdit');
    moreEdit.innerHTML = '';
    moreEdit.parentElement.classList.add('hidden');
    document.body.removeEventListener('keydown', SelectOptions_1.deleteButtonHandler);
    document.body.removeEventListener('keydown', keydownListener);
}
exports.endGroupingSelection = endGroupingSelection;
/**
 * The grouping dropdown listener.
 */
function initGroupingListeners() {
    const del = document.getElementById('delete');
    del.removeEventListener('click', SelectOptions_1.removeHandler);
    del.addEventListener('click', SelectOptions_1.removeHandler);
    document.body.addEventListener('keydown', SelectOptions_1.deleteButtonHandler);
    document.body.addEventListener('keydown', keydownListener);
    try {
        document.getElementById('mergeSyls').addEventListener('click', () => {
            const elementIds = getChildrenIds().filter(e => document.getElementById(e).classList.contains('neume'));
            groupingAction('group', 'neume', elementIds);
        });
    }
    catch (e) { }
    try {
        document.getElementById('groupNeumes').addEventListener('click', () => {
            const elementIds = getIds();
            groupingAction('group', 'neume', elementIds);
        });
    }
    catch (e) { }
    try {
        document.getElementById('groupNcs').addEventListener('click', () => {
            const elementIds = getIds();
            groupingAction('group', 'nc', elementIds);
        });
    }
    catch (e) { }
    try {
        document.getElementById('ungroupNeumes').addEventListener('click', () => {
            const elementIds = getChildrenIds();
            groupingAction('ungroup', 'neume', elementIds);
        });
    }
    catch (e) { }
    try {
        document.getElementById('ungroupNcs').addEventListener('click', () => {
            const elementIds = getChildrenIds();
            groupingAction('ungroup', 'nc', elementIds);
        });
    }
    catch (e) { }
    try {
        document.getElementById('toggle-ligature').addEventListener('click', async () => {
            const elementIds = getIds();
            const editorAction = {
                action: 'toggleLigature',
                param: {
                    elementIds: elementIds
                }
            };
            neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then((result) => {
                if (result) {
                    Notification.queueNotification('Ligature Toggled', 'success');
                }
                else {
                    Notification.queueNotification('Ligature Toggle Failed', 'error');
                }
                endGroupingSelection();
                neonView.updateForCurrentPage();
            });
        });
    }
    catch (e) { }
    try {
        document.getElementById('toggle-link').addEventListener('click', () => {
            const elementIds = getIds();
            const chainAction = {
                action: 'chain',
                param: []
            };
            const param = new Array();
            if (document.getElementById(elementIds[0]).getAttribute('mei:precedes')) {
                param.push({
                    action: 'set',
                    param: {
                        elementId: elementIds[0],
                        attrType: 'precedes',
                        attrValue: ''
                    }
                });
                param.push({
                    action: 'set',
                    param: {
                        elementId: elementIds[1],
                        attrType: 'follows',
                        attrValue: ''
                    }
                });
                param.push({
                    action: 'setText',
                    param: {
                        elementId: elementIds[1],
                        text: ''
                    }
                });
            }
            else if (document.getElementById(elementIds[0]).getAttribute('mei:follows')) {
                param.push({
                    action: 'set',
                    param: {
                        elementId: elementIds[0],
                        attrType: 'follows',
                        attrValue: ''
                    }
                });
                param.push({
                    action: 'set',
                    param: {
                        elementId: elementIds[1],
                        attrType: 'precedes',
                        attrValue: ''
                    }
                });
                param.push({
                    action: 'setText',
                    param: {
                        elementId: elementIds[0],
                        text: ''
                    }
                });
            }
            else {
                // Associate syllables. Will need to find which is first. Use staves.
                const syllable0 = document.getElementById(elementIds[0]);
                const syllable1 = document.getElementById(elementIds[1]);
                const staff0 = syllable0.closest('.staff');
                const staff1 = syllable1.closest('.staff');
                const staffChildren = Array.from(staff0.parentElement.children).filter((elem) => elem.classList.contains('staff'));
                let firstSyllable, secondSyllable;
                // Determine first syllable comes first by staff
                if (staffChildren.indexOf(staff0) < staffChildren.indexOf(staff1)) {
                    firstSyllable = syllable0;
                    secondSyllable = syllable1;
                }
                else {
                    firstSyllable = syllable1;
                    secondSyllable = syllable0;
                }
                param.push({
                    action: 'set',
                    param: {
                        elementId: firstSyllable.id,
                        attrType: 'precedes',
                        attrValue: '#' + secondSyllable.id
                    }
                });
                param.push({
                    action: 'set',
                    param: {
                        elementId: secondSyllable.id,
                        attrType: 'follows',
                        attrValue: '#' + firstSyllable.id
                    }
                });
                // Delete syl on second syllable
                const syl = secondSyllable.querySelector('.syl');
                if (syl !== null) {
                    param.push({
                        action: 'remove',
                        param: {
                            elementId: syl.id
                        }
                    });
                }
            }
            chainAction.param = param;
            neonView.edit(chainAction, neonView.view.getCurrentPageURI()).then((result) => {
                if (result) {
                    Notification.queueNotification('Toggled Syllable Link', 'success');
                }
                else {
                    Notification.queueNotification('Failed to Toggle Syllable Link', 'error');
                }
                endGroupingSelection();
                neonView.updateForCurrentPage();
            });
        });
    }
    catch (e) { }
}
exports.initGroupingListeners = initGroupingListeners;
/**
 * Grouping/Ungrouping keybinding event listener
 */
const keydownListener = function (e) {
    if (e.key === 'g') {
        // get selected elements to check if they can be groupeds
        const elements = Array.from(document.querySelectorAll('.selected'));
        if (elements.length == 0)
            return;
        const selectionType = SelectTools.getSelectionType();
        // Group/merge or ungroup/split based on selection type
        switch (selectionType) {
            case 'selBySyllable':
                if (isGroupable(selectionType, elements)) {
                    const elementIds = getChildrenIds().filter(e => document.getElementById(e).classList.contains('neume'));
                    groupingAction('group', 'neume', elementIds);
                }
                else {
                    const elementIds = getChildrenIds();
                    groupingAction('ungroup', 'neume', elementIds);
                }
                break;
            case 'selByNeume':
                if (isGroupable(selectionType, elements)) {
                    const elementIds = getIds();
                    groupingAction('group', 'neume', elementIds);
                }
                else {
                    const elementIds = getChildrenIds();
                    groupingAction('ungroup', 'nc', elementIds);
                }
                break;
            case 'selByNc':
                if (isGroupable(selectionType, elements)) {
                    const elementIds = getIds();
                    groupingAction('group', 'nc', elementIds);
                }
                else {
                    const elementIds = getChildrenIds();
                    groupingAction('ungroup', 'nc', elementIds);
                }
                break;
            case 'selByStaff':
                if (isGroupable(selectionType, elements)) {
                    mergeStaves();
                }
                else {
                    SelectOptions.triggerStaffSplitMode();
                }
                break;
            default:
                console.error(`Can't perform grouping/ungrouping action on selection type ${selectionType}.`);
                return;
        }
    }
};
/**
 * Form and execute a group/ungroup action.
 * @param action - The action to execute. Either "group" or "ungroup".
 * @param groupType - The type of elements to group. Either "neume" or "nc".
 * @param elementIds - The IDs of the elements.
 */
function groupingAction(action, groupType, elementIds) {
    const editorAction = {
        action: action,
        param: {
            groupType: groupType,
            elementIds: elementIds
        }
    };
    neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then((result) => {
        if (result) {
            if (action === 'group') {
                Notification.queueNotification('Grouping Success', 'success');
            }
            else {
                Notification.queueNotification('Ungrouping Success', 'success');
            }
        }
        else {
            if (action === 'group') {
                Notification.queueNotification('Grouping Failed', 'error');
            }
            else {
                Notification.queueNotification('Ungrouping Failed', 'error');
            }
        }
        neonView.updateForCurrentPage();
        // Prompt user to confirm if Neon does not re cognize contour
        if (groupType === 'nc') {
            const neumeParent = document.getElementById(elementIds[0]).parentElement;
            const ncs = Array.from(neumeParent.children);
            const contour = neonView.info.getContour(ncs);
            if (contour === undefined) {
                Warnings.groupingNotRecognized();
            }
        }
        endGroupingSelection();
    });
}
/**
 * @returns The IDs of selected elements.
 */
function getIds() {
    const ids = [];
    const elements = Array.from(document.getElementsByClassName('selected'));
    elements.forEach(el => {
        ids.push(el.id);
    });
    return ids;
}
/**
 * @returns The IDs of the selected elements' children.
 */
function getChildrenIds() {
    const childrenIds = [];
    const elements = Array.from(document.getElementsByClassName('selected'));
    elements.forEach(el => {
        if (el.classList.contains('divLine') || el.classList.contains('accid')) {
            return;
        }
        const children = Array.from(el.children);
        children.forEach(ch => {
            childrenIds.push(ch.id);
        });
    });
    return childrenIds;
}


/***/ }),

/***/ "./src/SquareEdit/InsertHandler.ts":
/*!*****************************************!*\
  !*** ./src/SquareEdit/InsertHandler.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const d3 = __webpack_require__(/*! d3 */ "d3");
const Coordinates_1 = __webpack_require__(/*! ../utils/Coordinates */ "./src/utils/Coordinates.ts");
const Notification_1 = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
/**
 * Class that handles insert mode, events, and actions.
 */
class InsertHandler {
    /**
     * @param neonView - NeonView parent.
     * @param sel - The CSS selector to apply insert listeners to.
     */
    constructor(neonView, sel) {
        this.firstClick = true;
        /**
         * Disable insert mode and remove event listeners.
         */
        this.insertDisabled = (function insertDisabled() {
            this.type = '';
            this.removeInsertClickHandlers();
            document.body.removeEventListener('keydown', this.keydownListener);
            document.body.removeEventListener('keyup', this.resetInsertHandler);
            document.body.removeEventListener('click', this.clickawayHandler);
            this.firstClick = true;
            try {
                document.getElementById('returnToEditMode').remove();
            }
            catch (e) {
                // console.debug(e);
            }
            const insertPanel = document.getElementById('insert_controls');
            const insertHeading = document.getElementById('insertMenu');
            const insertHeadingTitle = insertHeading.querySelector('.panel-heading-title');
            const editPanel = document.getElementById('edit_controls');
            const editHeading = document.getElementById('editMenu');
            const displayHeadingTitle = editHeading.querySelector('.panel-heading-title');
            insertHeadingTitle.classList.remove('focused');
            displayHeadingTitle.classList.add('focused');
            insertPanel.querySelector('.side-panel-btn.insertel.is-active').classList.add('unfocused');
            editPanel.querySelector('.side-panel-btn.sel-by.is-active').classList.remove('unfocused');
        }).bind(this);
        /**
         * Event handler to handle a user clicking away from the active page
         * causing insert mode to end.
         */
        this.clickawayHandler = (function clickawayHandler(evt) {
            const target = evt.target;
            if (target.closest('.active-page') === null &&
                target.closest('#insert_controls') === null &&
                target.closest('#svg_group') === null) {
                this.insertDisabled();
                document.body.removeEventListener('keydown', this.staffHandler);
                document.body.removeEventListener('keydown', this.handler);
            }
        }).bind(this);
        /**
         * Resets an insert event listener after temporarily removing it.
         */
        this.resetInsertHandler = (function resetInsertHandler(evt) {
            if (evt.key === 'Shift') {
                document.querySelector(this.selector)
                    .addEventListener('click', this.type === 'staff' ?
                    this.staffHandler : this.handler);
            }
        }).bind(this);
        /**
         * Listens to key presses to either exit edit mode (if Escape) or
         * temporarily remove insert event listeners (if Shift).
         */
        this.keydownListener = (function keydownListener(evt) {
            if (evt.key === 'Escape') {
                this.insertDisabled();
                document.body.removeEventListener('keydown', this.staffHandler);
                document.body.removeEventListener('keydown', this.handler);
            }
            else if (evt.key === 'Shift') {
                this.removeInsertClickHandlers();
            }
        }).bind(this);
        /**
         * Event handler for clicking to insert any element except a staff.
         */
        this.handler = (function handler(evt) {
            evt.stopPropagation();
            // If the cursor is out of bounds, nothing should be inserted.
            const cursor = Coordinates_1.getSVGRelCoords(evt.clientX, evt.clientY);
            if (Coordinates_1.isOutOfSVGBounds(cursor.x, cursor.y))
                return Notification_1.queueNotification('[FAIL] Glyph was placed out of bounds! Insertion failed.', 'error');
            const editorAction = {
                action: 'insert',
                param: {
                    elementType: this.type,
                    staffId: 'auto',
                    ulx: cursor.x,
                    uly: cursor.y,
                }
            };
            if (this.attributes !== null) {
                editorAction.param.attributes = this.attributes;
                if (this.attributes['shape'] === 'F') {
                    editorAction['param']['ulx'] -= 50;
                }
            }
            this.neonView.edit(editorAction, this.neonView.view.getCurrentPageURI()).then(() => {
                return this.neonView.updateForCurrentPage();
            }).then(() => {
                document.querySelector(this.selector).addEventListener('click', this.handler);
            });
        }).bind(this);
        /**
         * Event handler to insert a staff.
         */
        this.staffHandler = (function staffHandler(evt) {
            const cursor = Coordinates_1.getSVGRelCoords(evt.clientX, evt.clientY);
            if (Coordinates_1.isOutOfSVGBounds(cursor.x, cursor.y)) {
                return Notification_1.queueNotification('Staff cannot be placed out of bounds!', 'error');
            }
            const container = document.querySelector('.active-page > .definition-scale');
            if (this.firstClick) {
                this.coord = cursor;
                d3.select(container).append('circle').attr('cx', cursor.x)
                    .attr('cy', cursor.y)
                    .attr('r', 10)
                    .attr('id', 'staff-circle')
                    .attr('fill', 'green');
                this.firstClick = false;
            }
            else {
                let ul, lr;
                if (cursor.x < this.coord.x || cursor.y < this.coord.y) { // second point is not lr
                    ul = cursor;
                    lr = this.coord;
                }
                else {
                    ul = this.coord;
                    lr = cursor;
                }
                document.getElementById('staff-circle').remove();
                const action = {
                    action: 'insert',
                    param: {
                        elementType: 'staff',
                        staffId: 'auto',
                        ulx: ul.x,
                        uly: ul.y,
                        lrx: lr.x,
                        lry: lr.y
                    }
                };
                this.neonView.edit(action, this.neonView.view.getCurrentPageURI()).then(() => {
                    this.neonView.updateForCurrentPage();
                    this.firstClick = true;
                });
            }
        }).bind(this);
        /**
         * Remove the insert listeners while not leaving insert mode entirely.
         */
        this.removeInsertClickHandlers = (function removeInsertClickHandlers() {
            try {
                document.querySelector(this.selector).removeEventListener('click', this.staffHandler);
                document.querySelector(this.selector).removeEventListener('click', this.handler);
            }
            catch (e) { }
        }).bind(this);
        this.neonView = neonView;
        this.selector = sel;
    }
    /**
     * Called when an insert button is clicked.
     * Triggers the start of insert mode.
     * @param buttonId - The ID of the button that was clicked.
     */
    insertActive(buttonId) {
        const alreadyInInsertMode = this.isInsertMode();
        switch (buttonId) {
            case 'punctum':
                this.type = 'nc';
                this.attributes = null;
                break;
            case 'diamond':
                this.type = 'nc';
                this.attributes = { tilt: 'se' };
                break;
            case 'virga':
                this.type = 'nc';
                this.attributes = { tilt: 's' };
                break;
            //there are multiple possible liquescent combinations
            case 'liquescentA':
                this.type = 'nc';
                this.attributes = { curve: 'a' };
                break;
            case 'liquescentC':
                this.type = 'nc';
                this.attributes = { curve: 'c' };
                break;
            case 'virgaReversed':
                this.type = 'nc';
                this.attributes = { tilt: 'n' };
                break;
            case 'pes':
            case 'clivis':
            case 'scandicus':
            case 'climacus':
            case 'torculus':
            case 'porrectus':
            case 'pressus':
                const contour = this.neonView.info.getContourByValue(buttonId.charAt(0).toUpperCase() + buttonId.slice(1));
                this.type = 'grouping';
                this.attributes = { contour: contour };
                break;
            case 'cClef':
            case 'fClef':
                this.type = 'clef';
                this.attributes = { shape: buttonId.charAt(0).toUpperCase() };
                break;
            case 'custos':
                this.type = 'custos';
                this.attributes = null;
                break;
            case 'divLineMaxima':
                this.type = 'divLine';
                this.attributes = { form: 'maxima' };
                break;
            case 'staff':
                this.type = 'staff';
                this.attributes = null;
                break;
            case 'flat':
                this.type = 'accid';
                this.attributes = { accid: 'f' };
                break;
            case 'natural':
                this.type = 'accid';
                this.attributes = { accid: 'n' };
                break;
            default:
                this.type = '';
                this.attributes = null;
                console.error('Invalid button for insertion: ' + buttonId + '.');
                return;
        }
        this.removeInsertClickHandlers();
        try {
            if (this.type === 'staff') {
                document.querySelector(this.selector)
                    .addEventListener('click', this.staffHandler);
            }
            else {
                document.querySelector(this.selector)
                    .addEventListener('click', this.handler);
            }
        }
        catch (e) { }
        // Disable edit mode listeners
        document.body.addEventListener('keydown', this.keydownListener);
        document.body.addEventListener('keyup', this.resetInsertHandler);
        // Add 'return to edit mode' button
        if (!alreadyInInsertMode) {
            const editModeButton = document.createElement('button');
            editModeButton.id = 'returnToEditMode';
            editModeButton.classList.add('side-panel-btn');
            editModeButton.innerHTML = 'Return to Edit Mode';
            document.getElementById('redo').parentNode.appendChild(editModeButton);
            editModeButton.addEventListener('click', this.insertDisabled);
        }
        document.getElementById('editContents').addEventListener('click', this.clickawayHandler);
    }
    isInsertMode() {
        return (this.type !== '');
    }
}
exports.default = InsertHandler;


/***/ }),

/***/ "./src/SquareEdit/NeumeTools.ts":
/*!**************************************!*\
  !*** ./src/SquareEdit/NeumeTools.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitNeumeHandler = void 0;
const Notification = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
/** Handle splitting a neume into two neumes through Verovio. */
class SplitNeumeHandler {
    /**
     * @param neume - The neume that will be modified.
     */
    constructor(neonView, neume) {
        /** Handle input to split a neume. */
        this.handler = ((evt) => {
            const id = this.neume.id;
            // unselect();
            const nc = evt.target.parentElement;
            const ncId = nc.id;
            const editorAction = {
                action: 'splitNeume',
                param: {
                    elementId: id,
                    ncId: ncId
                }
            };
            this.neonView.edit(editorAction, this.neonView.view.getCurrentPageURI()).then(async (result) => {
                if (result) {
                    await this.neonView.updateForCurrentPage();
                    Notification.queueNotification('Split action successful', 'success');
                }
                else {
                    await this.neonView.updateForCurrentPage();
                    Notification.queueNotification('Split action failed', 'error');
                }
                // this.neonView.updateForCurrentPage();
                // const dragHandler = new DragHandler(this.neonView, '.neume');
                this.splitDisable();
                // selectAll([document.querySelector('#' + id) as SVGGElement], this.neonView, dragHandler);
                // try {
                //   document.getElementById('moreEdit').innerHTML = '';
                //   document.getElementById('moreEdit').classList.add('is-hidden');
                // } catch (e) {}
            });
        }).bind(this);
        /** Exits split on Escape press, disables on Shift. */
        this.keydownListener = ((evt) => {
            if (evt.key === 'Escape') {
                this.splitDisable();
            }
            else if (evt.key === 'Shift') {
                document.body.removeEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        /** Exit split if user clicks off of active page. */
        this.clickawayHandler = ((evt) => {
            const target = evt.target;
            if (target.closest('.active-page') === null) {
                this.splitDisable();
                document.body.removeEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        /** Called to reapply the event listener if necessary. */
        this.resetHandler = ((evt) => {
            if (evt.key === 'Shift') {
                document.body.addEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        this.neonView = neonView;
        this.neume = neume;
    }
    /**
     * First part of the split action.
     */
    startSplit() {
        this.splitDisable();
        document.body.addEventListener('click', this.handler, { capture: true });
        // Handle keypresses
        document.body.addEventListener('keydown', this.keydownListener);
        document.body.addEventListener('keyup', this.resetHandler);
        document.body.addEventListener('click', this.clickawayHandler);
        Notification.queueNotification('Click The Beginning of The Second Neume');
    }
    splitDisable() {
        document.body.removeEventListener('keydown', this.keydownListener);
        document.body.removeEventListener('keyup', this.resetHandler);
        document.body.removeEventListener('click', this.clickawayHandler);
        document.body.removeEventListener('click', this.handler, { capture: true });
    }
}
exports.SplitNeumeHandler = SplitNeumeHandler;


/***/ }),

/***/ "./src/SquareEdit/SelectOptions.ts":
/*!*****************************************!*\
  !*** ./src/SquareEdit/SelectOptions.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.triggerDefaultActions = exports.triggerDefaultSylActions = exports.triggerSplitActions = exports.triggerStaffSplitMode = exports.triggerStaffActions = exports.triggerLayerElementActions = exports.triggerAccidActions = exports.triggerCustosActions = exports.triggerClefActions = exports.triggerSyllableActions = exports.triggerNeumeActions = exports.triggerNcActions = exports.addChangeStaffListener = exports.moveOuttaSyllableHandler = exports.insertToSyllableHandler = exports.changeStaffHandler = exports.removeHandler = exports.endOptionsSelection = exports.deleteButtonHandler = exports.unsetLiquescentAnticlockwiseAction = exports.unsetLiquescentClockwiseAction = exports.unsetVirgaReversedAction = exports.unsetVirgaAction = exports.unsetInclinatumAction = exports.initNeonView = void 0;
const Contents = __webpack_require__(/*! ./Contents */ "./src/SquareEdit/Contents.ts");
const Grouping = __webpack_require__(/*! ./Grouping */ "./src/SquareEdit/Grouping.ts");
const Notification = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
const StaffTools_1 = __webpack_require__(/*! ./StaffTools */ "./src/SquareEdit/StaffTools.ts");
const NeumeTools_1 = __webpack_require__(/*! ./NeumeTools */ "./src/SquareEdit/NeumeTools.ts");
const SelectTools_1 = __webpack_require__(/*! ../utils/SelectTools */ "./src/utils/SelectTools.ts");
/**
 * The NeonView parent to call editor actions.
 */
let neonView;
/**
 * Initialize NeonView.
 */
function initNeonView(view) {
    neonView = view;
    Grouping.initNeonView(view);
}
exports.initNeonView = initNeonView;
/**
 * @param id - The id of the neume component.
 * @returns An action that unsets the inclinatum parameter of a neume component.
 */
function unsetInclinatumAction(id) {
    return {
        action: 'set',
        param: {
            elementId: id,
            attrType: 'tilt',
            attrValue: ''
        }
    };
}
exports.unsetInclinatumAction = unsetInclinatumAction;
/**
 * @param id - The id of the neume component.
 * @returns An action that unsets the virga parameter of a neume component.
 */
function unsetVirgaAction(id) {
    return {
        action: 'set',
        param: {
            elementId: id,
            attrType: 'tilt',
            attrValue: ''
        }
    };
}
exports.unsetVirgaAction = unsetVirgaAction;
/**
 * @param id - The id of the neume component.
 * @returns An action that unsets the reversed virga parameter of a neume component.
 */
function unsetVirgaReversedAction(id) {
    return {
        action: 'set',
        param: {
            elementId: id,
            attrType: 'tilt',
            attrValue: ''
        }
    };
}
exports.unsetVirgaReversedAction = unsetVirgaReversedAction;
/**
 * @param id - The id of the neume component.
 * @returns An action that unsets the liquescent_clockwise parameter of a neume component.
 */
function unsetLiquescentClockwiseAction(id) {
    return {
        action: 'set',
        param: {
            elementId: id,
            attrType: 'curve',
            attrValue: ''
        }
    };
}
exports.unsetLiquescentClockwiseAction = unsetLiquescentClockwiseAction;
/**
 * @param id - The id of the neume component.
 * @returns An action that unsets the liquescent_anticlockwise parameter of a neume component.
 */
function unsetLiquescentAnticlockwiseAction(id) {
    return {
        action: 'set',
        param: {
            elementId: id,
            attrType: 'curve',
            attrValue: ''
        }
    };
}
exports.unsetLiquescentAnticlockwiseAction = unsetLiquescentAnticlockwiseAction;
/** Event handler for delete button press. */
function deleteButtonHandler(evt) {
    if (evt.key === 'd' || evt.key === 'Backspace') {
        removeHandler();
        evt.preventDefault();
    }
}
exports.deleteButtonHandler = deleteButtonHandler;
/**
 * End the extra options menu.
 */
function endOptionsSelection() {
    try {
        const moreEdit = document.getElementById('moreEdit');
        moreEdit.innerHTML = '';
        moreEdit.parentElement.classList.add('hidden');
    }
    catch (e) { }
    document.body.removeEventListener('keydown', deleteButtonHandler);
}
exports.endOptionsSelection = endOptionsSelection;
/**
 * Function to handle removing elements
 */
function removeHandler() {
    const toRemove = [];
    const selected = Array.from(document.getElementsByClassName('selected'));
    selected.forEach(elem => {
        if (elem.classList.contains('syl')) {
            elem = elem.closest('.syllable');
        }
        if (elem.classList.contains('accid')) {
            elem = elem.closest('.accid');
        }
        if (elem.classList.contains('divLine')) {
            elem = elem.closest('.divLine');
        }
        toRemove.push({
            action: 'remove',
            param: {
                elementId: elem.id
            }
        });
    });
    const chainAction = {
        action: 'chain',
        param: toRemove
    };
    endOptionsSelection();
    neonView.edit(chainAction, neonView.view.getCurrentPageURI()).then(() => { neonView.updateForCurrentPage(); });
}
exports.removeHandler = removeHandler;
/**
 * Function to handle re-associating elements to the nearest staff
 */
function changeStaffHandler() {
    const toChange = [];
    const selected = Array.from(document.getElementsByClassName('selected'));
    selected.forEach(elem => {
        toChange.push({
            action: 'changeStaff',
            param: {
                elementId: elem.id
            }
        });
    });
    const chainAction = {
        action: 'chain',
        param: toChange
    };
    endOptionsSelection();
    neonView.edit(chainAction, neonView.view.getCurrentPageURI()).then(() => { neonView.updateForCurrentPage(); });
}
exports.changeStaffHandler = changeStaffHandler;
/**
 * Function to handle inserting divisio or accidental into nearest syllable
 */
function insertToSyllableHandler() {
    const toInsert = [];
    const selected = Array.from(document.getElementsByClassName('selected'));
    selected.forEach(elem => {
        toInsert.push({
            action: 'insertToSyllable',
            param: {
                elementId: elem.id
            }
        });
    });
    const chainAction = {
        action: 'chain',
        param: toInsert
    };
    neonView.edit(chainAction, neonView.view.getCurrentPageURI()).then((result) => {
        if (result) {
            Notification.queueNotification('Insert Success', 'success');
        }
        else {
            Notification.queueNotification('Insert Failed XoX', 'error');
        }
        endOptionsSelection();
        neonView.updateForCurrentPage();
    });
}
exports.insertToSyllableHandler = insertToSyllableHandler;
/**
 * Function to handle moving divisio or accidental out of syllable
 */
function moveOuttaSyllableHandler() {
    const toMove = [];
    const selected = Array.from(document.getElementsByClassName('selected'));
    selected.forEach(elem => {
        toMove.push({
            action: 'moveOuttaSyllable',
            param: {
                elementId: elem.id
            }
        });
    });
    const chainAction = {
        action: 'chain',
        param: toMove
    };
    neonView.edit(chainAction, neonView.view.getCurrentPageURI()).then((result) => {
        if (result) {
            Notification.queueNotification('Move Success', 'success');
        }
        else {
            Notification.queueNotification('Move Failed XoX', 'error');
        }
        endOptionsSelection();
        neonView.updateForCurrentPage();
    });
}
exports.moveOuttaSyllableHandler = moveOuttaSyllableHandler;
/**
 * Trigger the extra layer element action menu for a selection.
 */
//  export function triggerLayerElementActions (): void {
//   endOptionsSelection();
//   try {
//     const moreEdit = document.getElementById('moreEdit');
//     moreEdit.classList.remove('is-hidden');
//     moreEdit.innerHTML = Contents.defaultActionContents;
//   } catch (e) {}
//   try {
//     const del = document.getElementById('delete');
//     del.removeEventListener('click', removeHandler);
//     del.addEventListener('click', removeHandler);
//     document.body.addEventListener('keydown', deleteButtonHandler);
//   } catch (e) {}
// }
function addDeleteListener() {
    const del = document.getElementById('delete');
    if (del) {
        del.removeEventListener('click', removeHandler);
        del.addEventListener('click', removeHandler);
        // TODO: should this be outside the if condition?
        document.body.addEventListener('keydown', deleteButtonHandler);
    }
}
function addChangeStaffListener() {
    const staff = document.getElementById('changeStaff');
    staff === null || staff === void 0 ? void 0 : staff.removeEventListener('click', changeStaffHandler);
    staff === null || staff === void 0 ? void 0 : staff.addEventListener('click', changeStaffHandler);
}
exports.addChangeStaffListener = addChangeStaffListener;
/**
 * Function to set the HTML content of edit controls: either #moreEdit or #extraEdit
 *
 * @param {'moreEdit' | 'extraEdit'} editType - The type of edit controls
 * @param {string} contents - The innerHTML contents
 * @param {boolean} replace - Is the innerHTML being replaced, or being added to?
 */
function setEditControls(editType, contents, replace = true) {
    const edit = document.getElementById(editType);
    if (edit) {
        edit.parentElement.classList.remove('hidden');
        if (replace)
            edit.innerHTML = contents;
        else
            edit.innerHTML += contents;
    }
}
/**
 * Trigger the extra nc action menu for a selection.
 */
function triggerNcActions(nc) {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.defaultActionContents);
    setEditControls('extraEdit', Contents.ncActionContents);
    addDeleteListener();
    document.querySelector('#Punctum.dropdown-item')
        .addEventListener('click', () => {
        const unsetInclinatum = unsetInclinatumAction(nc.id);
        const unsetVirga = unsetVirgaAction(nc.id);
        const unsetVirgaReversed = unsetVirgaReversedAction(nc.id);
        const unsetLiquescentClockwise = unsetLiquescentClockwiseAction(nc.id);
        const unsetLiquescentAnticlockwise = unsetLiquescentAnticlockwiseAction(nc.id);
        neonView.edit({ action: 'chain', param: [unsetInclinatum, unsetVirga, unsetVirgaReversed, unsetLiquescentClockwise, unsetLiquescentAnticlockwise] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#Inclinatum.dropdown-item')
        .addEventListener('click', () => {
        const unsetVirga = unsetVirgaAction(nc.id);
        const unsetVirgaReversed = unsetVirgaReversedAction(nc.id);
        const unsetLiquescentClockwise = unsetLiquescentClockwiseAction(nc.id);
        const unsetLiquescentAnticlockwise = unsetLiquescentAnticlockwiseAction(nc.id);
        const setInclinatum = {
            action: 'set',
            param: {
                elementId: nc.id,
                attrType: 'tilt',
                attrValue: 'se'
            }
        };
        neonView.edit({ action: 'chain', param: [unsetVirga, unsetVirgaReversed, unsetLiquescentClockwise, unsetLiquescentAnticlockwise, setInclinatum] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#Virga.dropdown-item')
        .addEventListener('click', () => {
        const unsetVirgaReversed = unsetVirgaReversedAction(nc.id);
        const unsetInclinatum = unsetInclinatumAction(nc.id);
        const unsetLiquescentClockwise = unsetLiquescentClockwiseAction(nc.id);
        const unsetLiquescentAnticlockwise = unsetLiquescentAnticlockwiseAction(nc.id);
        const setVirga = {
            action: 'set',
            param: {
                elementId: nc.id,
                attrType: 'tilt',
                attrValue: 's'
            }
        };
        neonView.edit({ action: 'chain', param: [unsetVirgaReversed, unsetInclinatum, unsetLiquescentClockwise, unsetLiquescentAnticlockwise, setVirga] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#VirgaReversed.dropdown-item')
        .addEventListener('click', () => {
        const unsetInclinatum = unsetInclinatumAction(nc.id);
        const unsetVirga = unsetVirgaAction(nc.id);
        const unsetLiquescentClockwise = unsetLiquescentClockwiseAction(nc.id);
        const unsetLiquescentAnticlockwise = unsetLiquescentAnticlockwiseAction(nc.id);
        const setVirgaReversed = {
            action: 'set',
            param: {
                elementId: nc.id,
                attrType: 'tilt',
                attrValue: 'n'
            }
        };
        neonView.edit({ action: 'chain', param: [unsetInclinatum, unsetVirga, unsetLiquescentClockwise, unsetLiquescentAnticlockwise, setVirgaReversed] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#LiquescentClockwise.dropdown-item')
        .addEventListener('click', () => {
        const unsetInclinatum = unsetInclinatumAction(nc.id);
        const unsetVirga = unsetVirgaAction(nc.id);
        const unsetVirgaReversed = unsetVirgaReversedAction(nc.id);
        const unsetLiquescentAnticlockwise = unsetLiquescentAnticlockwiseAction(nc.id);
        const setLiquescentClockwise = {
            action: 'set',
            param: {
                elementId: nc.id,
                attrType: 'curve',
                attrValue: 'c'
            }
        };
        neonView.edit({ action: 'chain', param: [unsetInclinatum, unsetVirga, unsetVirgaReversed, unsetLiquescentAnticlockwise, setLiquescentClockwise] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#LiquescentAnticlockwise.dropdown-item')
        .addEventListener('click', () => {
        const unsetInclinatum = unsetInclinatumAction(nc.id);
        const unsetVirga = unsetVirgaAction(nc.id);
        const unsetVirgaReversed = unsetVirgaReversedAction(nc.id);
        const unsetLiquescentClockwise = unsetLiquescentClockwiseAction(nc.id);
        const setLiquescentAnticlockwise = {
            action: 'set',
            param: {
                elementId: nc.id,
                attrType: 'curve',
                attrValue: 'a'
            }
        };
        neonView.edit({ action: 'chain', param: [unsetInclinatum, unsetVirga, unsetVirgaReversed, unsetLiquescentClockwise, setLiquescentAnticlockwise] }, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    initOptionsListeners();
}
exports.triggerNcActions = triggerNcActions;
/**
 * Trigger extra neume actions.
 */
function triggerNeumeActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.defaultNeumeActionContents);
    setEditControls('extraEdit', Contents.neumeActionContents);
    addDeleteListener();
    const neume = document.querySelectorAll('.selected');
    if (neume.length !== 1) {
        console.warn('More than one neume selected! Cannot trigger Neume ClickSelect actions.');
        return;
    }
    // TODO add trigger for split action
    document.getElementById('split-neume')
        .addEventListener('click', () => {
        const neume = document.querySelector('.neume.selected');
        if (neume !== null) {
            const split = new NeumeTools_1.SplitNeumeHandler(neonView, neume);
            split.startSplit();
            endOptionsSelection();
        }
        else {
            console.error('No staff was selected!');
            endOptionsSelection();
        }
    });
    document.querySelector('#Pes.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#PesSubpunctis.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Clivis.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Scandicus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#ScandicusFlexus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#ScandicusSubpunctis.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Climacus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#ClimacusResupinus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Torculus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#TorculusResupinus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Porrectus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#PorrectusFlexus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#PorrectusSubpunctis.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    document.querySelector('#Pressus.dropdown-item')
        .addEventListener('click', (e) => {
        const contour = neonView.info.getContourByValue(e.target.id);
        triggerChangeGroup(contour);
    });
    function triggerChangeGroup(contour) {
        const changeGroupingAction = {
            action: 'changeGroup',
            param: {
                elementId: neume[0].id,
                contour: contour
            }
        };
        neonView.edit(changeGroupingAction, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Grouping Changed', 'success');
            }
            else {
                Notification.queueNotification('Grouping Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    }
    initOptionsListeners();
}
exports.triggerNeumeActions = triggerNeumeActions;
/**
 * Trigger extra syllable actions.
 */
function triggerSyllableActions() {
    endOptionsSelection();
    const extraActionsHTML = `
    <div class="right-side-panel-btns-container">
      <button class="side-panel-btn" id="mergeSyls">Merge Syllables</button>
      <button class="side-panel-btn" id="ungroupNeumes">Ungroup</button>
      <button class="side-panel-btn" id="delete">Delete</button>
      <button class="side-panel-btn" id="changeStaff">Re-associate to nearest staff</button>
    </div>
  `;
    setEditControls('moreEdit', extraActionsHTML);
    addChangeStaffListener();
    addDeleteListener();
}
exports.triggerSyllableActions = triggerSyllableActions;
/**
 * Trigger extra clef actions for a specific clef.
 * @param clef - The clef on which to trigger additional actions.
 */
function triggerClefActions(clef) {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.custosActionContents);
    setEditControls('extraEdit', Contents.clefActionContents);
    addChangeStaffListener();
    addDeleteListener();
    document.querySelector('#CClef.dropdown-item')
        .addEventListener('click', () => {
        const setCClef = {
            action: 'setClef',
            param: {
                elementId: clef.id,
                shape: 'C'
            }
        };
        neonView.edit(setCClef, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#FClef.dropdown-item')
        .addEventListener('click', () => {
        const setFClef = {
            action: 'setClef',
            param: {
                elementId: clef.id,
                shape: 'F'
            }
        };
        neonView.edit(setFClef, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    initOptionsListeners();
}
exports.triggerClefActions = triggerClefActions;
/**
 * Trigger extra custos actions.
 */
function triggerCustosActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.custosActionContents);
    addChangeStaffListener();
    addDeleteListener();
}
exports.triggerCustosActions = triggerCustosActions;
/**
 * Trigger extra accid actions.
 */
function triggerAccidActions(accid) {
    var _a, _b;
    endOptionsSelection();
    const isSyllableInAccid = accid.parentElement.classList.contains('syllable');
    const moreEditContents = (isSyllableInAccid)
        ? Contents.layerElementInActionContents
        : Contents.layerElementOutActionContents;
    setEditControls('moreEdit', moreEditContents, false);
    setEditControls('extraEdit', Contents.accidActionContents);
    addDeleteListener();
    addChangeStaffListener();
    (_a = document.getElementById('insertToSyllable')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', insertToSyllableHandler);
    (_b = document.getElementById('moveOuttaSyllable')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', moveOuttaSyllableHandler);
    document.querySelector('#ChangeToFlat.dropdown-item')
        .addEventListener('click', () => {
        const changeToFlat = {
            action: 'set',
            param: {
                elementId: accid.id,
                attrType: 'accid',
                attrValue: 'f'
            }
        };
        neonView.edit(changeToFlat, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    document.querySelector('#ChangeToNatural.dropdown-item')
        .addEventListener('click', () => {
        const changeToNatural = {
            action: 'set',
            param: {
                elementId: accid.id,
                attrType: 'accid',
                attrValue: 'n'
            }
        };
        neonView.edit(changeToNatural, neonView.view.getCurrentPageURI()).then((result) => {
            if (result) {
                Notification.queueNotification('Shape Changed', 'success');
            }
            else {
                Notification.queueNotification('Shape Change Failed', 'error');
            }
            endOptionsSelection();
            neonView.updateForCurrentPage();
        });
    });
    initOptionsListeners();
}
exports.triggerAccidActions = triggerAccidActions;
/**
 * Trigger extra layer element (accid, divLine, custos) actions.
 */
function triggerLayerElementActions(element) {
    var _a, _b;
    endOptionsSelection();
    const parentIsSyllable = element.parentElement.classList.contains('syllable');
    const layerElementActions = parentIsSyllable
        ? Contents.layerElementInActionContents
        : Contents.layerElementOutActionContents;
    setEditControls('moreEdit', layerElementActions, false);
    addDeleteListener();
    addChangeStaffListener();
    (_a = document.getElementById('insertToSyllable')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', insertToSyllableHandler);
    (_b = document.getElementById('moveOuttaSyllable')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', moveOuttaSyllableHandler);
}
exports.triggerLayerElementActions = triggerLayerElementActions;
/**
 * Trigger extra staff actions.
 */
function triggerStaffActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.staffActionContents);
    addDeleteListener();
    document.getElementById('merge-systems').addEventListener('click', () => {
        Grouping.mergeStaves();
    });
}
exports.triggerStaffActions = triggerStaffActions;
/**
 * Enter staff splitting mode
 */
function triggerStaffSplitMode() {
    const staff = document.querySelector('.staff.selected');
    if (staff !== null) {
        const split = new StaffTools_1.SplitStaffHandler(neonView, staff);
        split.startSplit();
        endOptionsSelection();
    }
    else {
        console.error('No staff was selected!');
        endOptionsSelection();
    }
}
exports.triggerStaffSplitMode = triggerStaffSplitMode;
/**
 * Trigger split staff option
 */
function triggerSplitActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.splitActionContents);
    addDeleteListener();
    // TODO add trigger for split action
    document.getElementById('split-system')
        .addEventListener('click', () => {
        triggerStaffSplitMode();
    });
    document.getElementById('reset-rotate')
        .addEventListener('click', () => {
        const staff = document.querySelector('.staff.selected');
        // Unused variables:
        // const rect = staff.querySelector('#resizeRect');
        // const co = rect.getAttribute('points').split(' ');
        // const dy = parseInt(co[0].split(',')[1]) - parseInt(co[1].split(',')[1]);
        const points = SelectTools_1.getStaffBBox(staff);
        const y_change = Math.tan(points.rotate) * (points.lrx - points.ulx);
        if (staff !== null) {
            const editorAction = {
                action: 'resizeRotate',
                param: {
                    elementId: staff.id,
                    ulx: points.ulx,
                    uly: points.rotate > 0 ? points.uly + y_change / 2 : points.uly - y_change / 2,
                    lrx: points.lrx,
                    lry: points.rotate > 0 ? points.lry - y_change / 2 : points.lry + y_change / 2,
                    rotate: 0
                }
            };
            neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then(async (result) => {
                if (result) {
                    await neonView.updateForCurrentPage();
                }
            });
            endOptionsSelection();
        }
        else {
            console.error('No staff was selected');
            endOptionsSelection();
        }
    });
}
exports.triggerSplitActions = triggerSplitActions;
/**
 * Trigger default actions when selecting by syl
 */
function triggerDefaultSylActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.defaultSylActionContents);
    addDeleteListener();
    addChangeStaffListener();
}
exports.triggerDefaultSylActions = triggerDefaultSylActions;
/**
 * Trigger default selection option.
 */
function triggerDefaultActions() {
    endOptionsSelection();
    setEditControls('moreEdit', Contents.defaultActionContents);
    addDeleteListener();
}
exports.triggerDefaultActions = triggerDefaultActions;
/**
 * Initialize extra dropdown options.
 */
function initOptionsListeners() {
    document.getElementById('drop_select').addEventListener('click', function () {
        this.classList.toggle('is-active');
    });
}


/***/ }),

/***/ "./src/SquareEdit/SingleEditMode.ts":
/*!******************************************!*\
  !*** ./src/SquareEdit/SingleEditMode.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const Controls_1 = __webpack_require__(/*! ./Controls */ "./src/SquareEdit/Controls.ts");
const DisplayControls_1 = __webpack_require__(/*! ../DisplayPanel/DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const EditControls_1 = __webpack_require__(/*! ../utils/EditControls */ "./src/utils/EditControls.ts");
const Select = __webpack_require__(/*! ../utils/Select */ "./src/utils/Select.ts");
const InsertHandler_1 = __webpack_require__(/*! ./InsertHandler */ "./src/SquareEdit/InsertHandler.ts");
const SelectOptions = __webpack_require__(/*! ./SelectOptions */ "./src/SquareEdit/SelectOptions.ts");
const DragHandler_1 = __webpack_require__(/*! ../utils/DragHandler */ "./src/utils/DragHandler.ts");
const Contents = __webpack_require__(/*! ./Contents */ "./src/SquareEdit/Contents.ts");
const EditContents_1 = __webpack_require__(/*! ../utils/EditContents */ "./src/utils/EditContents.ts");
const EditControls_2 = __webpack_require__(/*! ../utils/EditControls */ "./src/utils/EditControls.ts");
const LocalSettings_1 = __webpack_require__(/*! ../utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/**
 * An Edit Module for a single page of a manuscript.
 * Works with the SingleView module.
 */
class SingleEditMode {
    /**
     * Constructor for an EditMode object.
     * @param {NeonView} neonView - The NeonView parent.
     */
    constructor(neonView) {
        this.neonView = neonView;
        this.initEditMode();
    }
    /**
     * Initialize Edit mode (default).
     */
    initEditMode() {
        EditControls_2.initNavbar(this.neonView);
        const selectionHighlight = document.createElement('a');
        const divider = document.createElement('hr');
        divider.classList.add('dropdown-divider');
        selectionHighlight.classList.add('dropdown-item');
        selectionHighlight.id = 'highlight-selection';
        selectionHighlight.textContent = 'By Selection Mode';
        document.getElementsByClassName('dropdown-content')[0].prepend(divider);
        document.getElementsByClassName('dropdown-content')[0].prepend(selectionHighlight);
        document.getElementById('insert_controls').innerHTML += Contents.insertControlsPanel;
        document.getElementById('edit_controls').innerHTML += Contents.editControlsPanel;
        document.getElementById('undoRedo_controls').innerHTML = EditContents_1.undoRedoPanel;
        this.dragHandler = new DragHandler_1.default(this.neonView, '#svg_group');
        this.insertHandler = new InsertHandler_1.default(this.neonView, '#svg_group');
        Controls_1.bindInsertTabs(this.insertHandler);
        document.getElementById('primitiveTab').click();
        Select.setSelectHelperObjects(this.neonView, this.dragHandler);
        this.setSelectListeners();
        SelectOptions.initNeonView(this.neonView);
        Controls_1.initInsertEditControls();
        Controls_1.initSelectionButtons();
        EditControls_1.initUndoRedoPanel(this.neonView);
        DisplayControls_1.setHighlightOption('selection');
        this.neonView.view.addUpdateCallback(this.setSelectListeners.bind(this));
        // focus display panel by clicking on the stored selection mode
        const { selectionMode } = LocalSettings_1.getSettings();
        document.getElementById(selectionMode).click();
    }
    /**
     * Get the user mode that Neon is in. Either insert, edit, or viewer.
     * @returns {string}
     */
    getUserMode() {
        if (this.insertHandler !== undefined) {
            if (this.insertHandler.isInsertMode()) {
                return 'insert';
            }
            return 'edit';
        }
        return 'viewer';
    }
    setSelectListeners() {
        Select.clickSelect('#svg_group, #svg_group use, #svg_group rect');
        Select.dragSelect('#svg_group');
    }
}
exports.default = SingleEditMode;


/***/ }),

/***/ "./src/SquareEdit/StaffTools.ts":
/*!**************************************!*\
  !*** ./src/SquareEdit/StaffTools.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitStaffHandler = void 0;
const Notification = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
const SelectTools_1 = __webpack_require__(/*! ../utils/SelectTools */ "./src/utils/SelectTools.ts");
const DragHandler_1 = __webpack_require__(/*! ../utils/DragHandler */ "./src/utils/DragHandler.ts");
const Coordinates_1 = __webpack_require__(/*! ../utils/Coordinates */ "./src/utils/Coordinates.ts");
/** Handle splitting a staff into two staves through Verovio. */
class SplitStaffHandler {
    /**
     * @param staff - The staff that will be modified.
     */
    constructor(neonView, staff) {
        /** Handle input to split a staff. */
        this.handler = ((evt) => {
            // Find staff point corresponds to if one exists
            // TODO
            const id = this.staff.id;
            const cursor = Coordinates_1.getSVGRelCoords(evt.clientX, evt.clientY);
            const editorAction = {
                action: 'split',
                param: {
                    elementId: id,
                    x: cursor.x
                }
            };
            this.neonView.edit(editorAction, this.neonView.view.getCurrentPageURI()).then(async (result) => {
                if (result) {
                    await this.neonView.updateForCurrentPage();
                    Notification.queueNotification('Split action successful', 'success');
                }
                const dragHandler = new DragHandler_1.default(this.neonView, '.staff');
                this.splitDisable();
                SelectTools_1.selectAll([document.querySelector(`#${id}`)], this.neonView, dragHandler);
                const moreEdit = document.getElementById('moreEdit');
                if (moreEdit) {
                    moreEdit.innerHTML = '';
                    moreEdit.parentElement.classList.add('hidden');
                }
            });
        }).bind(this);
        /** Exits split on Escape press, disables on Shift. */
        this.keydownListener = ((evt) => {
            if (evt.key === 'Escape') {
                this.splitDisable();
            }
            else if (evt.key === 'Shift') {
                document.body.removeEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        /** Exit split if user clicks off of active page. */
        this.clickawayHandler = ((evt) => {
            const target = evt.target;
            if (target.closest('.active-page') === null) {
                this.splitDisable();
                document.body.removeEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        /** Called to reapply the event listener if necessary. */
        this.resetHandler = ((evt) => {
            if (evt.key === 'Shift') {
                document.body.addEventListener('click', this.handler, { capture: true });
            }
        }).bind(this);
        this.neonView = neonView;
        this.staff = staff;
    }
    /**
     * First part of the split action.
     */
    startSplit() {
        this.splitDisable();
        document.body.addEventListener('click', this.handler, { capture: true });
        // Handle keypresses
        document.body.addEventListener('keydown', this.keydownListener);
        document.body.addEventListener('keyup', this.resetHandler);
        document.body.addEventListener('click', this.clickawayHandler);
        Notification.queueNotification('Click Where to Split');
    }
    splitDisable() {
        document.body.removeEventListener('keydown', this.keydownListener);
        document.body.removeEventListener('keyup', this.resetHandler);
        document.body.removeEventListener('click', this.clickawayHandler);
        document.body.removeEventListener('click', this.handler, { capture: true });
    }
}
exports.SplitStaffHandler = SplitStaffHandler;


/***/ }),

/***/ "./src/TextEditMode.ts":
/*!*****************************!*\
  !*** ./src/TextEditMode.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const SelectTools_1 = __webpack_require__(/*! ./utils/SelectTools */ "./src/utils/SelectTools.ts");
const DragHandler_1 = __webpack_require__(/*! ./utils/DragHandler */ "./src/utils/DragHandler.ts");
const Select_1 = __webpack_require__(/*! ./utils/Select */ "./src/utils/Select.ts");
const Color_1 = __webpack_require__(/*! ./utils/Color */ "./src/utils/Color.ts");
const ModalWindow_1 = __webpack_require__(/*! ./utils/ModalWindow */ "./src/utils/ModalWindow.ts");
/**
 * Format a string for prompting the user.
 * @param rawString - The unformatted string.
 */
/*
function formatRaw (rawString: string): string {
  const removeSymbol = /\u{25CA}/u;
  return rawString.replace(removeSymbol, '').trim();
}
*/
function selBySyllableListener() {
    if (!document.getElementById('selByBBox').classList.contains('is-active')) {
        SelectTools_1.unselect();
        try {
            document.getElementById('moreEdit').innerHTML = '';
            document.getElementById('extraEdit').innerHTML = '';
            document.getElementById('moreEdit').parentElement.classList.add('hidden');
            document.getElementById('extraEdit').parentElement.classList.add('hidden');
        }
        catch (e) { }
        document.getElementById('selByBBox').classList.add('is-active');
        try {
            document.getElementById('selByNc').classList.remove('is-active');
            document.getElementById('selByNeume').classList.remove('is-active');
            document.getElementById('selByStaff').classList.remove('is-active');
            document.getElementById('selBySyllable').classList.remove('is-active');
            document.getElementById('selByLayerElement').classList.remove('is-active');
        }
        catch (e) { }
        try {
            if (document.querySelector('.highlight-selected').id === 'highlight-selection') {
                Color_1.setGroupingHighlight('syllable');
            }
        }
        catch (e) { }
    }
    this.addBBoxListeners();
}
/**
 * A Text editing module that works with the SingleView and DivaView modules
 */
class TextEditMode {
    /**
     * Constructor for a TextEdit
     * @param neonView - The calling [[NeonView]] for the instance.
     */
    constructor(neonView) {
        this.neonView = neonView;
        this.initTextEdit();
    }
    /**
     * Update the bounding box selected when the edit text modal has been clicked
     */
    updateSelectedBBox(span) {
        SelectTools_1.unselect();
        const bboxId = Array.from(span.classList).find(e => e !== 'text-select' && e !== 'selected-to-edit');
        if (document.getElementById('displayBBox').checked) {
            if (document.getElementById(bboxId)) {
                const displayRect = document.getElementById(bboxId).querySelector('.sylTextRect-display');
                SelectTools_1.selectBBox(displayRect, this.dragHandler, this.neonView);
            }
        }
    }
    ;
    /**
    * Set text to edit mode
    */
    initTextEdit() {
        const spans = document.getElementById('syl_text').querySelectorAll('span');
        const modal = this.neonView.modal;
        spans.forEach((span) => {
            function selectSylText() {
                span.classList.add('selected-to-edit');
                modal.setModalWindowView(ModalWindow_1.ModalWindowView.EDIT_TEXT);
                modal.openModalWindow();
                this.updateSelectedBBox(span);
            }
            span.removeEventListener('click', selectSylText);
            span.addEventListener('click', selectSylText);
        });
    }
    /**
    * Add the selectByBBox button.
    * If neume edit mode is there, add it to the bar with the other select by buttons.
    * Otherwise add an invisible button
    * since the only edit mode is selectByRect in that case
    */
    initSelectByBBoxButton() {
        if (this.neonView.NeumeEdit !== undefined) {
            const selByBBox = document.getElementById('selByBBox');
            if (selByBBox) {
                selByBBox.style.display = '';
                return;
            }
            const block = document.getElementById('selection-mode-btns-container');
            const button = document.createElement('button');
            button.classList.add('side-panel-btn', 'sel-by');
            button.id = 'selByBBox';
            button.textContent = 'BBox';
            block.appendChild(button);
            button.addEventListener('click', selBySyllableListener.bind(this));
            document.body.addEventListener('keydown', (evt) => {
                if (evt.key === '6') {
                    if (document.getElementById('selByBBox').style.display === '') {
                        selBySyllableListener.bind(this)();
                    }
                }
            });
            this.neonView.view.addUpdateCallback(this.addBBoxListeners.bind(this));
        }
        else {
            const block = document.getElementById('undo').closest('.control');
            const p = document.createElement('p');
            p.classList.add('control');
            const button = document.createElement('button');
            button.classList.add('side-panel-btn', 'sel-by');
            button.id = 'selByBBox';
            button.textContent = 'BBox';
            p.appendChild(button);
            block.appendChild(p);
            button.classList.add('is-active');
            button.style.display = 'none';
            this.addBBoxListeners();
            this.neonView.view.addUpdateCallback(this.addBBoxListeners.bind(this));
        }
    }
    /**
     * Initialize select by bbox mode
     */
    addBBoxListeners() {
        if (document.getElementById('selByBBox').classList.contains('is-active')) {
            SelectTools_1.unselect();
            if (this.neonView.NeumeEdit === undefined) {
                // just in case
                this.dragHandler = new DragHandler_1.default(this.neonView, '.sylTextRect-display');
                Select_1.setSelectHelperObjects(this.neonView, this.dragHandler);
                if (this.neonView.view.constructor.name === 'SingleView') {
                    Select_1.clickSelect('#mei_output, #mei_output rect');
                    Select_1.dragSelect('#svg_group');
                }
                else {
                    Select_1.clickSelect('.active-page > svg > svg, .active-page > svg > svg rect');
                    Select_1.dragSelect('.active-page svg');
                }
            }
        }
    }
}
exports.default = TextEditMode;


/***/ }),

/***/ "./src/TextView.ts":
/*!*************************!*\
  !*** ./src/TextView.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const Notification = __webpack_require__(/*! ./utils/Notification */ "./src/utils/Notification.ts");
const SelectTools_1 = __webpack_require__(/*! ./utils/SelectTools */ "./src/utils/SelectTools.ts");
const DisplayControls_1 = __webpack_require__(/*! ./DisplayPanel/DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const LocalSettings_1 = __webpack_require__(/*! ./utils/LocalSettings */ "./src/utils/LocalSettings.ts");
/*
 * Class that manages getting the text for syllables in Neon from the mei file
 */
class TextView {
    /**
     * A constructor for a TextView.
     * @param neonView - The calling [[NeonView]] for the instance.
     */
    constructor(neonView) {
        this.neonView = neonView;
        this.notificationSent = false;
        // add checkbox to enable/disable the view
        const checkboxesContainer = document.getElementById('display-single-container');
        const textLabel = document.createElement('label');
        const bboxLabel = document.createElement('label');
        const textButton = document.createElement('input');
        const bboxButton = document.createElement('input');
        textButton.classList.add('checkbox');
        bboxButton.classList.add('checkbox');
        textLabel.classList.add('checkbox-container', 'side-panel-btn');
        bboxLabel.classList.add('checkbox-container', 'side-panel-btn');
        textLabel.textContent = 'Text';
        bboxLabel.textContent = 'BBoxes';
        textButton.id = 'displayText';
        textButton.type = 'checkbox';
        bboxButton.id = 'displayBBox';
        bboxButton.type = 'checkbox';
        textButton.checked = false;
        bboxButton.checked = false;
        textLabel.appendChild(textButton);
        bboxLabel.appendChild(bboxButton);
        checkboxesContainer.prepend(bboxLabel);
        checkboxesContainer.prepend(textLabel);
        this.loadSettings();
        this.setTextViewControls();
        this.neonView.view.addUpdateCallback(this.updateTextViewVisibility.bind(this));
        this.neonView.view.addUpdateCallback(this.updateBBoxViewVisibility.bind(this));
    }
    /**
    * Set listeners on textview visibility checkbox
    */
    setTextViewControls() {
        function textViewVis() { this.updateTextViewVisibility(); }
        function bboxViewVis() { this.updateBBoxViewVisibility(); }
        this.updateTextViewVisibility();
        this.updateBBoxViewVisibility();
        document.getElementById('displayText')
            .addEventListener('click', textViewVis.bind(this));
        document.getElementById('displayBBox') // Why is BBox logic is inside TextView.ts ???
            .addEventListener('click', bboxViewVis.bind(this));
    }
    loadSettings() {
        const { displayText, displayBBox } = LocalSettings_1.getSettings();
        document.querySelector('#displayText').checked = displayText;
        document.querySelector('#displayBBox').checked = displayBBox;
    }
    /**
     * Update visibility of text bounding boxes
     */
    updateBBoxViewVisibility() {
        var _a;
        const displayAllBtn = document.getElementById('display-all-btn');
        const displayInfo = document.getElementById('displayInfo');
        const displayBBoxes = document.getElementById('displayBBox');
        const displayText = document.getElementById('displayText');
        // save to localStorage
        LocalSettings_1.setSettings({ displayBBox: displayBBoxes.checked });
        if (displayBBoxes.checked) {
            document.querySelectorAll('.sylTextRect').forEach(rect => {
                rect.classList.add('sylTextRect-display');
                rect.classList.remove('sylTextRect');
            });
            document.querySelectorAll('.syl.selected .sylTextRect-display')
                .forEach((rect) => { rect.style.fill = 'red'; });
            if (this.neonView.getUserMode() !== 'viewer' && this.neonView.TextEdit !== undefined) {
                this.neonView.TextEdit.initSelectByBBoxButton();
            }
            // if this is the 3rd option to be checked (all three are selected),
            // set "Display/Hide All" button to "Hide All".
            if (displayInfo.checked && displayBBoxes.checked && displayText.checked) {
                displayAllBtn.classList.add('selected');
                displayAllBtn.innerHTML = 'Hide All';
            }
        }
        else {
            if ((_a = document.getElementById('selByBBox')) === null || _a === void 0 ? void 0 : _a.classList.contains('is-active')) {
                SelectTools_1.unselect();
                document.getElementById('selByBBox').classList.remove('is-active');
                document.getElementById('selBySyllable').classList.add('is-active');
            }
            document.querySelectorAll('.sylTextRect-display').forEach(rect => {
                rect.classList.add('sylTextRect');
                rect.classList.remove('sylTextRect-display');
            });
            document.querySelectorAll('.syl.selected .sylTextRect').forEach((rect) => {
                rect.style.fill = 'none';
            });
            try {
                document.getElementById('selByBBox').style.display = 'none';
            }
            catch (e) { }
            // if "Display/Hide All" button is in "Hide All" mode, set it to "Display All" mode
            if (displayAllBtn.classList.contains('selected')) {
                displayAllBtn.classList.remove('selected');
                displayAllBtn.innerHTML = 'Display All';
            }
        }
        DisplayControls_1.updateHighlight();
    }
    /**
    * Update the visibility of the textview box
    * and add the event listeners to make sure the syl highlights when moused over
    */
    updateTextViewVisibility() {
        const displayAllBtn = document.getElementById('display-all-btn');
        const displayInfo = document.getElementById('displayInfo');
        const displayBBoxes = document.getElementById('displayBBox');
        const displayText = document.getElementById('displayText');
        // save to localStorage
        LocalSettings_1.setSettings({ displayText: displayText.checked });
        if (displayText.checked) {
            const sylText = document.getElementById('syl_text');
            sylText.style.display = '';
            sylText.innerHTML =
                `<div class="info-bubble-container">
          <div class="info-bubble-header">Syllables on this page</div>
          <div class="info-bubble-body">${this.getSylText()}</div>
        </div>`;
            const spans = sylText.querySelectorAll('span');
            spans.forEach(span => {
                const syllable = document.getElementById(span.classList[0]);
                const syl = syllable.querySelector('.syl');
                const text = syl.querySelector('text');
                const rect = syl.querySelector('rect');
                if (text.classList.length === 0) {
                    text.classList.add('text');
                }
                span.addEventListener('mouseover', () => {
                    if (syllable.classList.contains('syllable-highlighted'))
                        return;
                    syllable.classList.add('selected');
                    syllable.querySelectorAll('.neume').forEach(neume => {
                        neume.classList.add('selected');
                    });
                    if (rect !== null) {
                        rect.style.fill = '#d00';
                    }
                    // syl.attr('fill', '#ffc7c7');
                    // this.highlightBoundingBox(span);
                });
                span.addEventListener('mouseleave', () => {
                    if (syllable.classList.contains('syllable-highlighted'))
                        return;
                    syllable.classList.remove('selected');
                    syllable.querySelectorAll('.neume').forEach(neume => {
                        neume.classList.remove('selected');
                    });
                    if (rect !== null) {
                        if (syllable.style.fill !== 'rgb(0, 0, 0)') { // syllable.getAttributeNS('http://www.w3.org/2000/SVG', 'fill');
                            rect.style.fill = syllable.getAttribute('fill');
                        }
                        else {
                            rect.style.fill = 'blue';
                        }
                    }
                    // syl.attr('fill', null);
                    // this.removeBoundingBox(span);
                });
            });
            if (this.neonView.getUserMode() !== 'viewer' && this.neonView.TextEdit !== undefined) {
                this.neonView.TextEdit.initTextEdit();
            }
            // scroll the syllable text bubble into view
            //sylText.scrollIntoView({ behavior: 'smooth' });
            // if this is the 3rd option to be checked (all three are selected),
            // set "Display/Hide All" button to "Hide All".
            if (displayInfo.checked && displayBBoxes.checked && displayText.checked) {
                displayAllBtn.classList.add('selected');
                displayAllBtn.innerHTML = 'Hide All';
            }
        }
        else {
            document.getElementById('syl_text').style.display = 'none';
            // if "Display/Hide All" button is in "Hide All" mode, set it to "Display All" mode
            if (displayAllBtn.classList.contains('selected')) {
                displayAllBtn.classList.remove('selected');
                displayAllBtn.innerHTML = 'Display All';
            }
        }
    }
    /**
     * Get the syllable text of the loaded file
     */
    getSylText() {
        let lyrics = '';
        const uniToDash = /\ue551/g;
        const syllables = document.querySelectorAll('.active-page .syllable');
        syllables.forEach(syllable => {
            if (syllable.querySelector('.syl') !== null) {
                const syl = syllable.querySelector('.syl');
                lyrics += `<span class="${syllable.id} syl-text-side-panel">`;
                if (syl.textContent.trim() === '') {
                    lyrics += '&#x25CA; ';
                }
                else {
                    Array.from(syl.children[0].children[0].children).forEach(text => {
                        lyrics += text.textContent !== '' ? text.textContent : '&#x25CA; ';
                    });
                }
                lyrics += ' </span>';
            }
        });
        if (!this.notificationSent) {
            Notification.queueNotification('Blank syllables are represented by &#x25CA;!');
            this.notificationSent = true;
        }
        return lyrics.replace(uniToDash, '-');
    }
}
exports.default = TextView;


/***/ }),

/***/ "./src/Validation.ts":
/*!***************************!*\
  !*** ./src/Validation.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.blankPage = exports.sendForValidation = exports.init = void 0;
const ModalWindow_1 = __webpack_require__(/*! ./utils/ModalWindow */ "./src/utils/ModalWindow.ts");
const schemaResponse = fetch("/Neon/" + 'assets/mei-all.rng');
let worker, schema, statusField;
/**
 * Update the UI with the validation results. Called when the WebWorker finishes validating.
 */
function updateUI(message) {
    const errors = message.data;
    if (errors === null) {
        statusField.textContent = 'VALID';
        statusField.style.color = '#4bc14b';
        for (const child of statusField.children) {
            child.remove();
        }
    }
    else {
        let log = '';
        errors.forEach(line => {
            log += line + '\n';
        });
        statusField.textContent = '';
        statusField.style.color = 'red';
        const status = document.createElement('div');
        //link.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(log)}`);
        //link.setAttribute('download', 'validation.log');
        status.textContent = 'INVALID';
        status.style.cursor = 'pointer';
        statusField.appendChild(status);
        status.addEventListener('click', statusOnClick.bind(this, log));
    }
}
function statusOnClick(log) {
    this.modal.setModalWindowView(ModalWindow_1.ModalWindowView.VALIDATION_STATUS, log);
    this.modal.openModalWindow();
}
/**
 * Add the validation information to the display and create the WebWorker
 * for validation MEI.
 */
async function init(neonView) {
    const fileStatusDiv = document.getElementById('file-status');
    if (fileStatusDiv !== null) {
        const statusTitle = document.createElement('div');
        statusTitle.textContent = 'MEI Status:';
        statusTitle.id = "validation_status_title";
        const status = document.createElement('span');
        status.id = 'validation_status';
        status.textContent = 'unknown';
        fileStatusDiv.appendChild(statusTitle);
        fileStatusDiv.appendChild(status);
        statusField = document.getElementById('validation_status');
        worker = new Worker("/Neon/" + 'workers/Worker.js');
        worker.onmessage = updateUI.bind(neonView);
    }
}
exports.init = init;
/**
 * Send the contents of an MEI file to the WebWorker for validation.
 * @param {string} meiData
 */
async function sendForValidation(meiData) {
    if (statusField === undefined) {
        return;
    }
    if (schema === undefined) {
        const response = await schemaResponse;
        schema = await response.text();
    }
    statusField.textContent = 'checking...';
    statusField.style.color = 'gray';
    worker.postMessage({
        mei: meiData,
        schema: schema
    });
}
exports.sendForValidation = sendForValidation;
/**
 * Update the message on a blank page when there is no MEI.
 */
function blankPage() {
    for (const child of statusField.children) {
        child.remove();
    }
    statusField.textContent = 'No MEI';
    statusField.style.color = 'color:gray';
}
exports.blankPage = blankPage;


/***/ }),

/***/ "./src/VerovioWrapper.ts":
/*!*******************************!*\
  !*** ./src/VerovioWrapper.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A wrapper around the verovio web worker to permit mocking in tests.
 */
class VerovioWrapper {
    constructor() {
        this.verovioWorker = new Worker("/Neon/" + 'workers/VerovioWorker.js');
    }
    /**
     * Set an event listener onto the actual web worker.
     */
    addEventListener(type, handler) {
        return this.verovioWorker.addEventListener(type, handler);
    }
    /**
     * Send a message to the actual web worker.
     */
    postMessage(message) {
        return this.verovioWorker.postMessage(message);
    }
}
exports.default = VerovioWrapper;


/***/ }),

/***/ "./src/Warnings.ts":
/*!*************************!*\
  !*** ./src/Warnings.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** @module Warnings */
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupingNotRecognized = void 0;
/**
 * Warn when grouped neume components form an unrecognized neume.
 */
function groupingNotRecognized() {
    if (!(window.confirm('Neon does not recognize this neume grouping. Would you like to create a compound neume?'))) {
        document.getElementById('undo').click();
    }
}
exports.groupingNotRecognized = groupingNotRecognized;


/***/ }),

/***/ "./src/utils/Color.ts":
/*!****************************!*\
  !*** ./src/utils/Color.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.setGroupingHighlight = exports.setStaffHighlight = exports.highlight = exports.unsetGroupingHighlight = exports.unsetStaffHighlight = exports.unhighlight = void 0;
/**
 * Adapted from color palette from Figure 2 (Colors optimized for color-blind
 * individuals) from
 * ["Points of view: Color blindness" by Bang Wong published in Nature Methods volume 8 on 27 May 2011](https://www.nature.com/articles/nmeth.1618?WT.ec_id=NMETH-201106)
 */
const ColorPalette = [
    'rgb(230, 159, 0)',
    'rgb(86, 180, 233)',
    'rgb(0, 158, 115)',
    'rgb(240, 228, 66)',
    'rgb(0, 114, 178)',
    'rgb(213, 94, 0)',
    'rgb(204, 121, 167)'
];
/**
 * Remove the highlight from a staff.
 * @param staff If undefined, the all staves are unhighlighted.
 */
function unhighlight(staff) {
    let children;
    if (staff) {
        children = staff.querySelectorAll(':not(.selected) .highlighted');
    }
    else {
        children = document.querySelectorAll(':not(.selected) .highlighted');
    }
    children.forEach(elem => {
        if (elem.tagName === 'path' && !elem.closest('.staff').classList.contains('selected')) {
            elem.setAttribute('stroke', '#000000');
        }
        else {
            elem.removeAttribute('fill');
            let rects = elem.querySelectorAll('.sylTextRect-display');
            if (!rects.length) {
                try {
                    rects = elem.closest('.syllable').querySelectorAll('.sylTextRect-display');
                }
                catch (e) {
                    rects = [];
                }
            }
            rects.forEach(function (rect) {
                if (rect.closest('.syllable').classList.contains('selected') ||
                    rect.closest('.staff').classList.contains('selected') ||
                    rect.closest('.syl').classList.contains('selected')
                // rect.closest('.layer').classList.contains('selected')
                ) {
                    rect.style.fill = '#d00';
                }
                else {
                    rect.style.fill = 'blue';
                }
                rect.classList.remove('highlighted');
            });
        }
        elem.classList.remove('highlighted');
    });
}
exports.unhighlight = unhighlight;
/**
 * Remove the highlight from each staff.
 */
function unsetStaffHighlight() {
    unhighlight();
}
exports.unsetStaffHighlight = unsetStaffHighlight;
/**
 * Unset highlight for all grouping types
 */
function unsetGroupingHighlight() {
    unsetStaffHighlight();
    const highlighted = Array.from(document.getElementsByClassName('highlighted'))
        .filter((elem) => !elem.parentElement.classList.contains('selected'));
    highlighted.forEach((elem) => {
        elem.setAttribute('#d00', null);
        let rects = elem.querySelectorAll('.sylTextRect-display');
        if (!rects.length) {
            if (elem.closest('.syllable') !== null) {
                rects = elem.closest('.syllable').querySelectorAll('sylTextRect-display');
            }
        }
        rects.forEach(function (rect) {
            if (rect.closest('.syllable').classList.contains('selected') ||
                rect.closest('.syl').classList.contains('selected')) {
                rect.style.fill = '#d00';
            }
            else {
                rect.style.fill = 'blue';
            }
            rect.classList.remove('highlighted');
        });
        elem.classList.remove('highlighted');
        elem.querySelectorAll('sylTextRect-display').forEach(rect => {
            rect.classList.remove('highlighted');
        });
    });
    Array.from(document.getElementsByClassName('selected')).forEach((el) => { el.setAttribute('fill', ''); });
}
exports.unsetGroupingHighlight = unsetGroupingHighlight;
/**
 * Highlight a staff a certain color.
 */
function highlight(staff, color) {
    const children = Array.from(staff.children);
    for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.tagName === 'path') {
            child.setAttribute('stroke', color);
        }
        else if (child.classList.contains('resizePoint') || child.id === 'resizeRect' || child.classList.contains('rotatePoint')) {
            return;
        }
        else if (child.classList.contains('layer')) {
            Array.from(child.children).forEach(cchild => { children.push(cchild); });
        }
        else if (document.getElementsByClassName('highlight-selected').length &&
            document.getElementsByClassName('highlight-selected')[0].id === 'highlight-neume'
            && child.classList.contains('syllable')) {
            Array.from(child.children).filter(el => el.classList.contains('neume')).forEach(cchild => { children.push(cchild); });
        }
        else {
            child.setAttribute('fill', color);
            let rects = child.querySelectorAll('.sylTextRect-display');
            if (!rects.length) {
                try {
                    rects = child.closest('.syllable').querySelectorAll('.sylTextRect-display');
                }
                catch (e) {
                    rects = [];
                }
            }
            rects.forEach(function (rect) {
                if (!(rect.closest('.syllable').classList.contains('selected') ||
                    rect.closest('.syl').classList.contains('selected') ||
                    rect.closest('.staff').classList.contains('selected')
                // rect.closest('.layer').classList.contains('selected')
                )) {
                    rect.style.fill = color;
                    rect.classList.add('highlighted');
                }
            });
        }
        child.classList.add('highlighted');
    }
    let width, height;
    /*try {
      width = Number(document.querySelector('.active-page').querySelector('svg').getAttribute('width').split('px')[0]);
      height = Number(document.querySelector('.active-page').querySelector('svg').getAttribute('height').split('px')[0]);
    } catch (e) {
      console.debug(e);
    }*/
    let stroke;
    if (width !== undefined && height !== undefined) {
        // idk looks good :')
        // TODO find a better way of calculating this as this actually doesn't work as well as 30px
        stroke = (width * height / 1000000).toString();
    }
    else {
        stroke = '30px';
    }
    staff.querySelectorAll('.nc, .custos, .clef, .accid, .divLine').forEach(el => {
        el.setAttribute('stroke', 'black');
        el.setAttribute('stroke-width', stroke);
    });
}
exports.highlight = highlight;
/**
 * Highlight each staff a different color.
 */
function setStaffHighlight() {
    const staves = Array.from(document.getElementsByClassName('staff'));
    for (let i = 0; i < staves.length; i++) {
        const staffColor = ColorPalette[i % ColorPalette.length];
        highlight(staves[i], staffColor);
    }
}
exports.setStaffHighlight = setStaffHighlight;
/**
 * Set a highlight by a different grouping.
 * @param grouping - Either "staff", "syllable", "neume", "selection", or "layerElement".
 */
function setGroupingHighlight(grouping) {
    unsetGroupingHighlight();
    if (grouping === 'staff') {
        setStaffHighlight();
        return;
    }
    else if (grouping === 'selection') {
        const temp = document.querySelector('.sel-by.is-active').id;
        switch (temp) {
            case 'selBySyllable':
            case 'selByBBox':
                grouping = 'syllable';
                break;
            case 'selByStaff':
                grouping = 'staff';
                break;
            case 'selByLayerElement':
                grouping = 'layerElement';
                break;
            case 'selByNeume':
            default:
                grouping = 'neume';
                break;
        }
        setGroupingHighlight(grouping);
        return;
    }
    let groups;
    if (grouping == 'layerElement') {
        groups = document.querySelectorAll('.accid, .clef, .custos, .divLine');
    }
    else {
        groups = document.getElementsByClassName(grouping);
    }
    for (let i = 0; i < groups.length; i++) {
        const groupColor = ColorPalette[i % ColorPalette.length];
        if ((groups[i].closest('.selected') === null) && !groups[i].classList.contains('selected')) {
            groups[i].setAttribute('fill', groupColor);
            const rects = groups[i].querySelectorAll('.sylTextRect-display');
            rects.forEach(function (rect) {
                if (rect.closest('.syl').classList.contains('selected') ||
                    rect.closest('.syllable').classList.contains('selected') ||
                    rect.closest('.staff').classList.contains('selected')
                // rect.closest('.layer').classList.contains('selected')
                ) {
                    return;
                }
                rect.style.fill = groupColor;
            });
            groups[i].classList.add('highlighted');
            groups[i].querySelectorAll('.sylTextRect-display').forEach(rect => {
                rect.classList.add('highlighted');
            });
        }
        else {
            if (!groups[i].classList.contains('selected')) {
                groups[i].setAttribute('fill', null);
            }
            else {
                groups[i].setAttribute('fill', '#d00');
            }
            groups[i].classList.remove('highlighted');
        }
    }
    document.querySelectorAll('.nc, .custos, .clef, .accid, .divLine').forEach(el => {
        el.setAttribute('stroke', 'black');
        el.setAttribute('stroke-width', '30px');
    });
}
exports.setGroupingHighlight = setGroupingHighlight;


/***/ }),

/***/ "./src/utils/ConvertMei.ts":
/*!*********************************!*\
  !*** ./src/utils/ConvertMei.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.checkOutOfBoundsGlyphs = exports.convertSbToStaff = exports.getSyllableText = exports.convertStaffToSb = exports.zip = void 0;
const random_1 = __webpack_require__(/*! ./random */ "./src/utils/random.ts");
const vkbeautify = __webpack_require__(/*! vkbeautify */ "./node_modules/vkbeautify/index.js");
const Notification = __webpack_require__(/*! ../utils/Notification */ "./src/utils/Notification.ts");
function zip(array1, array2) {
    const result = [];
    for (let i = 0; i < (array1.length > array2.length ? array2.length : array1.length); i++) {
        result.push([array1[i], array2[i]]);
    }
    return result;
}
exports.zip = zip;
function copyAttributes(src, dst) {
    for (const attr of src.attributes) {
        dst.setAttribute(attr.name, attr.value);
    }
}
function convertStaffToSb(staffBasedMei) {
    const parser = new DOMParser();
    const serializer = new XMLSerializer();
    const meiDoc = parser.parseFromString(staffBasedMei, 'text/xml');
    const mei = meiDoc.documentElement;
    // const precedesSyllables: Set<Element> = new Set();
    for (const section of mei.getElementsByTagName('section')) {
        const newStaff = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'staff');
        const newLayer = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'layer');
        newStaff.setAttribute('n', '1');
        newLayer.setAttribute('n', '1');
        newStaff.appendChild(newLayer);
        const staves = Array.from(section.getElementsByTagName('staff'));
        for (const staff of staves) {
            const layer = staff.getElementsByTagName('layer')[0];
            const sb = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'sb');
            sb.setAttribute('n', staff.getAttribute('n'));
            sb.setAttribute('facs', staff.getAttribute('facs'));
            sb.setAttribute('xml:id', staff.getAttribute('xml:id'));
            // Handle custos
            let custos = undefined;
            if ((newLayer.lastElementChild !== null) &&
                (newLayer.lastElementChild.tagName === 'custos')) {
                custos = newLayer.removeChild(newLayer.lastElementChild);
            }
            // Insert sb either as last child of layer or in the last syllable
            // const lastElement = newLayer.lastElementChild;
            // if ((lastElement !== null) && (lastElement.tagName === 'syllable') && lastElement.hasAttribute('precedes')) {
            //   if (custos !== undefined) lastElement.appendChild(custos);
            //   lastElement.appendChild(sb);
            // }
            // else {
            if (custos !== undefined)
                newLayer.appendChild(custos);
            newLayer.appendChild(sb);
            // }
            // Handle split syllables
            // for (const precedes of precedesSyllables) {
            //   const followsId = precedes.getAttribute('precedes');
            //   const followsSyllable = Array.from(layer.getElementsByTagName('syllable'))
            //     .filter(syllable => { return '#' + syllable.getAttribute('xml:id') === followsId; })
            //     .pop();
            //   if (followsSyllable !== undefined) {
            //     // Check for preceeding clef
            //     if ((followsSyllable.previousElementSibling !== null) &&
            //     (followsSyllable.previousElementSibling.tagName === 'clef')) {
            //       precedes.append(followsSyllable.previousElementSibling);
            //     }
            //     while (followsSyllable.firstChild !== null) {
            //       precedes.append(followsSyllable.firstChild);
            //     }
            //     followsSyllable.remove();
            //     precedes.removeAttribute('precedes');
            //     precedesSyllables.delete(precedes);
            //   }
            // }
            // Add remaining elements of layer to newLayer
            while (layer.firstElementChild !== null) {
                // if (layer.firstElementChild.hasAttribute('precedes')) {
                //   precedesSyllables.add(layer.firstElementChild);
                // }
                newLayer.appendChild(layer.firstElementChild);
            }
            staff.remove();
        }
        section.appendChild(newStaff);
    }
    return vkbeautify.xml(serializer.serializeToString(meiDoc));
}
exports.convertStaffToSb = convertStaffToSb;
function getSyllableText(syllable) {
    const syl = syllable.getElementsByTagName('syl')[0].childNodes[0];
    let sylText;
    if (syl) {
        sylText = syl.nodeValue;
    }
    else {
        sylText = '◊';
    }
    return sylText;
}
exports.getSyllableText = getSyllableText;
function convertSbToStaff(sbBasedMei) {
    const parser = new DOMParser();
    const meiDoc = parser.parseFromString(sbBasedMei, 'text/xml');
    const mei = meiDoc.documentElement;
    // Check neume without neume component
    const neumes = Array.from(mei.getElementsByTagName('neume'));
    for (const neume of neumes) {
        if (neume.getElementsByTagName('nc').length === 0) {
            // neume.remove();
            Notification.queueNotification('This file contains a neume without neume component!', 'warning');
        }
    }
    // Check syllable without neume 
    const syllables = Array.from(mei.getElementsByTagName('syllable'));
    for (const syllable of syllables) {
        if (syllable.getElementsByTagName('neume').length === 0) {
            // syllable.remove();
            Notification.queueNotification('This file contains a syllable without neume!', 'warning');
        }
    }
    // Go section by section just in case
    for (const section of mei.getElementsByTagName('section')) {
        // In case there are multiple staves here we want to preserve those
        // A separate array is necessary as the HTMLCollection will update!
        const originalStaves = Array.from(section.getElementsByTagName('staff'));
        for (const staff of originalStaves) {
            const layer = staff.getElementsByTagName('layer')[0];
            // First pass: get all sb elements as direct children of layer
            const sbArray = Array.from(layer.getElementsByTagName('sb'));
            for (const sb of sbArray) {
                if (sb.parentElement.tagName !== 'layer') {
                    const origSyllable = sb.parentElement;
                    let neumeBehind = false, neumeAhead = false;
                    const childArray = Array.from(origSyllable.children);
                    const sbIndex = childArray.indexOf(sb);
                    for (const neume of origSyllable.getElementsByTagName('neume')) {
                        const ind = childArray.indexOf(neume);
                        if (ind < sbIndex) {
                            neumeBehind = true;
                        }
                        else if (ind > sbIndex) {
                            neumeAhead = true;
                        }
                    }
                    if (!neumeBehind && neumeAhead) {
                        origSyllable.insertAdjacentElement('beforebegin', sb);
                    }
                    else if (neumeBehind && !neumeAhead) {
                        origSyllable.insertAdjacentElement('afterend', sb);
                    }
                    else if (neumeBehind && neumeAhead) {
                        // We may need to split the syllable here
                        const newSyllable = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'syllable');
                        newSyllable.setAttribute('xml:id', 'm-' + random_1.uuidv4());
                        newSyllable.setAttribute('follows', '#' + origSyllable.getAttribute('xml:id'));
                        origSyllable.setAttribute('precedes', '#' + newSyllable.getAttribute('xml:id'));
                        const sbIndex = childArray.indexOf(sb);
                        for (const child of childArray) {
                            const index = childArray.indexOf(child);
                            if (index > sbIndex) {
                                newSyllable.appendChild(child);
                            }
                        }
                        origSyllable.insertAdjacentElement('afterend', sb);
                        sb.insertAdjacentElement('afterend', newSyllable);
                        // Move any custos in origSyllable out of it
                        for (const custos of origSyllable.getElementsByTagName('custos')) {
                            origSyllable.insertAdjacentElement('afterend', custos);
                        }
                        // Move any clef in newSyllable out of it
                        for (const clef of newSyllable.getElementsByTagName('clef')) {
                            newSyllable.insertAdjacentElement('beforebegin', clef);
                        }
                    }
                    else {
                        console.warn('NONE BEHIND NONE AHEAD');
                        console.debug(origSyllable);
                    }
                }
            }
            const sbs = Array.from(layer.getElementsByTagName('sb'));
            for (let i = 0; i < sbs.length; i++) {
                const currentSb = sbs[i];
                const nextSb = (sbs.length > i + 1) ? sbs[i + 1] : undefined;
                const newStaff = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'staff');
                copyAttributes(currentSb, newStaff);
                const newLayer = meiDoc.createElementNS('http://www.music-encoding.org/ns/mei', 'layer');
                newLayer.setAttribute('n', '1');
                newLayer.setAttribute('xml:id', 'm-' + random_1.uuidv4());
                newStaff.appendChild(newLayer);
                const childrenArray = Array.from(layer.children);
                const copyArray = childrenArray.slice(childrenArray.indexOf(currentSb) + 1, childrenArray.indexOf(nextSb));
                for (const child of copyArray) {
                    newLayer.appendChild(child);
                }
                section.insertBefore(newStaff, staff);
            }
            staff.remove();
        }
    }
    // Second pass on all syllables to handle clefs and custos that might remain
    const newSyllables = Array.from(mei.getElementsByTagName('syllable'));
    for (const syllable of mei.querySelectorAll('syllable')) {
        for (const clef of syllable.querySelectorAll('clef')) {
            syllable.insertAdjacentElement('beforebegin', clef);
        }
        for (const custos of syllable.querySelectorAll('custos')) {
            syllable.insertAdjacentElement('afterend', custos);
        }
        // Check syllables that contains @precedes or @follows
        // Update syllable arrays for each syllable
        const syllableIdx = newSyllables.indexOf(syllable);
        // For each toggle-linked syllable
        // Set @precedes and @follows to make sure pointing to the correct syllable
        if (syllable.hasAttribute('precedes')) {
            // Get xml:id of the next syllable (without the #, if it exists)
            const nextSyllableId = syllable.getAttribute('precedes').replace('#', '');
            // Find the next syllable and its index in the array
            let nextSyllableIdx;
            const nextSyllable = newSyllables.find((element, idx) => {
                if (element.getAttribute('xml:id') === nextSyllableId) {
                    nextSyllableIdx = idx;
                    return true;
                }
                return false;
            });
            // Condition 1: The next (following) syllable cannot be found
            if (!nextSyllable) {
                const sylText = getSyllableText(syllable);
                Notification.queueNotification(`Missing the 2nd part of the toggle-linked syllable (${sylText})`, 'error');
                continue;
            }
            // Condition 2: The next syllable has been found, but the @follows attribute does NOT EXIST
            if (!nextSyllable.hasAttribute('follows')) {
                const sylText = getSyllableText(syllable);
                Notification.queueNotification(`The 2nd part of the toggle-linked syllable (${sylText}) does not link to any syllable`, 'error');
                continue;
            }
            // Condition 3: The next syllable's @follows attribute exists, but it is not in the correct format #id
            if (nextSyllable.getAttribute('follows') != '#' + syllable.getAttribute('xml:id')) {
                const sylText = getSyllableText(syllable);
                Notification.queueNotification(`The 2nd part of the toggle-linked syllable (${sylText}) links to the wrong syllable`, 'error');
                continue;
            }
            // Condition 4:
            // Since the @follows value is correct, a pair of syllables exist for the toggle-linked syllable.
            // Check if the @follows syllable is the next syllable (index-wise) in the array:
            if (nextSyllableIdx !== syllableIdx + 1) {
                const sylText = getSyllableText(syllable);
                const unexpectedSylsText = newSyllables
                    .slice(syllableIdx + 1, nextSyllableIdx)
                    .map((syllable) => getSyllableText(syllable));
                const sylsText = [sylText, ...unexpectedSylsText].join(' - ');
                Notification.queueNotification(`Unexpected syllable(s) inside toggle-linked syllable: ${sylsText}`, 'error');
            }
        }
        // Toggle-linked syllables: Check the FOLLOWING syllable
        else if (syllable.hasAttribute('follows')) {
            const prevSyllableId = syllable.getAttribute('follows').replace('#', '');
            const prevSyllable = newSyllables.find((syllable) => syllable.getAttribute('xml:id') === prevSyllableId);
            // Condition 1: The previous syllable does not exist
            if (!prevSyllable) {
                const sylText = getSyllableText(syllable);
                Notification.queueNotification(`Missing the 1st part of the toggle-linked syllable (${sylText})`, 'error');
                continue;
            }
            // Condition 2: The previous syllable exists, but the @precedes attribute does NOT EXIST
            if (!prevSyllable.hasAttribute('precedes')) {
                const sylText = getSyllableText(prevSyllable);
                Notification.queueNotification(`The 1st part of the toggle-linked syllable (${sylText}) does not link to any syllable`, 'error');
                continue;
            }
            // Condition 3: The previous syllable's @precedes attribute exists, but it is not in the correct format #id
            if (prevSyllable.getAttribute('precedes') != '#' + syllable.getAttribute('xml:id')) {
                const sylText = getSyllableText(prevSyllable);
                Notification.queueNotification(`The 1st part of the toggle-linked syllable (${sylText}) links to the wrong syllable`, 'error');
            }
        }
    }
    const serializer = new XMLSerializer();
    return vkbeautify.xml(serializer.serializeToString(meiDoc));
}
exports.convertSbToStaff = convertSbToStaff;
function checkOutOfBoundsGlyphs(meiString) {
    const parser = new DOMParser();
    const meiDoc = parser.parseFromString(meiString, 'text/xml');
    const mei = meiDoc.documentElement;
    // Check for out-of-bound glyphs
    const zones = Array.from(mei.querySelectorAll('zone'));
    const dimensions = mei.querySelector('surface');
    const meiLrx = Number(dimensions.getAttribute('lrx')), meiLry = Number(dimensions.getAttribute('lry'));
    function isAttrOutOfBounds(zone, attr) {
        const coord = Number(zone.getAttribute(attr));
        const comp = (attr == 'lrx' || attr == 'ulx') ? meiLrx : meiLry;
        return coord < 0 || coord > comp;
    }
    // isOutOfBounds = whether there exists at least one facsimile that is out of bounds
    const isOutOfBounds = zones.some((zone) => ['ulx', 'uly', 'lrx', 'lry'].some((attr) => isAttrOutOfBounds(zone, attr)));
    if (isOutOfBounds)
        Notification.queueNotification('This folio contains glyph(s) placed out-of-bounds!', 'warning');
}
exports.checkOutOfBoundsGlyphs = checkOutOfBoundsGlyphs;


/***/ }),

/***/ "./src/utils/Coordinates.ts":
/*!**********************************!*\
  !*** ./src/utils/Coordinates.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlyphBBox = exports.isOutOfSVGBounds = exports.getStaffByCoords = exports.getStaffIdByCoords = exports.getSVGRelCoords = void 0;
const SelectTools_1 = __webpack_require__(/*! ./SelectTools */ "./src/utils/SelectTools.ts");
/**
 * Get SVG relative coordinates given clientX and clientY
 * Source: https://stackoverflow.com/questions/29261304
 */
function getSVGRelCoords(clientX, clientY) {
    const pt = new DOMPoint(clientX, clientY);
    const svg = document.querySelector('.active-page > .definition-scale');
    const system = svg.querySelector('.system');
    const { x, y } = pt.matrixTransform(system.getScreenCTM().inverse());
    return { x, y };
    // If there is some issue with coordinates, this may fix the issue:
    // const svg = document.querySelector<SVGSVGElement>('#svg_group');
    // const { x, y } = pt.matrixTransform(svg.getScreenCTM().inverse());
}
exports.getSVGRelCoords = getSVGRelCoords;
/**
 * Get ID of staff by client's x-y coordinates.
 * This function considers the *visual* bounding box of the staff
 * based on its staff lines, instead of the SVG element itself.
 */
function getStaffIdByCoords(clientX, clientY) {
    const staves = Array.from(document.querySelectorAll('.staff'));
    const staffBBoxes = staves.map(staff => SelectTools_1.getStaffBBox(staff));
    // find the staff that the cursor is inside
    const { x, y } = getSVGRelCoords(clientX, clientY);
    const staff = staffBBoxes.find((bbox) => x <= bbox.lrx && x >= bbox.ulx && y <= bbox.lry && y >= bbox.uly);
    // If there is issues with finding the staff, this may be more accurate:
    // return (pt.x > ulx && pt.x < lrx) &&
    //   (pt.y > (uly + (pt.x - ulx) * Math.tan(rotate))) &&
    //   (pt.y < (lry - (lrx - pt.x) * Math.tan(rotate)));
    // if the cursor is not inside any staff, then explicitly return null
    return staff ? staff.id : null;
}
exports.getStaffIdByCoords = getStaffIdByCoords;
/**
 * Get staff by client's x-y coordinates; wrapper for getStaffIdByCoords, but
 *   returns the element, not the ID
 */
function getStaffByCoords(clientX, clientY) {
    const staffId = getStaffIdByCoords(clientX, clientY);
    return document.querySelector(`#${staffId}`);
}
exports.getStaffByCoords = getStaffByCoords;
function isOutOfSVGBounds(x, y) {
    const bgImg = document.querySelector('#bgimg');
    return (x <= 0 || x >= Number(bgImg.getAttribute('width')) ||
        y <= 0 || y >= Number(bgImg.getAttribute('height')));
}
exports.isOutOfSVGBounds = isOutOfSVGBounds;
/**
 * Get bounding box (lrx, lry, ulx, uly) of a glyph, which
 * is a <use> element in the SVG
 */
function getGlyphBBox(g) {
    const rect = (g.tagName == 'rect') ? g.getBBox() : g.parentNode.getBBox();
    return {
        ulx: rect.x,
        uly: rect.y,
        lrx: rect.x + rect.width,
        lry: rect.y + rect.height
    };
}
exports.getGlyphBBox = getGlyphBBox;


/***/ }),

/***/ "./src/utils/DragHandler.ts":
/*!**********************************!*\
  !*** ./src/utils/DragHandler.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const d3 = __webpack_require__(/*! d3 */ "d3");
const Coordinates_1 = __webpack_require__(/*! ./Coordinates */ "./src/utils/Coordinates.ts");
const Notification_1 = __webpack_require__(/*! ./Notification */ "./src/utils/Notification.ts");
class DragHandler {
    /**
     * @param selector - CSS selector of element to apply drag handler to.
     */
    constructor(neonView, selector) {
        this.dragStartCoords = [-1, -1];
        this.neonView = neonView;
        this.selector = selector;
    }
    /**
     * Initialize the dragging action and handler for selected elements.
     */
    dragInit() {
        // Drag effects
        function dragStarted() {
            this.dragStartCoords = [d3.event.x, d3.event.y];
            this.dx = 0;
            this.dy = 0;
            const target = d3.event.sourceEvent.target;
            if (target.classList.contains('staff')) {
                d3.select(this.selector).call(dragBehaviour);
            }
        }
        // Adding listeners
        const dragBehaviour = d3.drag()
            .on('start', dragStarted.bind(this))
            .on('drag', this.dragging.bind(this))
            .on('end', this.dragEnded.bind(this));
        const activeNc = d3.selectAll('.selected');
        activeNc.call(dragBehaviour);
        const selection = Array.from(document.querySelectorAll('.selected'));
        this.selection = selection.concat(Array.from(document.querySelectorAll('.resizePoint')));
    }
    dragging() {
        this.dx = d3.event.x - this.dragStartCoords[0];
        this.dy = d3.event.y - this.dragStartCoords[1];
        this.moveElements(this.selection, this.dx, this.dy);
        /*
         * if we're dragging a syllable (or neume etc) then there won't be a syl selected
         * then we don't want the bounding box (if it is displayed) to move when dragging the neumes
         * it will be a child of the element in selection, so it will get moved in the above loop
         * so we cancel that movement out here
         */
        const syls = this.selection.filter((el) => el.classList.contains('syl'));
        if (syls.length === 0) {
            const bboxes = Array.from(document.querySelectorAll('.syllable.selected'))
                .map(el => el.querySelector('.sylTextRect-display'));
            this.moveElements(bboxes, -this.dx, -this.dy);
        }
    }
    dragEnded() {
        // If the selection has not been moved more than 5 pixels in any direction,
        // do not do any action
        const xDiff = Math.abs(this.dx), yDiff = Math.abs(this.dy);
        if (xDiff <= 5 && yDiff <= 5) {
            this.reset();
            this.dragInit();
            return;
        }
        // Filter selection for draggable elements
        const selection = this.selection.filter((el) => !el.classList.contains('resizePoint'));
        // If the cursor is out of bounds or the selection array is out of bounds,
        // drag actions should not happen. Return an error notification and reset
        // the drag handler
        if (this.isCursorOutOfBounds() || this.isDragOutOfBounds(selection)) {
            // Return the selection back to normal state
            this.returnElements(this.selection);
            // Return the bounding boxes as well
            const bboxes = Array.from(document.querySelectorAll('.syllable.selected'))
                .map(el => el.querySelector('.sylTextRect-display'));
            this.returnElements(bboxes);
            this.reset();
            this.dragInit();
            return Notification_1.queueNotification('[FAIL] Glyphs were placed out of bounds! Drag action failed.', 'error');
        }
        // Create the chain editor action for selection
        const paramArray = [];
        selection.forEach((el) => {
            const id = el.tagName === 'rect' ? el.closest('.syl').id : el.id;
            const dragAction = {
                action: 'drag',
                param: {
                    elementId: id,
                    x: this.dx,
                    y: -this.dy,
                }
            };
            paramArray.push(dragAction);
            if (el.classList.contains('divLine') || el.classList.contains('accid') || el.classList.contains('custos')) {
                // Else, also add the ChangeStaffAction (for divline, accid, or custo)
                const { clientX, clientY } = d3.event.sourceEvent;
                const newStaff = Coordinates_1.getStaffIdByCoords(clientX, clientY);
                const staffAction = {
                    action: 'changeStaffTo',
                    param: {
                        elementId: id,
                        // if divline is moved to the background (and not a staff),
                        // set the staffId to the original staff
                        staffId: newStaff || el.closest('.staff').id,
                    }
                };
                paramArray.push(staffAction);
            }
        });
        const editorAction = {
            action: 'chain',
            param: paramArray
        };
        // Send editor action
        this.neonView
            .edit(editorAction, this.neonView.view.getCurrentPageURI())
            .then(() => {
            this.neonView.updateForCurrentPage();
            this.endOptionsSelection();
            this.reset();
            this.dragInit();
        });
    }
    /** Set the d3 action to use for [[reset]]. */
    resetTo(reset) {
        this.resetToAction = reset;
    }
    /** Reset to a previous d3 action for [[this.selector]]. */
    reset() {
        if (this.resetToAction !== undefined) {
            d3.select(this.selector).call(this.resetToAction);
        }
    }
    endOptionsSelection() {
        const moreEdit = document.getElementById('moreEdit');
        if (moreEdit) {
            moreEdit.innerHTML = '';
            moreEdit.parentElement.classList.add('hidden');
        }
    }
    /**
     * Visually move the selected elements by `dx` and `dy`; (not using d3)
     */
    moveElements(selection, dx, dy) {
        selection.filter(el => el !== null).forEach((el) => {
            el.setAttribute('transform', `translate(${dx},${dy})`);
        });
    }
    /**
     * Visually return selected elements to their original positions
     * by removing the transform attribute
     */
    returnElements(selection) {
        selection.filter(el => el !== null).forEach((el) => {
            el.removeAttribute('transform');
        });
    }
    isCursorOutOfBounds() {
        const endX = this.dragStartCoords[0] + this.dx;
        const endY = this.dragStartCoords[1] + this.dy;
        return Coordinates_1.isOutOfSVGBounds(endX, endY);
    }
    /**
     * Returns whether the selection array is within the bounds of the SVG
     * @param {SVGGraphicsElement[]} selection
     * @returns {boolean} Is selection out of bounds
     */
    isDragOutOfBounds(selection) {
        // Get the bounding boxes of all glyphs (<use> elements) within the selection array
        const isBBoxDisplayed = document.querySelector('#displayBBox').checked;
        const glyphSelector = isBBoxDisplayed ? 'use, rect' : 'use';
        const glyphs = selection.reduce((acc, el) => acc.concat(...el.querySelectorAll(glyphSelector)), []);
        const glyphBBoxes = glyphs.map(Coordinates_1.getGlyphBBox);
        // Get the surrounding bounding box of the selected elements
        const selectionBBox = glyphBBoxes.reduce((bbox, curr) => {
            return {
                ulx: Math.min(bbox.ulx, curr.ulx),
                uly: Math.min(bbox.uly, curr.uly),
                lrx: Math.max(bbox.lrx, curr.lrx),
                lry: Math.max(bbox.lry, curr.lry),
            };
        }, {
            ulx: Number.MAX_VALUE,
            uly: Number.MAX_VALUE,
            lrx: Number.MIN_VALUE,
            lry: Number.MIN_VALUE,
        });
        const { ulx, uly, lrx, lry } = selectionBBox;
        return Coordinates_1.isOutOfSVGBounds(ulx + this.dx, uly + this.dy) || Coordinates_1.isOutOfSVGBounds(lrx + this.dx, lry + this.dy);
    }
}
exports.default = DragHandler;


/***/ }),

/***/ "./src/utils/EditContents.ts":
/*!***********************************!*\
  !*** ./src/utils/EditContents.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Contents of navbar menu after switching to edit mode.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.undoRedoPanel = exports.navbarFinalize = exports.navbarDropdownMEIActionsMenu = exports.navbarDropdownFileMenu = void 0;
// "File" Dropdown
exports.navbarDropdownFileMenu = document.createElement('div');
exports.navbarDropdownFileMenu.classList.add('navbar-item', 'has-dropdown', 'is-hoverable');
const fileDropdownBtn = document.createElement('div');
fileDropdownBtn.classList.add('navbar-btn');
fileDropdownBtn.innerHTML = `<div>File</div>`;
const fileNavbarContents = document.createElement('div');
fileNavbarContents.classList.add('navbar-dropdown');
fileNavbarContents.id = 'navbar-dropdown-options';
const fileDropdownContents = [
    ['save', 'Save'],
    ['export', 'Save and Export to File'],
    ['getmei', 'Download MEI']
];
fileDropdownContents.forEach(content => {
    const item = document.createElement('div');
    item.id = content[0];
    item.classList.add('navbar-dropdown-item');
    item.textContent = content[1];
    fileNavbarContents.appendChild(item);
});
exports.navbarDropdownFileMenu.appendChild(fileDropdownBtn);
exports.navbarDropdownFileMenu.appendChild(fileNavbarContents);
// "MEI Actions" Dropdown
exports.navbarDropdownMEIActionsMenu = document.createElement('div');
exports.navbarDropdownMEIActionsMenu.classList.add('navbar-item', 'has-dropdown', 'is-hoverable');
const meiActionsDropdownBtn = document.createElement('div');
meiActionsDropdownBtn.classList.add('navbar-btn');
meiActionsDropdownBtn.innerHTML = `<div>MEI Actions</div>`;
const meiActionsNavbarContents = document.createElement('div');
meiActionsNavbarContents.classList.add('navbar-dropdown');
meiActionsNavbarContents.id = 'navbar-dropdown-options';
const meiActionsDropdownContents = [
    ['remove-empty-syls', 'Remove Empty Syllables'],
    ['remove-empty-neumes', 'Remove Empty Neumes'],
    ['revert', 'Revert']
];
meiActionsDropdownContents.forEach(content => {
    const item = document.createElement('div');
    item.id = content[0];
    item.classList.add('navbar-dropdown-item');
    item.textContent = content[1];
    meiActionsNavbarContents.appendChild(item);
});
exports.navbarDropdownMEIActionsMenu.appendChild(meiActionsDropdownBtn);
exports.navbarDropdownMEIActionsMenu.appendChild(meiActionsNavbarContents);
/**
 * Finalize option in the navbar for rodan
 */
exports.navbarFinalize = '<a id="finalize" class="navbar-item"> Finalize MEI </a>';
/**
 * Contents of the undo/redo panel with buttons
 */
exports.undoRedoPanel = `<button class="side-panel-btn" id="undo">Undo</button>
  <button class="side-panel-btn" id="redo">Redo</button>`;


/***/ }),

/***/ "./src/utils/EditControls.ts":
/*!***********************************!*\
  !*** ./src/utils/EditControls.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.initUndoRedoPanel = exports.initNavbar = void 0;
const Notification = __webpack_require__(/*! ./Notification */ "./src/utils/Notification.ts");
const ConvertMei_1 = __webpack_require__(/*! ./ConvertMei */ "./src/utils/ConvertMei.ts");
/**
 * Set listener on switching EditMode button to File dropdown in the navbar.
 */
function initNavbar(neonView) {
    // setup navbar listeners
    const navbarDropdowns = document.querySelectorAll('.navbar-item.has-dropdown.is-hoverable');
    Array.from(navbarDropdowns).forEach((dropDown) => {
        dropDown.addEventListener('mouseover', () => {
            //
        });
    });
    document.getElementById('save').addEventListener('click', () => {
        neonView.save().then(() => {
            Notification.queueNotification('Saved', 'success');
        });
    });
    document.body.addEventListener('keydown', (evt) => {
        if (evt.key === 's') {
            neonView.save().then(() => {
                Notification.queueNotification('Saved', 'success');
            });
        }
    });
    document.getElementById('export').addEventListener('click', () => {
        neonView.export().then(manifest => {
            const link = document.createElement('a');
            link.href = manifest;
            link.download = neonView.name + '.jsonld';
            document.body.appendChild(link);
            link.click();
            link.remove();
            Notification.queueNotification('Saved', 'success');
        });
    });
    // Download link for MEI
    // Is an actual file with a valid URI except in local mode where it must be generated.
    document.getElementById('getmei').addEventListener('click', () => {
        const uri = neonView.view.getCurrentPageURI();
        neonView.getPageMEI(uri).then(mei => {
            const data = 'data:application/mei+xml;base64,' + window.btoa(ConvertMei_1.convertStaffToSb(mei));
            document.getElementById('getmei').setAttribute('href', data);
            document.getElementById('getmei').setAttribute('download', neonView.view.getPageName() + '.mei');
        });
    });
    // Event listener for "Remove Empty Syllables" button inside "MEI Actions" dropdown
    document.getElementById('remove-empty-syls').addEventListener('click', function () {
        const uri = neonView.view.getCurrentPageURI();
        neonView.getPageMEI(uri).then(meiString => {
            const parser = new DOMParser();
            const meiDoc = parser.parseFromString(meiString, 'text/xml');
            const mei = meiDoc.documentElement;
            const syllables = Array.from(mei.getElementsByTagName('syllable'));
            // Check for syllables without neumes
            let hasEmptySyllables = false;
            const removeSyllableActions = [];
            for (const syllable of syllables) {
                // if empty syllable found, create action object for removing it
                if (syllable.getElementsByTagName('neume').length === 0) {
                    const toRemove = {
                        action: 'remove',
                        param: {
                            elementId: syllable.getAttribute('xml:id')
                        }
                    };
                    // add action object to array (chain) of action objects
                    removeSyllableActions.push(toRemove);
                    hasEmptySyllables = true;
                }
            }
            // check if empty syllables were found
            if (!hasEmptySyllables) {
                Notification.queueNotification('No empty syllables found', 'warning');
            }
            else {
                // create "chain action" object
                const chainRemoveAction = {
                    action: 'chain',
                    param: removeSyllableActions
                };
                // execute action that removes all empty syllables
                // "result" value is true or false (true if chain of actions was successful)
                neonView.edit(chainRemoveAction, uri).then((result) => {
                    if (result) {
                        neonView.updateForCurrentPage();
                        Notification.queueNotification('Removed empty Syllables', 'success');
                    }
                    else {
                        Notification.queueNotification('Failed to remove empty Syllables', 'error');
                    }
                });
            }
        });
    });
    // Event listener for "Remove Empty Neumes" button inside "MEI Actions" dropdown
    document.getElementById('remove-empty-neumes').addEventListener('click', function () {
        const uri = neonView.view.getCurrentPageURI();
        neonView.getPageMEI(uri).then(meiString => {
            const parser = new DOMParser();
            const meiDoc = parser.parseFromString(meiString, 'text/xml');
            const mei = meiDoc.documentElement;
            const neumes = Array.from(mei.getElementsByTagName('neume'));
            // Check for neumes without neume components
            let hasEmptyNeumes = false;
            const removeNeumeActions = [];
            for (const neume of neumes) {
                // if empty neume found, create action object for removing it
                if (neume.getElementsByTagName('nc').length === 0) {
                    const toRemove = {
                        action: 'remove',
                        param: {
                            elementId: neume.getAttribute('xml:id')
                        }
                    };
                    // add action object to array (chain) of action objects
                    removeNeumeActions.push(toRemove);
                    hasEmptyNeumes = true;
                }
            }
            // check if empty neumes were found
            if (!hasEmptyNeumes) {
                Notification.queueNotification('No empty Neumes found', 'warning');
            }
            else {
                // create "chain action" object
                const chainRemoveAction = {
                    action: 'chain',
                    param: removeNeumeActions,
                };
                // execute action that removes all empty neumes
                // "result" value is true or false (true if chain of actions was successful)
                neonView.edit(chainRemoveAction, uri).then((result) => {
                    if (result) {
                        neonView.updateForCurrentPage();
                        Notification.queueNotification('Removed empty Neumes', 'success');
                    }
                    else {
                        Notification.queueNotification('Failed to remove empty Neumes', 'error');
                    }
                });
            }
        });
    });
    document.getElementById('remove-out-of-bounds-glyphs').addEventListener('click', function () {
        const uri = neonView.view.getCurrentPageURI();
        neonView.getPageMEI(uri).then(meiString => {
            // Load MEI document into parser
            const parser = new DOMParser();
            const meiDoc = parser.parseFromString(meiString, 'text/xml');
            const mei = meiDoc.documentElement;
            // Get bounds of the MEI
            const dimensions = mei.querySelector('surface');
            const meiLrx = Number(dimensions.getAttribute('lrx')), meiLry = Number(dimensions.getAttribute('lry'));
            function isAttrOutOfBounds(zone, attr) {
                const coord = Number(zone.getAttribute(attr));
                const comp = (attr == 'lrx' || attr == 'ulx') ? meiLrx : meiLry;
                return coord < 0 || coord > comp;
            }
            // Get array of zones that are out of bound, and create a hash map
            // for fast retrieval
            const zones = Array.from(mei.querySelectorAll('zone'));
            const outOfBoundZones = zones.filter(zone => ['ulx', 'uly', 'lrx', 'lry'].some((attr) => isAttrOutOfBounds(zone, attr)));
            const zoneMap = new Map(outOfBoundZones.map(zone => [zone.getAttribute('xml:id'), zone]));
            // Filter out the neume components and divlines that have a zone out of bounds
            const glyphs = Array.from(mei.querySelectorAll('nc, divLine, clef, accid'));
            const outOfBoundGlyphs = glyphs.filter(glyph => {
                if (glyph.hasAttribute('facs')) {
                    const facsId = glyph.getAttribute('facs').slice(1);
                    return zoneMap.has(facsId);
                }
                return false;
            });
            // Check if there are no out-of-bound glyphs, and 
            // exit, since no edit needs to be made.
            if (outOfBoundGlyphs.length === 0) {
                return Notification.queueNotification('There are no out-of-bound glyphs to remove.', 'warning');
            }
            // Create remove actions and chain action to send to Verovio
            const removeActions = outOfBoundGlyphs.map(glyph => {
                return {
                    action: 'remove',
                    param: {
                        elementId: glyph.getAttribute('xml:id'),
                    }
                };
            });
            const chainAction = {
                action: 'chain',
                param: removeActions,
            };
            neonView.edit(chainAction, uri)
                .then((result) => {
                if (result) {
                    neonView.updateForCurrentPage();
                    Notification.queueNotification('Successfully removed out-of-bounds syllables.', 'success');
                }
                else {
                    Notification.queueNotification('Failed to remove out-of-bound syllables.', 'error');
                }
            });
        });
    });
    // Event listener for "Revert" button inside "MEI Actions" dropdown
    document.getElementById('revert').addEventListener('click', function () {
        if (window.confirm('Reverting will cause all changes to be lost. Press OK to continue.')) {
            neonView.deleteDb().then(() => {
                window.location.reload();
            });
        }
    });
}
exports.initNavbar = initNavbar;
/**
 * Initialize the undo/redo panel
 */
function initUndoRedoPanel(neonView) {
    /**
     * Tries to undo an action and update the page if it succeeds.
     */
    function undoHandler() {
        neonView.undo().then((result) => {
            if (result) {
                neonView.updateForCurrentPage();
            }
            else {
                console.error('Failed to undo action');
            }
        });
    }
    /**
     * Tries to redo an action and update the page if it succeeds.
     */
    function redoHandler() {
        neonView.redo().then((result) => {
            if (result) {
                neonView.updateForCurrentPage();
            }
            else {
                console.error('Failed to redo action');
            }
        });
    }
    document.getElementById('undo').addEventListener('click', undoHandler);
    document.body.addEventListener('keydown', (evt) => {
        if (evt.key === 'z' && (evt.ctrlKey || evt.metaKey)) {
            undoHandler();
        }
    });
    document.getElementById('redo').addEventListener('click', redoHandler);
    document.body.addEventListener('keydown', (evt) => {
        if ((evt.key === 'Z' || (evt.key === 'z' && evt.shiftKey)) && (evt.ctrlKey || evt.metaKey)) {
            redoHandler();
        }
    });
}
exports.initUndoRedoPanel = initUndoRedoPanel;


/***/ }),

/***/ "./src/utils/LocalSettings.ts":
/*!************************************!*\
  !*** ./src/utils/LocalSettings.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.setSettings = exports.getSettings = void 0;
/**
 * The one instance of LocalSettings that will be created and
 * used by the editor.
 *
 * Use the functions `getSettings()` and `setSettings()`
 * to access this instance.
 */
let localSettings = null;
/**
 * Default settings, which should be set for a folio with no
 * localStorage value.
 *
 * This should be updated alongside the interface `Settings`
 * any time we want to add a new setting to store in localStorage.
 */
const DEFAULT_SETTINGS = {
    zoom: 100,
    glyphOpacity: 100,
    imageOpacity: 100,
    highlightMode: 'none',
    selectionMode: 'selBySyllable',
    displayBBox: false,
    displayText: false,
    displayInfo: false,
    viewBox: null
};
class LocalSettings {
    constructor(folioId) {
        localSettings = this;
        this.id = folioId;
        this.load();
    }
    /**
     * Load settings from localStorage, and sync loaded settings with
     * new fields that may not be in localStorage.
     */
    load() {
        try {
            const stored = JSON.parse(window.localStorage.getItem(this.id));
            this.sync(stored);
        }
        catch (error) {
            // If localStorage value is not a JSON object (for instance, an empty string),
            // a SyntaxError will be thrown. We must handle it by calling sync()
            // with an empty JSON object.
            this.sync({});
        }
    }
    /**
     * Set new fields in localStorage, as a "union" of old and new settings.
     */
    set(params) {
        this.settings = Object.assign(Object.assign({}, this.settings), params);
        window.localStorage.setItem(this.id, JSON.stringify(this.settings));
    }
    /**
     * Sync settings that may not be included in user's localStorage,
     * such as fields that have been added to localStorage in a new
     * update of Neon.
     */
    sync(stored) {
        this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), stored);
        window.localStorage.setItem(this.id, JSON.stringify(this.settings));
    }
}
/**
 * Get localStorage settings for the folio.
 */
function getSettings() {
    return localSettings.settings;
}
exports.getSettings = getSettings;
/**
 * Set specific localStorage settings for the folio.
 */
function setSettings(params) {
    localSettings.set(params);
}
exports.setSettings = setSettings;
exports.default = LocalSettings;


/***/ }),

/***/ "./src/utils/ModalWindow.ts":
/*!**********************************!*\
  !*** ./src/utils/ModalWindow.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ModalWindow = exports.ModalWindowView = void 0;
const Contents_1 = __webpack_require__(/*! ../SquareEdit/Contents */ "./src/SquareEdit/Contents.ts");
const dashboard_components_1 = __webpack_require__(/*! ../Dashboard/dashboard_components */ "./src/Dashboard/dashboard_components.ts");
/**
 * Defines modal types.
 * To create new modal window types, add enum option and implement logic inside Modal class.
 */
var ModalWindowView;
(function (ModalWindowView) {
    ModalWindowView[ModalWindowView["EDIT_TEXT"] = 0] = "EDIT_TEXT";
    ModalWindowView[ModalWindowView["HOTKEYS"] = 1] = "HOTKEYS";
    ModalWindowView[ModalWindowView["VALIDATION_STATUS"] = 2] = "VALIDATION_STATUS";
    ModalWindowView[ModalWindowView["DOCUMENT_UPLOAD"] = 3] = "DOCUMENT_UPLOAD";
})(ModalWindowView = exports.ModalWindowView || (exports.ModalWindowView = {}));
var ModalWindowState;
(function (ModalWindowState) {
    ModalWindowState[ModalWindowState["OPEN"] = 0] = "OPEN";
    ModalWindowState[ModalWindowState["CLOSED"] = 1] = "CLOSED";
})(ModalWindowState || (ModalWindowState = {}));
/**
 * Modal class is used to create and control state/content
 * of modal windows in Neon.
 */
class ModalWindow {
    /**
     * Set neonView instance context for this modal window instance.
     * @param neonView neonView context for Modal instance
     */
    constructor(neonView) {
        /**
         * Fill modal window with content for updating syllable text
         */
        this.openEditSylTextModalWindow = function () {
            // make sure no other modal content is being displayed
            Array.from(document.getElementsByClassName('neon-modal-window-content')).forEach((elem) => {
                elem.classList.remove('visible');
            });
            // set up Edit Syllable Text modal window
            document.getElementById('neon-modal-window-content-edit-text').classList.add('visible');
            // Reset "Cancel" button event listener
            document.getElementById('neon-modal-window-edit-text-cancel').removeEventListener('click', this.hideModalWindow);
            document.getElementById('neon-modal-window-edit-text-cancel').addEventListener('click', this.hideModalWindow.bind(this));
            // Reset "Save" button event listener
            document.getElementById('neon-modal-window-edit-text-save').removeEventListener('click', this.updateSylText.bind(this));
            document.getElementById('neon-modal-window-edit-text-save').addEventListener('click', this.updateSylText.bind(this));
            // display modal window
            document.getElementById('neon-modal-window-container').style.display = 'flex';
            this.focusModalWindow();
        };
        /**
         * Update text of selected-to-edit syllables with user-provided text
         */
        this.updateSylText = function () {
            // span and current text of selected-to-edit syllable and filter out unwanted chars
            const span = document.getElementById('syl_text').querySelectorAll('span.selected-to-edit')[0];
            const removeSymbol = /\u{25CA}/u;
            const orig = span.textContent.replace(removeSymbol, '').trim();
            const updatedSylText = document.getElementById('neon-modal-window-edit-text-input').value;
            if (updatedSylText !== null && updatedSylText !== orig) {
                // create "set text" action
                const elementId = [...span.classList.entries()].filter((className) => className[1] !== 'text-select' && className[1] !== 'selected-to-edit')[0][1];
                const editorAction = {
                    action: 'setText',
                    param: {
                        elementId: elementId,
                        text: updatedSylText,
                    },
                };
                // send action to verovio for processing
                this.neonView.edit(editorAction, this.neonView.view.getCurrentPageURI()).then((response) => {
                    if (response) {
                        // update the SVG
                        this.neonView.updateForCurrentPage().then(() => {
                            // An update to the page will reload the entire svg;
                            // We would like to then reselect the same selected syllable
                            // if bboxes are enabled
                            this.updateSelectedBBox(span);
                        });
                    }
                });
            }
            // close modal window
            this.hideModalWindow();
        };
        /**
         * Fill modal window with hotkey info content
         */
        /*
        private openHotkeyModalWindow = function() {
          // make sure no other modal content is being displayed
          Array.from(document.getElementsByClassName('neon-modal-window-content')).forEach((elem) => {
            elem.classList.remove('visible');
          });
      
          // set up and diplay hotkey modal content
          document.getElementById('neon-modal-window-content-hotkeys').classList.add('visible');
      
          document.getElementById('neon-modal-window-container').style.display = 'flex';
          this.focusModalWindow();
        };
        */
        /**
         * Define event listeners for modal window based on modalView type
         */
        this.keydownListener = function (e) {
            e.stopImmediatePropagation(); // prevent Neon hotkey events from firing when user is typing
            switch (this.modalWindowView) {
                case ModalWindowView.EDIT_TEXT:
                    if (e.key === 'Enter')
                        this.updateSylText();
                default:
                    if (e.key === 'Escape')
                        this.hideModalWindow();
            }
        };
        /**
         * Event listener that focuses the modal window if user clicks anywhere outside of it
         */
        this.focusModalWindow = function () {
            switch (this.modalWindowView) {
                case ModalWindowView.EDIT_TEXT:
                    document.getElementById('neon-modal-window-edit-text-input').select();
                    break;
                default:
                    document.getElementById('neon-modal-window').focus();
            }
        };
        this.neonView = neonView;
        this.modalWindowState = ModalWindowState.CLOSED;
        // set event listeners that apply to all modal windows
        document.getElementById('neon-modal-window-header-close').addEventListener('click', this.hideModalWindow.bind(this));
        document.getElementById('neon-modal-window').addEventListener('keydown', this.keydownListener.bind(this));
        document.getElementById('neon-modal-window-container').addEventListener('click', this.focusModalWindow.bind(this));
    }
    /**
     * Set the modal view of this Modal instance.
     * Update the content based on passed view.
     * @param view Type of modal to open (ModalView enum)
     */
    setModalWindowView(view, content) {
        this.modalWindowView = view;
        this.setModalWindowContent(content);
    }
    /**
     * Return the current modal view as a string
     */
    getModalWindowView() {
        return this.modalWindowView.toString();
    }
    /**
     * Open a model window with content representing the current ModalView.
     */
    openModalWindow() {
        // make sure no other modal content is being displayed
        Array.from(document.getElementsByClassName('neon-modal-window-content')).forEach((elem) => {
            elem.classList.remove('visible');
        });
        switch (this.modalWindowView) {
            case ModalWindowView.EDIT_TEXT:
                this.openEditSylTextModalWindow();
                break;
            case ModalWindowView.HOTKEYS:
                // set up and diplay hotkey modal content
                document.getElementById('neon-modal-window-content-hotkeys').classList.add('visible');
            case ModalWindowView.DOCUMENT_UPLOAD:
            // add function to pairing button
            default:
                document.getElementById('neon-modal-window-container').style.display = 'flex';
                this.focusModalWindow();
                break;
        }
        // make sure user can't scroll when modal is open
        document.body.style.overflowX = 'hidden';
        document.body.style.overflowY = 'hidden';
        this.modalWindowState = ModalWindowState.OPEN;
    }
    /**
     * Hide the Neon modal window
     */
    hideModalWindow() {
        switch (this.modalWindowView) {
            case ModalWindowView.EDIT_TEXT:
                const span = document.getElementById('syl_text').querySelectorAll('span.selected-to-edit')[0];
                span.classList.remove('selected-to-edit');
            default:
                document.getElementById('neon-modal-window-container').style.display = 'none';
                // after the modal is closed, no keyboard shortcuts work because
                // the document hasn't been focused; this forcefully focuses the container
                if (this.modalWindowView !== ModalWindowView.DOCUMENT_UPLOAD) {
                    document.getElementById('container').focus();
                }
        }
        // reset scroll behavior of body
        document.body.style.overflowX = 'hidden';
        document.body.style.overflowY = 'scroll';
        this.modalWindowState = ModalWindowState.CLOSED;
    }
    /**
     * Set content of modal window
     */
    setModalWindowContent(content) {
        switch (this.modalWindowView) {
            case ModalWindowView.EDIT_TEXT:
                document.getElementById('neon-modal-window-content-container').innerHTML = Contents_1.editTextModal;
                // set modal window title
                document.getElementById('neon-modal-window-header-title').innerText = 'EDIT SYLLABLE TEXT';
                // span and current text of selected-to-edit syllable and filter out unwanted chars
                const span = document.getElementById('syl_text').querySelectorAll('span.selected-to-edit')[0];
                const removeSymbol = /\u{25CA}/u;
                const orig = span.textContent.replace(removeSymbol, '').trim();
                // set value of input field to current syllable text
                (document.getElementById('neon-modal-window-edit-text-input')).value = orig;
                break;
            case ModalWindowView.HOTKEYS:
                document.getElementById('neon-modal-window-content-container').innerHTML = Contents_1.hotkeysModal;
                document.getElementById('neon-modal-window-header-title').innerText = 'HOTKEYS';
                break;
            case ModalWindowView.VALIDATION_STATUS:
                document.getElementById('neon-modal-window-content-container').innerHTML =
                    `<div style="margin-bottom: 30px;white-space: pre-line;">${content}</div>
          <div class="neon-modal-window-btn">
            <a href="data:text/plain;charset=utf-8,${encodeURIComponent(content)}" download="validation.log">
              Export
            </a>
            </div>`;
                document.getElementById('neon-modal-window-header-title').innerText = 'ERROR LOG';
                break;
            case ModalWindowView.DOCUMENT_UPLOAD:
                document.getElementById('neon-modal-window-header-title').innerText = 'DOCUMENT UPLOAD';
                document.getElementById('neon-modal-window-content-container').innerHTML = dashboard_components_1.uploadAreaHTML;
                break;
            default:
                console.error('Unknown selection type. This should not have occurred.');
        }
    }
}
exports.ModalWindow = ModalWindow;


/***/ }),

/***/ "./src/utils/NeonManifest.ts":
/*!***********************************!*\
  !*** ./src/utils/NeonManifest.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.parseManifest = void 0;
const NeonSchema = __webpack_require__(/*! ./manifest/NeonSchema.json */ "./src/utils/manifest/NeonSchema.json");
const NeonContext = __webpack_require__(/*! ./manifest/context.json */ "./src/utils/manifest/context.json");
const jsonschema_1 = __webpack_require__(/*! jsonschema */ "./node_modules/jsonschema/lib/index.js");
/**
 * Check if the provided Neon manifest is parseable.
 * @param {string} manifestString - The Neon manifest as a string.
 */
function parseManifest(manifestString) {
    const results = jsonschema_1.validate(manifestString, NeonSchema);
    const instance = results.instance;
    if (results.errors.length > 0) {
        console.error(results.errors);
        return false;
    }
    const context = instance['@context'];
    if (context === 'https://ddmal.music.mcgill.ca/Neon/contexts/1/manifest.jsonld') {
        return true;
    }
    if ((context[0] === NeonContext[0]) &&
        (context[1]['schema'] === NeonContext[1]['schema']) &&
        (context[1]['title'] === NeonContext[1]['title']) &&
        (context[1]['timestamp'] === NeonContext[1]['timestamp']) &&
        (context[1]['image']['@id'] === NeonContext[1]['image']['@id']) &&
        (context[1]['image']['@type'] === NeonContext[1]['image']['@type']) &&
        (context[1]['mei_annotations']['@id'] === NeonContext[1]['mei_annotations']['@id']) &&
        (context[1]['mei_annotations']['@type'] === NeonContext[1]['mei_annotations']['@type']) &&
        (context[1]['mei_annotations']['@container'] === NeonContext[1]['mei_annotations']['@container'])) {
        return true;
    }
    else {
        console.error('Context mismatch');
        console.error(context);
        console.error(NeonContext);
        return false;
    }
}
exports.parseManifest = parseManifest;


/***/ }),

/***/ "./src/utils/Notification.ts":
/*!***********************************!*\
  !*** ./src/utils/Notification.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.queueNotification = void 0;
const random_1 = __webpack_require__(/*! ./random */ "./src/utils/random.ts");
const notifications = new Array(0);
let currentModeMessage = null;
let notifying = false;
/**
 * Number of notifications to display at a time.
 */
const NUMBER_TO_DISPLAY = 3;
const notificationIcon = {
    default: '',
    warning: '⚠️ ',
    error: '🔴 ',
    success: '✅ ',
};
/**
 * A class to manage Neon notifications.
 */
class Notification {
    /**
     * Create a new notification.
     * @param message - Notification content.
     */
    constructor(message, type) {
        this.message = notificationIcon[type] + message;
        this.displayed = false;
        this.id = random_1.uuidv4();
        this.isModeMessage = message.search('Mode') !== -1;
        this.timeoutID = -1;
        this.type = type;
    }
    /** Set the ID from setTimeout. */
    setTimeoutId(id) {
        this.timeoutID = Math.max(id, -1);
    }
    /** Display the Notification. */
    display() {
        this.displayed = true;
    }
    /**
     * @returns The UUID for this notification.
     */
    getId() {
        return this.id;
    }
}
/**
 * Clear the notifications if no more exist or display another from the queue.
 * @param currentId - The ID of the notification to be cleared.
 */
function clearOrShowNextNotification(currentId) {
    document.getElementById(currentId).remove();
    if (currentModeMessage !== null && currentModeMessage.getId() === currentId) {
        currentModeMessage = null;
    }
    if (notifications.length > 0) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        startNotification();
    }
    else if (document.querySelectorAll('.neon-notification').length === 0) {
        document.getElementById('notification-content').style.display = 'none';
        notifying = false;
    }
}
/**
 * Display a notification.
 * @param notification - Notification to display.
 */
function displayNotification(notification) {
    if (notification.isModeMessage) {
        if (currentModeMessage === null) {
            currentModeMessage = notification;
        }
        else {
            window.clearTimeout(currentModeMessage.timeoutID);
            notifications.push(notification);
            clearOrShowNextNotification(currentModeMessage.getId());
            return;
        }
    }
    const notificationContent = document.getElementById('notification-content');
    const newNotification = document.createElement('div');
    newNotification.classList.add('neon-notification');
    newNotification.classList.add(`neon-notification-${notification.type}`);
    newNotification.id = notification.getId();
    newNotification.innerHTML = notification.message;
    notificationContent.append(newNotification);
    notificationContent.style.display = '';
    notification.display();
}
/**
 * Start displaying notifications. Called automatically.
 */
function startNotification() {
    if (notifications.length > 0) {
        notifying = true;
        const currentNotification = notifications.pop();
        displayNotification(currentNotification);
        currentNotification.setTimeoutId(window.setTimeout(clearOrShowNextNotification, 5000, currentNotification.getId()));
        document
            .getElementById(currentNotification.getId())
            .addEventListener('click', () => {
            window.clearTimeout(currentNotification.timeoutID);
            clearOrShowNextNotification(currentNotification.getId());
        });
    }
}
/**
 * Add a notification to the queue.
 * @param notification - Notification content.
 */
function queueNotification(notification, type = 'default') {
    const notif = new Notification(notification, type);
    notifications.push(notif);
    if (!notifying || document.getElementById('notification-content').querySelectorAll('.neon-notification').length < NUMBER_TO_DISPLAY) {
        startNotification();
    }
}
exports.queueNotification = queueNotification;


/***/ }),

/***/ "./src/utils/Resize.ts":
/*!*****************************!*\
  !*** ./src/utils/Resize.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.resize = void 0;
const SelectTools_1 = __webpack_require__(/*! ./SelectTools */ "./src/utils/SelectTools.ts");
const d3 = __webpack_require__(/*! d3 */ "d3");
/**
 * The points you can click and drag to resize
 */
const PointNames = {
    TopLeft: 0,
    Top: 1,
    TopRight: 2,
    Right: 3,
    BottomRight: 4,
    Bottom: 5,
    BottomLeft: 6,
    Left: 7
};
function GetPoints(ulx, uly, lrx, lry, rotate) {
    // Note that arc functions return an angle x in [-pi/2, pi/2].
    let points;
    // ul is ulx, uly, lr is lrx, lry
    if (rotate >= 0) {
        points = [
            { x: ulx, y: uly, name: PointNames.TopLeft },
            { x: (ulx + lrx) / 2, y: uly + (lrx - ulx) / 2 * Math.sin(rotate), name: PointNames.Top },
            { x: lrx, y: uly + (lrx - ulx) * Math.sin(rotate), name: PointNames.TopRight },
            { x: lrx, y: (uly + lry + (lrx - ulx) * Math.sin(rotate)) / 2, name: PointNames.Right },
            { x: lrx, y: lry, name: PointNames.BottomRight },
            { x: (ulx + lrx) / 2, y: lry - (lrx - ulx) / 2 * Math.sin(rotate), name: PointNames.Bottom },
            { x: ulx, y: lry - (lrx - ulx) * Math.sin(rotate), name: PointNames.BottomLeft },
            { x: ulx, y: (uly + lry - (lrx - ulx) * Math.sin(rotate)) / 2, name: PointNames.Left }
        ];
    }
    // Not that
    else {
        const a = (lrx - ulx) * Math.tan(Math.abs(rotate));
        const b = lry - uly - a;
        points = [
            { x: ulx, y: uly + a, name: PointNames.TopLeft },
            { x: (ulx + lrx) / 2, y: uly + a / 2, name: PointNames.Top },
            { x: lrx, y: uly, name: PointNames.TopRight },
            { x: lrx, y: uly + b / 2, name: PointNames.Right },
            { x: lrx, y: uly + b, name: PointNames.BottomRight },
            { x: (ulx + lrx) / 2, y: lry - a / 2, name: PointNames.Bottom },
            { x: ulx, y: lry, name: PointNames.BottomLeft },
            { x: ulx, y: lry - b / 2, name: PointNames.Left }
        ];
    }
    return points;
}
function resize(element, neonView, dragHandler) {
    /**
     * The upper-left x-coordinate of the element.
     */
    let ulx;
    /**
     * The upper-left y-coordinate of the element.
     */
    let uly;
    /**
     * The lower-right x-coordinate of the element.
     */
    let lrx;
    /**
     * The lower-right y-coordinate of the element.
     */
    let lry;
    /**
     * The rotate of the rect in radians.
     */
    let rotate;
    let initialPoint, initialUly, initialLry, initialY, initialRectY, polyLen, dy, initialRotate;
    /**
     * Redraw the rectangle with the new bounds
     */
    function redraw() {
        const points = GetPoints(ulx, uly, lrx, lry, rotate);
        const pointString = points.filter((_elem, index) => { return index % 2 === 0; })
            .map(elem => elem.x + ',' + elem.y)
            .join(' ');
        d3.select('#resizeRect').attr('points', pointString);
        for (const pointName in PointNames) {
            const point = points[PointNames[pointName]];
            d3.select('#p-' + pointName).filter('.resizePoint')
                .attr('cx', point.x)
                .attr('cy', point.y);
        }
        let x = points[3].x;
        let y = points[3].y;
        const pointStringRight = (x + 100) + ',' + (y + 85) + ' ' +
            (x + 70) + ',' + (y + 50) + ' ' + (x + 100) + ',' + (y + 15) + ' ' + (x + 130) + ',' + (y + 50);
        x = points[7].x;
        y = points[7].y;
        const pointStringLeft = (x - 100) + ',' + (y - 15) + ' ' +
            (x - 130) + ',' + (y - 50) + ' ' + (x - 100) + ',' + (y - 85) + ' ' + (x - 70) + ',' + (y - 50);
        d3.select('#rotateLeft').attr('points', pointStringLeft);
        d3.select('#rotateRight').attr('points', pointStringRight);
    }
    /**
     * Draw the initial rectangle around the element
     * and add the listeners to support dragging to resize.
     */
    function drawInitialRect() {
        if (element === null)
            return;
        // if it's a boundingbox just get the coordinates
        if (element.classList.contains('syl')) {
            const rect = element.querySelector('.sylTextRect-display');
            if (rect === null) {
                console.warn('Tried to draw resize rect for a sylTextRect that doesn\'t exist (or isn\'t displaying)');
                return;
            }
            ulx = Number(rect.getAttribute('x'));
            uly = Number(rect.getAttribute('y'));
            lrx = +ulx + +rect.getAttribute('width');
            lry = +uly + +rect.getAttribute('height');
            rotate = 0;
        }
        // if it's a staff use the paths to get it's boundingbox
        if (element.classList.contains('staff')) {
            const bbox = SelectTools_1.getStaffBBox(element);
            ulx = bbox.ulx;
            uly = bbox.uly;
            lrx = bbox.lrx;
            lry = bbox.lry;
            const coordinates = element.querySelector('path')
                .getAttribute('d')
                .match(/\d+/g)
                .map(element => Number(element));
            rotate = Math.atan((coordinates[3] - coordinates[1]) /
                (coordinates[2] - coordinates[0]));
        }
        let whichPoint;
        const points = GetPoints(ulx, uly, lrx, lry, rotate);
        polyLen = points[2].x - points[0].x;
        const pointString = points.filter((_elem, index) => { return index % 2 === 0; })
            .map(elem => elem.x + ',' + elem.y)
            .join(' ');
        d3.select('#' + element.id).append('polygon')
            .attr('points', pointString)
            .attr('id', 'resizeRect')
            .attr('stroke', 'black')
            .attr('stroke-width', 10)
            .attr('fill', 'none')
            .style('cursor', 'move')
            .style('stroke-dasharray', '20 10');
        for (const pointName in PointNames) {
            const point = points[PointNames[pointName]];
            d3.select(element.viewportElement).append('circle')
                .attr('cx', point.x)
                .attr('cy', point.y)
                .attr('r', 25)
                .attr('stroke', 'black')
                .attr('stroke-width', 4)
                .attr('fill', '#0099ff')
                .attr('class', 'resizePoint')
                .attr('id', 'p-' + pointName);
        }
        function resizeStart(name) {
            whichPoint = name;
            const point = points.find(point => { return point.name === PointNames[name]; });
            initialPoint = [point.x, point.y];
            initialUly = uly;
            initialLry = lry;
        }
        function resizeDrag() {
            const currentPoint = d3.mouse(this);
            switch (PointNames[whichPoint]) {
                case PointNames.TopLeft:
                    ulx = currentPoint[0];
                    uly = currentPoint[1];
                    break;
                case PointNames.Top:
                    uly = currentPoint[1] - (lrx - ulx) * Math.tan(rotate) / 2;
                    break;
                case PointNames.TopRight:
                    lrx = currentPoint[0];
                    uly = currentPoint[1] - (lrx - ulx) * Math.tan(rotate);
                    break;
                case PointNames.Right:
                    lrx = currentPoint[0];
                    lry = initialLry + (currentPoint[0] - initialPoint[0]) * Math.tan(rotate);
                    break;
                case PointNames.BottomRight:
                    lrx = currentPoint[0];
                    lry = currentPoint[1];
                    break;
                case PointNames.Bottom:
                    lry = currentPoint[1] + (lrx - ulx) * Math.tan(rotate) / 2;
                    break;
                case PointNames.BottomLeft:
                    ulx = currentPoint[0];
                    lry = currentPoint[1] + (lrx - ulx) * Math.tan(rotate);
                    break;
                case PointNames.Left:
                    ulx = currentPoint[0];
                    uly = initialUly + (currentPoint[0] - initialPoint[0]) * Math.tan(rotate);
                    break;
                default:
                    console.error('Something that wasn\'t a side of the rectangle was dragged. This shouldn\'t happen.');
            }
            redraw();
        }
        function resizeEnd() {
            const editorAction = {
                action: 'resize',
                param: {
                    elementId: element.id,
                    ulx: ulx,
                    uly: uly,
                    lrx: lrx,
                    lry: lry
                }
            };
            neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then(async (result) => {
                if (result) {
                    await neonView.updateForCurrentPage();
                }
                element = document.getElementById(element.id);
                ulx = undefined;
                uly = undefined;
                lrx = undefined;
                lry = undefined;
                d3.selectAll('.resizePoint').remove();
                d3.selectAll('#resizeRect').remove();
                d3.selectAll('.rotatePoint').remove();
                drawInitialRect();
                if (element.classList.contains('syl')) {
                    SelectTools_1.selectBBox(element.querySelector('.sylTextRect-display'), dragHandler, this);
                }
                else {
                    try {
                        document.getElementById('moreEdit').innerHTML = '';
                        document.getElementById('moreEdit').parentElement.classList.add('hidden');
                    }
                    catch (e) { }
                }
            });
        }
        // do it as a loop instead of selectAll so that you can easily know which point was
        for (const name in PointNames) {
            d3.select('#p-' + name).filter('.resizePoint').call(d3.drag()
                .on('start', () => { resizeStart(name); })
                .on('drag', resizeDrag)
                .on('end', resizeEnd.bind(this)));
        }
        // ROTATE
        function rotateStart() {
            const which = d3.event.sourceEvent.target.id;
            initialY = d3.mouse(this)[1];
            initialLry = lry;
            initialUly = uly;
            initialRectY = (which === 'rotateRight' ? lry : uly);
            initialRotate = rotate;
        }
        function rotateDragLeft() {
            const currentY = d3.mouse(this)[1];
            const temp = currentY - initialY;
            const tempRotate = initialRotate - Math.atan(temp / polyLen);
            if (tempRotate > -0.2 && tempRotate < 0.2) {
                dy = temp;
                uly = initialRectY + dy;
                rotate = tempRotate;
                if (rotate >= 0) {
                    uly = dy + points.filter(point => point.name === PointNames.TopLeft)[0].y;
                    lry = points.filter(point => point.name === PointNames.BottomRight)[0].y;
                }
                else {
                    uly = points.filter(point => point.name === PointNames.TopRight)[0].y;
                    lry = dy + points.filter(point => point.name === PointNames.BottomLeft)[0].y;
                }
            }
            redraw();
        }
        function rotateDragRight() {
            const currentY = d3.mouse(this)[1];
            const temp = currentY - initialY;
            const tempRotate = initialRotate + Math.atan(temp / polyLen);
            if (tempRotate > -0.2 && tempRotate < 0.2) {
                dy = temp;
                rotate = tempRotate;
                if (rotate >= 0) {
                    lry = dy + points.filter(point => point.name === PointNames.BottomRight)[0].y;
                    uly = points.filter(point => point.name === PointNames.TopLeft)[0].y;
                }
                else {
                    uly = dy + points.filter(point => point.name === PointNames.TopRight)[0].y;
                    lry = points.filter(point => point.name === PointNames.BottomLeft)[0].y;
                }
            }
            redraw();
        }
        function rotateEnd() {
            if (dy === undefined) {
                dy = 0;
            }
            const editorAction = {
                action: 'resizeRotate',
                param: {
                    elementId: element.id,
                    ulx: ulx,
                    uly: uly,
                    lrx: lrx,
                    lry: lry,
                    rotate: rotate * 180 / Math.PI
                }
            };
            neonView.edit(editorAction, neonView.view.getCurrentPageURI()).then(async (result) => {
                if (result) {
                    await neonView.updateForCurrentPage();
                }
                element = document.getElementById(element.id);
                ulx = undefined;
                uly = undefined;
                lrx = undefined;
                lry = undefined;
                dy = undefined;
                drawInitialRect();
                if (element.classList.contains('syl')) {
                    SelectTools_1.selectBBox(element.querySelector('.sylTextRect-display'), dragHandler, this);
                }
                else {
                    SelectTools_1.selectStaff(element, dragHandler);
                }
            });
        }
        if (element.classList.contains('staff')) {
            let x = points[3].x;
            let y = points[3].y;
            const pointStringRight = (x + 100) + ',' + (y + 85) + ' ' +
                (x + 70) + ',' + (y + 50) + ' ' + (x + 100) + ',' + (y + 15) + ' ' + (x + 130) + ',' + (y + 50);
            x = points[7].x;
            y = points[7].y;
            const pointStringLeft = (x - 100) + ',' + (y - 15) + ' ' +
                (x - 130) + ',' + (y - 50) + ' ' + (x - 100) + ',' + (y - 85) + ' ' + (x - 70) + ',' + (y - 50);
            d3.select('#' + element.id).append('polygon')
                .attr('points', pointStringRight)
                .attr('id', 'rotateRight')
                .attr('stroke', 'black')
                .attr('stroke-width', 7)
                .attr('fill', '#0099ff')
                .attr('class', 'rotatePoint');
            d3.select('#' + element.id).append('polygon')
                .attr('points', pointStringLeft)
                .attr('id', 'rotateLeft')
                .attr('stroke', 'black')
                .attr('stroke-width', 7)
                .attr('fill', '#0099ff')
                .attr('class', 'rotatePoint');
            d3.select('#rotateLeft').call(d3.drag()
                .on('start', rotateStart)
                .on('drag', rotateDragLeft)
                .on('end', rotateEnd));
            d3.select('#rotateRight').call(d3.drag()
                .on('start', rotateStart)
                .on('drag', rotateDragRight)
                .on('end', rotateEnd));
        }
    }
    drawInitialRect();
}
exports.resize = resize;


/***/ }),

/***/ "./src/utils/Select.ts":
/*!*****************************!*\
  !*** ./src/utils/Select.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/** @module utils/Select */
Object.defineProperty(exports, "__esModule", { value: true });
exports.dragSelect = exports.clickSelect = exports.setSelectHelperObjects = exports.setSelectStrokeWidth = void 0;
const SelectTools_1 = __webpack_require__(/*! ./SelectTools */ "./src/utils/SelectTools.ts");
const Resize_1 = __webpack_require__(/*! ./Resize */ "./src/utils/Resize.ts");
const d3 = __webpack_require__(/*! d3 */ "d3");
const Coordinates_1 = __webpack_require__(/*! ./Coordinates */ "./src/utils/Coordinates.ts");
let dragHandler, neonView, info, zoomHandler;
let strokeWidth = 7;
/**
 * Set stroke width on drag select box.
 * @param width - Stroke width in pixels.
 */
function setSelectStrokeWidth(width) {
    strokeWidth = width;
}
exports.setSelectStrokeWidth = setSelectStrokeWidth;
/**
 * Set the objects for this module.
 */
function setSelectHelperObjects(nv, dh) {
    dragHandler = dh;
    neonView = nv;
    info = neonView.info;
    zoomHandler = neonView.view.zoomHandler;
}
exports.setSelectHelperObjects = setSelectHelperObjects;
function escapeKeyListener(evt) {
    if (evt.key === 'Escape') {
        if (document.getElementsByClassName('selected').length > 0) {
            info.infoListeners();
        }
        SelectTools_1.unselect();
    }
}
// ENTER KEY: when a BBox is selected, pressing enter will
//   trigger the edit syllable text function.
function enterKeyListener(evt) {
    // check if 'enter' is pressed with the correct conditions
    if (SelectTools_1.getSelectionType() !== 'selByBBox'
        || !document.getElementById('displayText').checked
        || evt.key !== 'Enter')
        return;
    const selected = document.querySelector('.syllable-highlighted');
    // check if there is a syllable selected
    if (selected) {
        const span = document.querySelector('span.' + selected.id);
        // we simulate a click because the method `updateSylText()` is only
        // accessible inside TextEditMode; the span has an event listener for
        // clicks.
        span.click();
    }
}
function arrowKeyListener(evt) {
    if (SelectTools_1.getSelectionType() !== 'selByBBox' || (evt.key !== 'ArrowLeft' && evt.key !== 'ArrowRight'))
        return;
    const selected = document.querySelector('.syllable-highlighted');
    const syllables = Array.from(document.querySelectorAll('.syllable'));
    // not all syllables have BBoxes; we must filter them out
    const bboxSyllables = syllables.filter(syl => syl.querySelector('.sylTextRect-display') !== null);
    const ind = bboxSyllables.indexOf(selected);
    if (evt.key === 'ArrowLeft' && ind > 0) {
        SelectTools_1.unselect();
        const bbox = bboxSyllables[ind - 1].querySelector('.sylTextRect-display');
        SelectTools_1.selectAll([bbox], neonView, dragHandler);
    }
    else if (evt.key === 'ArrowRight' && ind < bboxSyllables.length - 1) {
        SelectTools_1.unselect();
        const bbox = bboxSyllables[ind + 1].querySelector('.sylTextRect-display');
        SelectTools_1.selectAll([bbox], neonView, dragHandler);
    }
}
function isSelByBBox() {
    const selByBBox = document.getElementById('selByBBox');
    if (selByBBox) {
        return selByBBox.classList.contains('is-active');
    }
    return false;
}
function stopPropHandler(evt) { evt.stopPropagation(); }
/**
 * Get bounding box of an element
 */
function getBBoxCoords(el) {
    if (isSelByBBox()) {
        const ulx = Number(el.getAttribute('x')), uly = Number(el.getAttribute('y'));
        // What is the math here???
        const lrx = ulx + Number((el.getAttribute('width').slice(0, -2)));
        const lry = uly + Number((el.getAttribute('height').slice(0, -2)));
        return { ulx, uly, lrx, lry };
    }
    if (el.tagName === 'use') {
        const rect = el.parentNode.getBBox();
        return {
            ulx: rect.x,
            uly: rect.y,
            lrx: rect.x + rect.width,
            lry: rect.y + rect.height
        };
    }
    return SelectTools_1.getStaffBBox(el);
}
/**
 * Checks whether an element is within the drag selection rectangle.
 * Returns true if the element is within the bounds of `ul` (upper left) and `lr` (lower right)
 */
function isElementInRect(el, ul, lr) {
    if (isSelByBBox() || el.tagName === 'use') {
        const bbox = getBBoxCoords(el);
        // We want to find whether the bounding box overlaps with the rectangle
        // defined by `ul` and `lr`. The easiest solution is to negate a sum-of-products equation:
        // i.e., there are 4 possibilities in which the two *don't* overlap
        return !(lr.x < bbox.ulx || ul.x > bbox.lrx || lr.y < bbox.uly || ul.y > bbox.lry);
    }
    // TODO: Simplify
    const box = SelectTools_1.getStaffBBox(el);
    return !((ul.x < box.ulx && lr.x < box.ulx) || (ul.x > box.lrx && lr.x > box.lrx) ||
        (ul.y < (box.uly + Math.abs(box.ulx - ul.x) * Math.tan(box.rotate)) &&
            lr.y < (box.uly + Math.abs(box.ulx - ul.x) * Math.tan(box.rotate))) ||
        (ul.y > (box.lry + Math.abs(box.lry - lr.y) * Math.tan(box.rotate)) &&
            lr.y > (box.lry + Math.abs(box.lry - lr.y) * Math.tan(box.rotate))));
}
/**
 * Apply listeners for click selection.
 * @param selector - The CSS selector used to choose where listeners are applied.
 */
function clickSelect(selector) {
    document.querySelectorAll(selector).forEach(sel => {
        sel.removeEventListener('mousedown', clickHandler);
        sel.addEventListener('mousedown', clickHandler);
    });
    // Click away listeners
    document.body.removeEventListener('keydown', escapeKeyListener);
    document.body.addEventListener('keydown', escapeKeyListener);
    document.body.removeEventListener('keydown', enterKeyListener);
    document.body.addEventListener('keydown', enterKeyListener);
    document.body.removeEventListener('keydown', arrowKeyListener);
    document.body.addEventListener('keydown', arrowKeyListener);
    document.getElementById('container')
        .addEventListener('contextmenu', (evt) => { evt.preventDefault(); });
    document.querySelectorAll('use,rect,#moreEdit').forEach(sel => {
        sel.removeEventListener('click', stopPropHandler);
        sel.addEventListener('click', stopPropHandler);
    });
}
exports.clickSelect = clickSelect;
/**
 * Handle click events related to element selection.
 */
// The `this` keyword can be "passed" as a fake parameter so that we can type it correctly
// https://www.typescriptlang.org/docs/handbook/2/functions.html#declaring-this-in-a-function
function clickHandler(evt) {
    // Return if user is in insert mode or panning is active from shift key
    if (!neonView || neonView.getUserMode() === 'insert' || evt.shiftKey)
        return;
    // Helper function to check if the ctrl/cmd key has been selected
    function isMultiSelect() {
        return window.navigator.userAgent.match(/Mac/) ? evt.metaKey : evt.ctrlKey;
    }
    // If user has clicked a layer element
    if (this.tagName === 'use' && SelectTools_1.getSelectionType() !== 'selByBBox') {
        if (this.closest('.selected') === null) {
            let selection = [this];
            // Check if this is part of a ligature and, if so, add all of it to the selection.
            const firstLigatureHalf = /E9B[45678]/;
            const secondLigatureHalf = /E9B[9ABC]/;
            if (this.getAttribute('xlink:href').match(secondLigatureHalf)) {
                // This is the second part of a ligature
                const nc = this.closest('.nc');
                const neume = this.closest('.neume');
                const ncIndex = Array.from(neume.children).indexOf(nc);
                const firstUse = neume.children[ncIndex - 1].children[0];
                console.assert(firstUse.getAttribute('xlink:href').match(firstLigatureHalf), 'First glyph of ligature unexpected!');
                if (firstUse.closest('.selected') === null) {
                    selection.unshift(firstUse);
                }
            }
            else if (this.getAttribute('xlink:href').match(firstLigatureHalf)) {
                // This is the first part of a ligature
                const nc = this.closest('.nc');
                const neume = this.closest('.neume');
                const ncIndex = Array.from(neume.children).indexOf(nc);
                const secondUse = neume.children[ncIndex + 1].children[0];
                console.assert(secondUse.getAttribute('xlink:href').match(secondLigatureHalf), 'Second glyph of ligature unexpected!');
                if (secondUse.closest('.selected') === null) {
                    selection.push(secondUse);
                }
            }
            if (isMultiSelect()) {
                selection = selection.concat(Array.from(document.querySelectorAll('.selected')));
            }
            SelectTools_1.selectAll(selection, neonView, dragHandler);
            if (dragHandler) {
                dragHandler.dragInit();
            }
        }
        else {
            if (isMultiSelect()) {
                const selectionMode = document.querySelector('.sel-by .is-active').id;
                const modeToClass = {
                    selByStaff: '.staff',
                    selByNeume: '.neume',
                    selByNc: '.nc',
                    selByLayerElement: '.accid',
                };
                const selectedClass = modeToClass[selectionMode] || '.syllable';
                const remove = [this.closest(selectedClass)];
                let selection = [];
                selection = Array.from(document.getElementsByClassName('selected'));
                selection = selection.filter((el) => !remove.includes(el));
                SelectTools_1.selectAll(selection, neonView, dragHandler);
                if (dragHandler) {
                    dragHandler.dragInit();
                }
            }
        }
    }
    else if (evt.target.tagName === 'rect' && SelectTools_1.getSelectionType() === 'selByBBox') {
        if (this.closest('.selected') === null) {
            let selection = [evt.target];
            if (isMultiSelect()) {
                selection = selection.concat(Array.from(document.getElementsByClassName('selected')));
                selection = selection.map((el) => {
                    if (el.tagName == 'rect') {
                        return el;
                    }
                    return el.querySelector('.sylTextRect-Display');
                });
            }
            SelectTools_1.selectAll(selection, neonView, dragHandler);
            if (dragHandler) {
                dragHandler.dragInit();
            }
        }
        else {
            let selection = [];
            if (isMultiSelect()) {
                const remove = [this];
                selection = Array.from(document.getElementsByClassName('selected'));
                selection = selection.map((el) => {
                    if (el.tagName == 'rect') {
                        return el;
                    }
                    return el.querySelector('.sylTextRect-Display');
                });
                selection = selection.filter((el) => {
                    return !remove.includes(el);
                });
                SelectTools_1.selectAll(selection, neonView, dragHandler);
                if (dragHandler) {
                    dragHandler.dragInit();
                }
            }
        }
    }
    else {
        if (SelectTools_1.getSelectionType() !== 'selByStaff') {
            info.infoListeners();
            return;
        }
        // Check if the point is in a staff.
        if (!isMultiSelect())
            SelectTools_1.unselect();
        // Select a staff
        const staff = Coordinates_1.getStaffByCoords(evt.clientX, evt.clientY);
        if (!staff)
            return;
        if (!staff.classList.contains('selected')) {
            // Select previously unselected staff
            SelectTools_1.selectStaff(staff, dragHandler);
            Resize_1.resize(staff, neonView, dragHandler);
            if (dragHandler) {
                dragHandler.dragInit();
            }
        }
        // Trigger mousedown event on the staff
        staff.dispatchEvent(new MouseEvent('mousedown', {
            screenX: evt.screenX,
            screenY: evt.screenY,
            clientX: evt.clientX,
            clientY: evt.clientY,
            ctrlKey: evt.ctrlKey,
            shiftKey: evt.shiftKey,
            altKey: evt.altKey,
            metaKey: evt.metaKey,
            view: evt.view
        }));
    }
}
/**
 * Apply listeners for drag selection.
 * @param selector - The CSS selector used to choose where listeners are applied.
 */
function dragSelect(selector) {
    let initialX = 0;
    let initialY = 0;
    let panning = false;
    let dragSelecting = false;
    // var canvas = d3.select('#svg_group');
    const canvas = d3.select(selector);
    /**
     * Check if a point is in the bounds of a staff element.
     * Rotate is not taken into account.
     */
    function pointNotInStaff(pt) {
        const staves = Array.from(document.getElementsByClassName('staff'));
        const filtered = staves.filter((staff) => {
            const bbox = SelectTools_1.getStaffBBox(staff);
            const ulx = bbox.ulx;
            const uly = bbox.uly;
            const lrx = bbox.lrx;
            const lry = bbox.lry;
            const rotate = bbox.rotate;
            return (pt[0] > ulx && pt[0] < lrx) &&
                (pt[1] > (uly + (pt[0] - ulx) * Math.tan(rotate))) &&
                (pt[1] < (lry - (lrx - pt[0]) * Math.tan(rotate)));
        });
        return (filtered.length === 0);
    }
    /**
       * Create an initial dragging rectangle.
       * @param ulx - The upper left x-position of the new rectangle.
       * @param uly - The upper left y-position of the new rectangle.
       */
    function initRect(ulx, uly) {
        canvas.append('rect')
            .attr('x', ulx)
            .attr('y', uly)
            .attr('width', 0)
            .attr('height', 0)
            .attr('id', 'selectRect')
            .attr('stroke', 'black')
            .attr('stroke-width', strokeWidth)
            .attr('fill', 'none');
    }
    function selStart() {
        if (!neonView)
            return;
        const userMode = neonView.getUserMode();
        if (d3.event.sourceEvent.target.nodeName !== 'use' && userMode !== 'insert' && d3.event.sourceEvent.target.nodeName !== 'rect') {
            if (!d3.event.sourceEvent.shiftKey) { // If not holding down shift key to pan
                if (!document.getElementById('selByStaff').classList.contains('is-active') ||
                    pointNotInStaff(d3.mouse(this))) {
                    SelectTools_1.unselect();
                    dragSelecting = true;
                    const initialP = d3.mouse(this);
                    initialX = initialP[0];
                    initialY = initialP[1];
                    initRect(initialX, initialY);
                }
            }
            else {
                panning = true;
                if (zoomHandler !== undefined) {
                    zoomHandler.startDrag();
                }
            }
        }
        else if (d3.event.sourceEvent.shiftKey) {
            panning = true;
            if (zoomHandler !== undefined) {
                zoomHandler.startDrag();
            }
        }
    }
    /**
       * Update the dragging rectangle.
       * @param newX - The new ulx.
       * @param newY - The new uly.
       * @param currentWidth - The width of the rectangle in pixels.
       * @param currentHeight - The height of the rectangle in pixels.
       */
    function updateRect(newX, newY, currentWidth, currentHeight) {
        d3.select('#selectRect')
            .attr('x', newX)
            .attr('y', newY)
            .attr('width', currentWidth)
            .attr('height', currentHeight);
    }
    function getElementsBySelector(selector) {
        if (document.getElementById('selByStaff').classList.contains('is-active'))
            return Array.from(document.querySelectorAll(selector + ' use, ' + selector + ' .staff'));
        if (isSelByBBox())
            return Array.from(document.querySelectorAll(selector + ' .sylTextRect-display'));
        return Array.from(document.querySelectorAll(selector + ' use'));
    }
    function selecting() {
        if (!panning && dragSelecting) {
            const currentPt = d3.mouse(this);
            const curX = currentPt[0];
            const curY = currentPt[1];
            const newX = curX < initialX ? curX : initialX;
            const newY = curY < initialY ? curY : initialY;
            const width = curX < initialX ? initialX - curX : curX - initialX;
            const height = curY < initialY ? initialY - curY : curY - initialY;
            updateRect(newX, newY, width, height);
        }
        else if (panning) {
            if (zoomHandler !== undefined) {
                zoomHandler.dragging();
            }
        }
    }
    function selEnd() {
        if (!panning && dragSelecting) {
            const selectRect = document.getElementById('selectRect');
            const rx = parseInt(selectRect.getAttribute('x'));
            const ry = parseInt(selectRect.getAttribute('y'));
            const lx = rx + parseInt(selectRect.getAttribute('width'));
            const ly = ry + parseInt(selectRect.getAttribute('height'));
            // Transform to the correct coordinate system
            const node = canvas.node();
            let ul = new DOMPoint(rx, ry), lr = new DOMPoint(lx, ly);
            const transform = node.getScreenCTM().inverse()
                .multiply(canvas.select('.system').node().getScreenCTM())
                .inverse();
            ul = ul.matrixTransform(transform);
            lr = lr.matrixTransform(transform);
            // Get all elements corresponding to the selector
            const elements = getElementsBySelector(selector);
            // Get the elements within the selection rectangle
            const selectedElements = elements.filter(el => isElementInRect(el, ul, lr));
            // Get other halves of ligatures if only one is selected
            selectedElements.forEach((element) => {
                if (element.tagName === 'use' && element.getAttribute('xlink:href').match(/E9B[456789ABC]/)) {
                    const neume = element.closest('.neume');
                    const ncIndex = Array.from(neume.children).indexOf(element.closest('.nc'));
                    if (element.getAttribute('xlink:href').match(/E9B[45678]/)) {
                        // Add second half of ligature to selected list if not already present
                        const secondNc = neume.children[ncIndex + 1];
                        const secondUse = secondNc.querySelector('use');
                        if (selectedElements.indexOf(secondUse) < 0) {
                            selectedElements.push(secondUse);
                        }
                    }
                    else {
                        // Add first half of ligature to selected list if not already present
                        const firstNc = neume.children[ncIndex - 1];
                        const firstUse = firstNc.querySelector('use');
                        if (selectedElements.indexOf(firstUse) < 0) {
                            selectedElements.push(firstUse);
                        }
                    }
                }
            });
            SelectTools_1.selectAll(selectedElements, neonView, dragHandler);
            if (dragHandler) {
                dragHandler.dragInit();
            }
            d3.selectAll('#selectRect').remove();
            dragSelecting = false;
        }
        panning = false;
    }
    d3.selectAll(selector.replace('.active-page', '').trim())
        .on('.drag', null);
    const dragSelectAction = d3.drag()
        .on('start', selStart)
        .on('drag', selecting)
        .on('end', selEnd);
    canvas.call(dragSelectAction);
    if (dragHandler) {
        dragHandler.resetTo(dragSelectAction);
    }
}
exports.dragSelect = dragSelect;


/***/ }),

/***/ "./src/utils/SelectTools.ts":
/*!**********************************!*\
  !*** ./src/utils/SelectTools.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.selectAll = exports.selectNn = exports.selectBBox = exports.getStaffBBox = exports.sharedSecondLevelParent = exports.isLigature = exports.selectNcs = exports.select = exports.selectLayerElement = exports.selectStaff = exports.unselect = exports.getSelectionType = void 0;
const Color = __webpack_require__(/*! ./Color */ "./src/utils/Color.ts");
const DisplayControls_1 = __webpack_require__(/*! ../DisplayPanel/DisplayControls */ "./src/DisplayPanel/DisplayControls.ts");
const Grouping = __webpack_require__(/*! ../SquareEdit/Grouping */ "./src/SquareEdit/Grouping.ts");
const Resize_1 = __webpack_require__(/*! ./Resize */ "./src/utils/Resize.ts");
const SelectOptions = __webpack_require__(/*! ../SquareEdit/SelectOptions */ "./src/SquareEdit/SelectOptions.ts");
const d3 = __webpack_require__(/*! d3 */ "d3");
/**
 * @returns The selection mode chosen by the user.
 */
function getSelectionType() {
    const element = document.getElementsByClassName('sel-by is-active');
    if (element.length !== 0) {
        return element[0].id;
    }
    else {
        return null;
    }
}
exports.getSelectionType = getSelectionType;
/**
 * Unselect all selected elements and run undo any extra
 * actions.
 */
function unselect() {
    document.querySelectorAll('.selected').forEach((selected) => {
        selected.classList.remove('selected');
        if (selected.classList.contains('staff')) {
            selected.removeAttribute('style');
            Color.unhighlight(selected);
        }
        else {
            selected.removeAttribute('style');
            selected.style.fill = '';
        }
    });
    // Set the strokes of all divlines back to black
    Array.from(document.getElementsByClassName('divLine')).forEach((syllable) => {
        syllable.style.stroke = 'black';
    });
    Array.from(document.getElementsByClassName('text-select')).forEach((el) => {
        el.style.color = '';
        el.style.fontWeight = '';
        el.classList.remove('text-select');
    });
    Array.from(document.getElementsByClassName('sylTextRect-display')).forEach((sylRect) => {
        sylRect.style.fill = 'blue';
    });
    Array.from(document.getElementsByClassName('syllable-highlighted')).forEach((syllable) => {
        syllable.style.fill = '';
        syllable.classList.add('syllable');
        syllable.classList.remove('syllable-highlighted');
    });
    d3.selectAll('#resizeRect').remove();
    d3.selectAll('.resizePoint').remove();
    d3.selectAll('.rotatePoint').remove();
    if (!document.getElementById('selByStaff').classList.contains('is-active')) {
        Grouping.endGroupingSelection();
    }
    else {
        SelectOptions.endOptionsSelection();
    }
    document.getElementById('extraEdit').innerHTML = '';
    document.getElementById('extraEdit').parentElement.classList.add('hidden');
    DisplayControls_1.updateHighlight();
}
exports.unselect = unselect;
/**
 * Select a staff element.
 * @param staff - The staff element in the DOM.
 * @param dragHandler - The drag handler in use.
 */
function selectStaff(staff, dragHandler) {
    if (!staff.classList.contains('selected')) {
        staff.classList.add('selected');
        Color.unhighlight(staff);
        Color.highlight(staff, '#d00');
        SelectOptions.triggerSplitActions();
        Grouping.initGroupingListeners();
        dragHandler.dragInit();
    }
}
exports.selectStaff = selectStaff;
/**
 * Select a layer element.
 * @param layerElement - The layer element in the DOM.
 * @param dragHandler - The drag handler in use.
 */
function selectLayerElement(layerElement, dragHandler) {
    if (!layerElement.classList.contains('selected')) {
        layerElement.classList.add('selected');
        Color.unhighlight(layerElement);
        Color.highlight(layerElement, '#d00');
        dragHandler.dragInit();
    }
}
exports.selectLayerElement = selectLayerElement;
/**
 * Generic select function.
 * @param el - Element to select.
 * @param dragHandler - Only used for staves.
 * @param needsHighlightUpdate - Whether all the group's highlights should be updated
 */
function select(el, dragHandler, needsHighlightUpdate = true) {
    // If element does not exist, exit
    if (!el)
        return;
    if (el.classList.contains('staff')) {
        return selectStaff(el, dragHandler);
    }
    if (el.classList.contains('layer')) {
        return selectLayerElement(el, dragHandler);
    }
    if (!el.classList.contains('selected') && !el.classList.contains('sylTextRect') &&
        !el.classList.contains('sylTextRect-display')) {
        el.classList.add('selected');
        // set fill to red
        // set stroke to red only if selected elem is a divLine
        el.style.fill = '#d00';
        el.style.stroke = (el.classList.contains('divLine')) ? '#d00' : 'black';
        if (el.querySelectorAll('.sylTextRect-display').length) {
            el.querySelectorAll('.sylTextRect-display').forEach((elem) => {
                elem.style.fill = '#d00';
            });
        }
        if (el.querySelectorAll('.divLine').length) {
            el.querySelectorAll('.divLine').forEach((elem) => {
                elem.style.stroke = '#d00';
            });
        }
        // Set color of the corresponding text in the text panel to red
        let sylId;
        if (el.classList.contains('syllable')) {
            sylId = el.id;
        }
        else if (el.closest('.syllable') !== null) {
            sylId = el.closest('.syllable').id;
        }
        if (sylId !== undefined) {
            const spans = document.querySelectorAll('span.' + sylId);
            spans.forEach((span) => {
                span.style.color = '#d00';
                span.style.fontWeight = 'bold';
                span.classList.add('text-select');
            });
        }
    }
    if (needsHighlightUpdate)
        DisplayControls_1.updateHighlight();
}
exports.select = select;
/**
 * Select an nc.
 * @param el - The neume component.
 */
async function selectNcs(el, neonView, dragHandler) {
    if (!el.parentElement.classList.contains('selected')) {
        const parent = el.parentElement;
        unselect();
        select(parent);
        if (await isLigature(parent, neonView)) {
            const prevNc = parent.previousSibling;
            if (await isLigature(prevNc, neonView)) {
                select(prevNc);
            }
            else {
                const nextNc = parent.nextSibling;
                if (await isLigature(nextNc, neonView)) {
                    select(nextNc);
                }
                else {
                    console.warn('Error: Neither prev or next nc are ligatures');
                }
            }
            Grouping.triggerGrouping('ligature');
        }
        else if (parent.classList.contains('nc')) {
            SelectOptions.triggerNcActions(parent);
        }
        else {
            console.warn('No action triggered!');
        }
        dragHandler.dragInit();
    }
}
exports.selectNcs = selectNcs;
/**
 * @param nc - The neume component.
 * @param neonView - The [[NeonView]] for this instance.
 * @returns True if the neume component is part of a ligature.
 */
async function isLigature(nc, neonView) {
    const attributes = await neonView.getElementAttr(nc.id, neonView.view.getCurrentPageURI());
    return (attributes.ligated);
}
exports.isLigature = isLigature;
/**
 * @param elements - The elements to compare.
 * @returns True if the elements have the same parent up two levels, otherwise false.
 */
function sharedSecondLevelParent(elements) {
    const tempElements = Array.from(elements);
    const firstElement = tempElements.pop();
    const secondParent = firstElement.parentElement.parentElement;
    for (const element of tempElements) {
        const secPar = element.parentElement.parentElement;
        if (secPar.id !== secondParent.id) {
            return false;
        }
    }
    return true;
}
exports.sharedSecondLevelParent = sharedSecondLevelParent;
/**
 * Get the bounding box of a staff based on its staff lines.
 * Rotate is included in radians.
 */
function getStaffBBox(staff) {
    let ulx, uly, lrx, lry, rotate;
    staff.querySelectorAll('path').forEach(path => {
        const coordinates = path.getAttribute('d')
            .match(/\d+/g)
            .map(element => Number(element));
        if (rotate === undefined) {
            rotate = Math.atan((coordinates[3] - coordinates[1]) /
                (coordinates[2] - coordinates[0]));
        }
        if (uly === undefined || Math.min(coordinates[1], coordinates[3]) < uly) {
            uly = Math.min(coordinates[1], coordinates[3]);
        }
        if (ulx === undefined || coordinates[0] < ulx) {
            ulx = coordinates[0];
        }
        if (lry === undefined || Math.max(coordinates[1], coordinates[3]) > lry) {
            lry = Math.max(coordinates[1], coordinates[3]);
        }
        if (lrx === undefined || coordinates[2] > lrx) {
            lrx = coordinates[2];
        }
    });
    return { id: staff.id, ulx, uly, lrx, lry, rotate, };
}
exports.getStaffBBox = getStaffBBox;
/**
 * select a boundingbox element
 * @param el - the bbox (sylTextRect) element in the DOM
 * @param dragHandler - the drag handler in use
 */
function selectBBox(el, dragHandler, neonView) {
    const bbox = el;
    const syl = bbox.closest('.syl');
    if (!syl.classList.contains('selected')) {
        syl.classList.add('selected');
        bbox.style.fill = '#d00';
        const closest = el.closest('.syllable');
        closest.style.fill = '#d00';
        closest.classList.add('syllable-highlighted');
        if (neonView !== undefined) {
            Resize_1.resize(syl, neonView, dragHandler);
        }
        if (dragHandler !== undefined) {
            dragHandler.dragInit();
        }
        const sylId = el.closest('.syllable').id;
        if (sylId !== undefined) {
            const span = document.querySelector('span.' + sylId);
            if (span) {
                span.style.color = '#d00';
                span.style.fontWeight = 'bold';
                span.classList.add('text-select');
            }
        }
    }
}
exports.selectBBox = selectBBox;
/**
 * Select not neume elements.
 * @param notNeumes - An array of not neumes elements.
 */
function selectNn(notNeumes) {
    if (notNeumes.length > 0) {
        notNeumes.forEach(nn => { select(nn); });
        return false;
    }
    else {
        return true;
    }
}
exports.selectNn = selectNn;
/**
 * Handle selecting an array of elements based on the selection type.
 */
async function selectAll(elements, neonView, dragHandler) {
    const selectionType = getSelectionType();
    unselect();
    if (elements.length === 0) {
        return;
    }
    let selectionClass;
    let containsClefOrCustosOrAccidOrDivLine = false;
    let containsNc = false;
    switch (selectionType) {
        case 'selBySyllable':
            selectionClass = '.syllable';
            break;
        case 'selByNeume':
            selectionClass = '.neume';
            break;
        case 'selByNc':
            selectionClass = '.nc';
            break;
        case 'selByStaff':
            selectionClass = '.staff';
            break;
        case 'selByBBox':
            selectionClass = '.sylTextRect-display';
            break;
        case 'selByLayerElement':
            selectionClass = '.clef, .custos, .accid, .divLine';
            break;
        default:
            console.error('Unknown selection type ' + selectionType);
            return;
    }
    // Get the groupings specified by selectionClass
    // that contain the provided elements to select.
    const groupsToSelect = new Set();
    for (const element of elements) {
        let grouping = element.closest(selectionClass);
        if (grouping === null) {
            // Check if we click-selected a clef or a custos or an accid or a divLine
            grouping = element.closest('.clef, .custos, .accid, .divLine');
            if (grouping === null) {
                console.warn('Element ' + element.id + ' is not part of specified group and is not a clef or custos or accid or divLine.');
                continue;
            }
            containsClefOrCustosOrAccidOrDivLine = containsClefOrCustosOrAccidOrDivLine || true;
        }
        else {
            containsNc = containsNc || true;
        }
        groupsToSelect.add(grouping);
        // Check for precedes/follows
        const follows = grouping.getAttribute('mei:follows');
        if (follows) {
            groupsToSelect.add(document.querySelector('#' + follows.slice(1)));
        }
        const precedes = grouping.getAttribute('mei:precedes');
        if (precedes) {
            groupsToSelect.add(document.querySelector('#' + precedes.slice(1)));
        }
    }
    // Select the elements
    groupsToSelect.forEach((group) => select(group, dragHandler, false));
    /* Determine the context menu to display (if any) */
    const groups = Array.from(groupsToSelect.values());
    // Handle occurance of clef or custos or accid or divLine
    if (containsClefOrCustosOrAccidOrDivLine && !containsNc) {
        // A context menu will only be displayed if there is a single clef
        if (groupsToSelect.size === 1 && groups[0].classList.contains('clef')) {
            SelectOptions.triggerClefActions(groups[0]);
        }
        else if (groupsToSelect.size === 1 && groups[0].classList.contains('custos')) {
            SelectOptions.triggerCustosActions();
        }
        else if (groupsToSelect.size === 1 && groups[0].classList.contains('accid')) {
            SelectOptions.triggerAccidActions(groups[0]);
        }
        else if (groupsToSelect.size === 1 && groups[0].classList.contains('divLine')) {
            SelectOptions.triggerLayerElementActions(groups[0]);
        }
        else {
            if (selectionType == 'selBySyllable') {
                SelectOptions.triggerDefaultSylActions();
            }
            else {
                SelectOptions.triggerDefaultActions();
            }
        }
        return;
    }
    switch (selectionType) {
        case 'selByStaff':
            switch (groups.length) {
                case 1:
                    SelectOptions.triggerSplitActions();
                    Grouping.initGroupingListeners();
                    Resize_1.resize(groups[0], neonView, dragHandler);
                    break;
                default:
                    SelectOptions.triggerStaffActions();
                    Grouping.initGroupingListeners();
            }
            break;
        case 'selByLayerElement':
            if (groupsToSelect.size === 1 && groups[0].classList.contains('clef')) {
                SelectOptions.triggerClefActions(groups[0]);
            }
            else if (groupsToSelect.size === 1 && groups[0].classList.contains('custos')) {
                SelectOptions.triggerCustosActions();
            }
            else if (groupsToSelect.size === 1 && groups[0].classList.contains('accid')) {
                SelectOptions.triggerAccidActions(groups[0]);
            }
            else if (groupsToSelect.size === 1 && groups[0].classList.contains('divLine')) {
                SelectOptions.triggerLayerElementActions(groups[0]);
            }
            else {
                SelectOptions.triggerDefaultActions();
            }
            break;
        case 'selBySyllable':
            switch (groups.length) {
                case 1:
                    // TODO change context if it is only a neume/nc.
                    SelectOptions.triggerSyllableActions();
                    Grouping.initGroupingListeners();
                    break;
                // case 2:
                default:
                    // Check if this is a linked syllable split by a staff break
                    if ((groups[0].getAttribute('mei:follows') === '#' + groups[1].id) ||
                        (groups[0].getAttribute('mei:precedes') === '#' + groups[1].id)) {
                        Grouping.triggerGrouping('splitSyllable');
                    }
                    else if (sharedSecondLevelParent(groups)) {
                        Grouping.triggerGrouping('syl');
                        SelectOptions.addChangeStaffListener();
                    }
                    else {
                        // Check if this *could* be a selection with a single logical syllable split by a staff break.
                        const staff0 = groups[0].closest('.staff');
                        const staff1 = groups[1].closest('.staff');
                        const staffChildren = Array.from(staff0.parentElement.children);
                        // Check if these are adjacent staves (logically)
                        if (Math.abs(staffChildren.indexOf(staff0) - staffChildren.indexOf(staff1)) === 1) {
                            // Check if one syllable is the last in the first staff and the other is the first in the second.
                            // Determine which staff is first.
                            const firstStaff = (staffChildren.indexOf(staff0) < staffChildren.indexOf(staff1)) ? staff0 : staff1;
                            const secondStaff = (firstStaff.id === staff0.id) ? staff1 : staff0;
                            const firstLayer = firstStaff.querySelector('.layer');
                            const secondLayer = secondStaff.querySelector('.layer');
                            // Check that the first staff has either syllable as the last syllable
                            const firstSyllableChildren = Array.from(firstLayer.children)
                                .filter((elem) => elem.classList.contains('syllable'));
                            const secondSyllableChildren = Array.from(secondLayer.children)
                                .filter((elem) => elem.classList.contains('syllable'));
                            const lastSyllable = firstSyllableChildren[firstSyllableChildren.length - 1];
                            const firstSyllable = secondSyllableChildren[0];
                            if (lastSyllable.id === groups[0].id && firstSyllable.id === groups[1].id) {
                                Grouping.triggerGrouping('splitSyllable');
                                break;
                            }
                            else if (lastSyllable.id === groups[1].id && firstSyllable.id === groups[0].id) {
                                Grouping.triggerGrouping('splitSyllable');
                                break;
                            }
                        }
                        SelectOptions.triggerDefaultSylActions();
                        SelectOptions.triggerSyllableActions();
                        Grouping.initGroupingListeners();
                    }
                // break
                // default:
                // if (sharedSecondLevelParent(groups)) {
                //   Grouping.triggerGrouping('syl');
                //   SelectOptions.triggerSyllableActions();
                // } else {
                //   SelectOptions.triggerDefaultSylActions();
                //   SelectOptions.triggerSyllableActions();
                // }
            }
            break;
        case 'selByNeume':
            switch (groups.length) {
                case 1:
                    // TODO change context if it is only a nc.
                    SelectOptions.triggerNeumeActions();
                    Grouping.initGroupingListeners();
                    break;
                default:
                    if (sharedSecondLevelParent(groups)) {
                        Grouping.triggerGrouping('neume');
                    }
                    else {
                        SelectOptions.triggerDefaultActions();
                    }
            }
            break;
        case 'selByNc':
            switch (groups.length) {
                case 1:
                    SelectOptions.triggerNcActions(groups[0]);
                    break;
                case 2:
                    if (sharedSecondLevelParent(groups)) {
                        // Check if this selection is a ligature or can be a ligature
                        // Check if these neume components are part of the same neume
                        if (groups[0].parentElement === groups[1].parentElement) {
                            const children = Array.from(groups[0].parentElement.children);
                            // Check that neume components are adjacent
                            if (Math.abs(children.indexOf(groups[0]) - children.indexOf(groups[1])) === 1) {
                                // Check that second neume component is lower than first.
                                // Note that the order in the list may not be the same as the
                                // order by x-position.
                                let firstNC = groups[0].children[0];
                                let secondNC = groups[1].children[0];
                                let firstNCX = firstNC.x.baseVal.value;
                                let secondNCX = secondNC.x.baseVal.value;
                                let firstNCY = firstNC.y.baseVal.value;
                                let secondNCY = secondNC.y.baseVal.value;
                                // order nc's by x coord (left to right)
                                if ((firstNCX > secondNCX)
                                    || (firstNCX === secondNCX && firstNCY < secondNCY)) {
                                    [firstNC, secondNC] = [secondNC, firstNC];
                                    [firstNCX, firstNCY, secondNCX, secondNCY] = [secondNCX, secondNCY, firstNCX, firstNCY];
                                }
                                // if stacked nc's/ligature (identical x), or descending nc's (y descends)
                                if (firstNCX === secondNCX || firstNCY < secondNCY) {
                                    Grouping.triggerGrouping('ligature');
                                    break;
                                }
                            }
                        }
                        Grouping.triggerGrouping('nc');
                    }
                    else {
                        SelectOptions.triggerDefaultActions();
                    }
                    break;
                default:
                    if (sharedSecondLevelParent(groups)) {
                        Grouping.triggerGrouping('nc');
                    }
                    else {
                        SelectOptions.triggerDefaultActions();
                    }
            }
            break;
        case 'selByBBox':
            switch (groups.length) {
                case 1:
                    selectBBox(groups[0], dragHandler, neonView);
                    SelectOptions.triggerDefaultActions();
                    break;
                default:
                    groups.forEach(g => selectBBox(g, dragHandler, undefined));
                    break;
            }
            break;
        default:
            console.error('Unknown selection type. This should not have occurred.');
    }
    function changeStaffListener() {
        try {
            document.getElementById('changeStaff')
                .addEventListener('click', SelectOptions.changeStaffHandler);
        }
        catch (e) {
            console.debug(e);
        }
    }
}
exports.selectAll = selectAll;


/***/ }),

/***/ "./src/utils/manifest/NeonSchema.json":
/*!********************************************!*\
  !*** ./src/utils/manifest/NeonSchema.json ***!
  \********************************************/
/*! exports provided: type, required, properties, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"type\":\"object\",\"required\":[\"@context\",\"title\",\"timestamp\",\"image\",\"mei_annotations\"],\"properties\":{\"@context\":{\"type\":[\"array\",\"string\"]},\"title\":{\"type\":\"string\"},\"timestamp\":{\"type\":\"string\"},\"image\":{\"type\":\"string\"},\"mei_annotations\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"required\":[\"id\",\"type\",\"body\",\"target\"],\"properties\":{\"id\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"body\":{\"type\":\"string\"},\"target\":{\"type\":\"string\"}}}}}}");

/***/ }),

/***/ "./src/utils/manifest/context.json":
/*!*****************************************!*\
  !*** ./src/utils/manifest/context.json ***!
  \*****************************************/
/*! exports provided: 0, 1, default */
/***/ (function(module) {

module.exports = JSON.parse("[\"http://www.w3.org/ns/anno.jsonld\",{\"schema\":\"http://schema.org/\",\"title\":\"schema:name\",\"timestamp\":\"schema:dateModified\",\"image\":{\"@id\":\"schema:image\",\"@type\":\"@id\"},\"mei_annotations\":{\"@id\":\"Annotation\",\"@type\":\"@id\",\"@container\":\"@list\"}}]");

/***/ }),

/***/ "./src/utils/random.ts":
/*!*****************************!*\
  !*** ./src/utils/random.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.uuidv4 = void 0;
/**
 * Formats raw UUID data into the proper string format.
 * @param data - Raw UUID data.
 * @returns Formatted UUID string.
 */
function uint8ToUuid(data) {
    if (data.length !== 16) {
        return '';
    }
    function cb(previous, current) {
        return previous + current.toString(16).padStart(2, '0');
    }
    return data.slice(0, 4).reduce(cb, '') +
        '-' + data.slice(4, 6).reduce(cb, '') +
        '-' + data.slice(6, 8).reduce(cb, '') +
        '-' + data.slice(8, 10).reduce(cb, '') +
        '-' + data.slice(10).reduce(cb, '');
}
/**
 * @returns A [version 4 UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)).
 */
function uuidv4() {
    // Check for crypto API
    if (window.crypto === undefined) {
        return uint8ToUuid(new Uint8Array(16));
    }
    // Get 16 octets for UUID
    const octets = new Uint8Array(16);
    const modifiers = Uint8Array.from([
        parseInt('01000000', 2),
        parseInt('10000000', 2),
        parseInt('00001111', 2),
        parseInt('00111111', 2) // Mask to zero higher bits, variant
    ]);
    window.crypto.getRandomValues(octets);
    // Set version bits and variant bits
    octets[6] = (octets[6] & modifiers[2]) | modifiers[0];
    octets[8] = (octets[8] & modifiers[3]) | modifiers[1];
    return uint8ToUuid(octets);
}
exports.uuidv4 = uuidv4;


/***/ }),

/***/ "./src/utils/template/Template.ts":
/*!****************************************!*\
  !*** ./src/utils/template/Template.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const ModalWindow_1 = __webpack_require__(/*! ../ModalWindow */ "./src/utils/ModalWindow.ts");
async function setBody(neonView) {
    const response = await fetch("/Neon/" + 'assets/template.html');
    document.body.innerHTML = await response.text();
    document.getElementById('home-link').href = "/";
    document.getElementById('neon-version').textContent = "9ef04e4e\n";
    document.getElementById('neon-main-icon').src = `${"/Neon/"}/assets/img/Neon_Icon_3.svg`;
    Array.from(document.getElementsByClassName('external-link-icon')).forEach((el) => {
        el.src = `${"/Neon/"}/assets/img/external-link.svg`;
    });
    document.getElementById('filename').innerText = `${neonView.manifest.title}`;
    // hotkey btn onclick event listener
    document.getElementById('navbar-item-hotkeys').addEventListener('click', function () {
        neonView.modal.setModalWindowView(ModalWindow_1.ModalWindowView.HOTKEYS);
        neonView.modal.openModalWindow();
    });
    //focus
}
exports.default = setBody;


/***/ }),

/***/ 0:
/*!****************************!*\
  !*** ./nextTick (ignored) ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ "d3":
/*!*********************!*\
  !*** external "d3" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = d3;

/***/ })

/******/ });
//# sourceMappingURL=editor.js.map